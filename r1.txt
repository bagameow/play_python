
[[ TC2781 ]]


========== 

A.data

 1. create a basic merchandise and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

========== 

1. update merchandise by mid 

 set request-&gt;auto_shelve_type='timespan'

 set request-&gt;auto_shelve_time=time()+3;

 set request-&gt;auto_offshelve_time=time()+100;

2. after sleep 5 second ， and get merchandise



Expected Results 

========== 

1.1-2.1 http response 200

2.2 virify merchandise status is draft

[[ TC2782 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Step: 

1. create draft merchandise(POST) 

   set requestData.mtype=basic

   auto_shelve_type=appointment

   

Expected Result:

1.verify response httpcode is 200

  verify resposeData

2.verify status is draft



[[ TC2783 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Step: 

1. create draft merchandise(POST) 

 set requestData.mtype=basic

   auto_shelve_time=nowTime+3



Expected Result:

1.verify response httpcode is 200

  verify resposeData

2.verify status is draft



[[ TC2784 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Step: 

1. create draft merchandise(POST) 

  set requestData.mtype=basic

  auto_offshelve_time=nowTime+60



Expected Result:

1.verify response httpcode is 200

  verify resposeData

2.verify status is draft



[[ TC2785 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

1.submit a bid merchandise and get mid1 and shelve merchandise and place bid and get bid_id1

2.cancel bid record for bid_id1

3.query bidder bid record list

 set requestUrl->bidder_id，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

3. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results[0]



[[ TC2786 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer1 place bid set max_price=20000.00

 3. buyer2 place bid set max_price=30000.00

 4. after close and query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results[0]->bid_item

[[ TC2787 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer2 place bid set max_price=20000.00

 3. buyer1 place bid set max_price=30000.00

 4. qa_update close and cancel bid record and query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results

[[ TC2788 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer1 place bid set max_price=20000.00

 3. close bid merchandise

 4.query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_WON



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results

[[ TC2789 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer1 place bid set bid_type=buy-now

 3. close bid merchandise

 4.query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_WON



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results

[[ TC2790 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Step: 

1. create draft merchandise(POST) 

 set requestData.mtype=basic

  auto_shelve_type=appointment

  auto_shelve_time=nowtime+3

  auto_offshelve_time=nowTime+60

2.sleep s and get merchandise detail check status



Expected Result:

1.verify response httpcode is 200

 verify resposeData

2.verify status is draft



[[ TC2791 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer1 place bid

 3. close bid merchandise

4.query bidder bid record list

 set requestUrl->bidder_id，ccode，property and search type is QUERY_BIDDER_LOST



Expected Result:

1. http response code 200 

    verify response_data->query_bider_results count=0

[[ TC2792 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET





Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise and place bid and get bid_id1

2.cancel bid record for bid_id1

 3. set requestUrl->bidder_id=bid_id1，ccode，property and search type is QUERY_BIDDER_WON



Expected Result:

3. http response code 200 

    verify response_data->query_bider_results count=0

[[ TC2793 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

1.query bidder bid record list

 set requestUrl->bidder_id(not exist)，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

1. http response code 200 

    verify response_data->query_bider_results count=0



[[ TC2794 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1. set requestUrl->bidder_id(not exist)，ccode，property and search type is QUERY_BIDDER_WON



Expected Result:

1. http response code 200 

    verify response_data->query_bider_results count=0

[[ TC2795 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

1.submit 2 bid merchandise and get mid1，mid2 and shelve merchandise separately and place bid separately and get bid_id1，bid_id2

2.cancel bid record for bid_id1，bid_id2

3.query bidder bid record list

 set requestUrl->bidder_id，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

3. http response code 200 

    verify response_data->query_bider_results count=2

    verify response data->query_bidder_results

[[ TC2796 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit 2 bid merchandise and get mid1，mid2 and shelve merchandise separately

 2.  place bid  separately and get bid_id1，bid_id2

 3. close bid_id1，bid_id2 merchandise

 4.query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_WON



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=2

    verify response data->query_bidder_results



[[ TC2797 ]]


========== 

A.data

  1. submit a bidding merchandise and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. update the bidding merchandise by mid  

   set request->title='add this update title info'

   set request->location='location-test'

2. get merchandise by mid

Expected Results 

========== 

1.1-2.1 http response 200

2.2 virify title and location fields

[[ TC2798 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. update the bidding merchandise by mid  

   set request->merchandise->title='add this update title info'

   set request->merchandise->location='location-test'

   set request->merchandise->bid->bid_item->total_quantity=10

2. get merchandise by mid

Expected Results 

========== 

1.1-2.1 http response 200

2.2 virify title，location and total_quantity fields

[[ TC2799 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. update the bidding merchandise by mid  

   set request->merchandise->ontime=time()

   set request->merchandise->offtime=time()+200

   set request->merchandise->bid->bid_item->start_time= time()+10

   set request->merchandise->bid->bid_item->end_time= time()+100



Expected Results 

========== 

1.1. verify http code is 400

[[ TC2800 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. update the bidding merchandise by mid  

   set request->title='add this update title info'



Expected Results 

========== 

1.1 http response 200

2.1 verify http response 400

[[ TC2801 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for the bidding merchandise

2. update the bidding merchandise by mid  

   set request->merchandise->bid->bid_item->total_quantity= 100

   set request->merchandise->bid->bid_item->cust_fields= {""reputation_limit"": 10} 

3. get bid merchandise 

Expected Results 

========== 

1.1-3.1 verify http response 200

2.2 virify bid_item total_quantity and cust_fields

[[ TC2802 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. update the bidding merchandise by mid  

   set request->location='location-test'

3. get bid merchandise by mid

Expected Results 

========== 

1.1-3.1 http response 200

3.2 verify merchandis location

[[ TC2803 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. close bid merchandise verify have wonner

3. update the bidding merchandise by mid  

   set request->location='location-test'



Expected Results 

========== 

1.1-2.1 http response 200

3.1 http response 400

[[ TC2804 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. close bid merchandise verify have wonner

3. update the bidding merchandise by mid  

   set request->title='add this bid title info'



Expected Results 

========== 

1.1-2.1 http response 200

3.1 http response 400

[[ TC2805 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. get bidding merchandise bid_id 001

2. close bid merchandise verify no wonner

3. update the bidding merchandise by mid  

   set request->title='add this bid title info'

4. get bidding merchandise info 



Expected Results 

========== 

1.1-4.1 http response 200

4.2 verify get bid_id is not 001

[[ TC2806 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. get bidding merchandise bid_id 001

2. cancel bid merchandise verify no wonner

3. update the bidding merchandise by mid  

   set request->title='add this bid title info'

4. get bidding merchandise info 



Expected Results 

========== 

1.1-4.1 http response 200

4.2 verify get bid_id is not 001

[[ TC2807 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. cancel bid item verify have wonner

3. update the bidding merchandise by mid  

   set request->location='location-test'



Expected Results 

========== 

1.1-2.1 http response 200

3.1 http response 400

[[ TC2808 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for bidding merchandise

2. cancel bid item verify have wonner

3. update the bidding merchandise by mid  

   set request->title='add this bid title info'



Expected Results 

========== 

1.1-2.1 http response 200

3.1 http response 400

[[ TC2809 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise and place bid and get bid_id1

2.cancel bid record for bid_id1

3.query bidder bid record list

 set requestUrl->bidder_id，ccode，property and search_type=bid



Expected Result:

3. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results[0]

[[ TC2810 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise and place bid and get bid_id1

2.query bidder bid record list

 set requestUrl->bidder_id，ccode，property and search_type=bid



Expected Result:

2. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results[0]

[[ TC2811 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2. buyer1 place bid set max_price=20000.00

 3. buyer2 place bid set max_price=30000.00

 4. query bidder bid record list 

 set requestUrl->bidder_id=buyer1，ccode，property and search type is QUERY_BIDDER_LOST 



Expected Result:

4. http response code 200 

    verify response_data->query_bider_results count=1

    verify response data->query_bidder_results[0]->bid_item

[[ TC2812 ]]


Url syntax:

Request URI:/v1/egs/merchandise/delete/[mid list]?user_update=[user_update]

method:PUT



Step:  

 1.submit a bid merchandise and get mid1

2.delete merchandise with required parameters

   set mid list=mid1

3. get merchandise detail



Expected Result:

2. http response code 200

   verify response_data

3.verify merchandise status

[[ TC2813 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET

 

Step: 

1.submit a bid merchandise and get mid1 and shelve merchandise and place bid

2.bid_qa_update close

3.delete merchandise with required parameters

   set mid list=mid1

4.get merchandise detail



Expected Result:

3. http response code 200 

    verify response_data

4. verify merchanidse status

[[ TC2814 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

1.submit a bid merchandise and get mid1 and shelve merchandise

2.bid_qa_update close

3.delete merchandise with required parameters

   set mid list=mid1

4.get merchandise detail



Expected Result:

3. http response code 200 

    verify response_data

4. verify merchanidse status

[[ TC2815 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1 and shelve merchandise

 2.delete merchandise with required parameters

   set mid list=mid1



Expected Result:

2. http response code 200 

    verify response_data

[[ TC2816 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1

 2.submit a bid merchandise and get mid2 and shelve and palce bid and cancel

 3. submit a bid merchandise and get mid3 and shelve and close

4.delete merchandise with required parameters

   set mid list=mid1，mid2，mid3

5. get merchandise detial by mid1，mid2，mid3

Expected Result:

4. http response code 200 

    verify response_data

5. verify merchanidse status

[[ TC2817 ]]


========== 

A.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_cancel/

 2.Request Method: PUT

 

Testing Steps: 

========== 

1. submit the merchandise 

and get mid

2. merchandise status is 1，cancel bid item by mid

3. shelve the merchandise

4. merchandise status is 2，cancel bid item by mid



Expected Results 

========== 

1.1 http response 200

2.1http response 400

3.1 http response 200

4.1 http response 200 and verify merchandise status is 3



[[ TC2818 ]]


========== 

A.data: submit a bidding merchandise and shelve it， get mid



B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_cancel/

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid and cancel bid record

2. cancel bid merchandise bid item

3. get bidding merchandis by mid



Expected Results 

========== 

1.1-3.1 http response 200

3.2 verify merchandise status is end

[[ TC2819 ]]


========== 

A.data: submit a bidding merchandise and shelve it， get mid



B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_cancel/

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. cancel bid merchandise bid item

2. get bidding merchandis by mid



Expected Results 

========== 

1.1-2.1 http response 200

2.2 verify merchandise status is close

[[ TC2820 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid

 2. delete the bidding merchandise by mid 

 3. delete again the bidding merchandise

 

Expected Result:

  1. http response code 200 

  2. http response code is 200



  3. http response code is 200， verify status code=9

[[ TC2821 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

5. get merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data format and bidder_records and highest_bidder_list



[[ TC2822 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

5. get detail merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data format and bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC2823 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1



Expected Results 

========== 

1.1-4.1 http response code is 200

4.2 verify detail_status=200 and verify response_data format

[[ TC2824 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by=""cst5566_000000843724""

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark=""cancel reason""

Expected Results 

========== 

1.1-4.1 http response code is 200

4.2 verify detail_status=200 and verify response_data format

[[ TC2825 ]]


========== 

 URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

 method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. submit a bidding merchandise and get mid2 and shelve it

3. place bid for mid2

4. submit a bidding merchandise mid4 and shelve it 

5. cancel merchandise for mid3

6. submit a bidding merchandise mid5 and shelve it 

7. close merchandise for mid4

8. submit a bidding merchandise mid5 and shelve it 

9. close merchandise for mid5 and delete it 

10. submit a bidding merchandise mid5 and shelve it ， then end it

11. cancel by cc 

 set request_data->multi_cancel_by_cc_data[0]->mid = mid1

 set request_data->multi_cancel_by_cc_data[1]->mid = mid2

 set request_data->multi_cancel_by_cc_data[2]->mid = mid3

 set request_data->multi_cancel_by_cc_data[3]->mid = mid4

 set request_data->multi_cancel_by_cc_data[4]->mid = mid5

 set request_data->multi_cancel_by_cc_data[5]->mid = mid6

 

Expected Results 

========== 

1.1-11.1 http response code is 200

11.2 verify every mid's detail_status and verify response_data format

[[ TC2826 ]]


========== 

URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

method PUT



Testing Steps: 

==========

1. creat draft a baisc merchandise and get mid1

2. submit a baisc merchandise and get mid2 and shelve it

3. submit a baisc merchandise mid3 and shelve it

4. submit a baisc merchandise mid4 and shelve it ， then cancel it

5. submit a baisc merchandise mid5 and shelve it 

6. close merchandise for mid5

7. submit a baisc merchandise mid6 and shelve it， then cancel it 

8. delele of merchandise mid6

9. cancel by cc 

 set request_data->multi_cancel_by_cc_data[0]->mid = mid1

 set request_data->multi_cancel_by_cc_data[1]->mid = mid2

 set request_data->multi_cancel_by_cc_data[2]->mid = mid3

 set request_data->multi_cancel_by_cc_data[3]->mid = mid4

 set request_data->multi_cancel_by_cc_data[4]->mid = mid5

 set request_data->multi_cancel_by_cc_data[5]->mid = mid6

Expected Results 

========== 

1.1-9.1 http response code is 200

9.2 verify every mid's detail_status and verify response_data format

[[ TC2827 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

update merchandise:(PUT)/v1/egs/merchandise/update//?user_update=



1.submit a baisc merchandise mid

 set taxonomy_node_id='12345'

2.shelve the merchandise mid



Step:   

1. update mid set title='update test'

2. search merchandise set query=""operation:update AND title='update test'""

3. search merchandise set query=""operation:update AND use_state=1""

4. search merchandise set query=""operation:update AND taxonomy_node_id='12345'""

5. search merchandise set query=""operation:update AND cluster_id=''""

6. search merchandise set query=""operation:update AND cust_id=''""

7. search merchandise set query=""operation:update AND price=''""

8. search merchandise set query=""operation:update AND status=''""

9. search merchandise set query=""operation:update AND mid=''""

10. search merchandise set query=""operation:update AND mtype=''""

11. search merchandise set query=""operation:update AND cust_category=''""

12. search merchandise set query=""operation:update AND popularity=''""



Expected Result:

1.1-12.1 http response 200

         response_message()

2.2-12.2 verify respondse data hava mid

[[ TC2828 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

update merchandise:(PUT)/v1/egs/merchandise/update//?user_update=



1.submit a bid merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:   

1. update mid set title='update test'

2. search merchandise set query=""operation:update AND title='update test'""

3. search merchandise set query=""operation:update AND price=''""

4. search merchandise set query=""operation:update AND status=''""

5. search merchandise set query=""operation:update AND mid=mid""

6. search merchandise set query=""operation:update AND mtype='bid'""

7. search merchandise set query=""operation:update AND cust_category=''""

8. search merchandise set query=""operation:update AND popularity=''""



Expected Result:

1.1-8.1 http response 200

         response_message()

2.2-8.2 verify respondse data hava mid

[[ TC2829 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

place bid:(POST)/v1/egs/merchandise/bid_place/



1.submit a bid merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:   

1. place bid merchandise

2. search merchandise set query=""operation:bid_place AND mid:mid""



Expected Result:

1.1-2.1 http response 200

         response_message()

2.2 verify respondse data hava mid

[[ TC2830 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

canel bid:(PUT)/v1/egs/merchandise/bid_cancel/



1.submit a bid merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:   

1. bid cancel 

2. search merchandise set query=""operation:bid_cancel AND mid:mid""

3. search merchandise set query=""operation:bid_cancel AND status:5""



Expected Result:

1.1-3.1 http response 200

         response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2831 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

close merchandise:(PUT)/v1/egs/merchandise/close/?user_update=



1.submit a basic merchandise mid

 set mtype='basic'

2.shelve the merchandise mid



Step:   

1. close merchandise 

2. search merchandise set query=""operation:close AND mid:mid""

3. search merchandise set query=""operation:close AND status:3""



Expected Result:

1.1-3.1 http response 200

         response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2832 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

close merchandise:(PUT)/v1/egs/merchandise/close/?user_update=



1.submit a bid merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:   

1. close merchandise 

2. search merchandise set query=""operation:close AND mid:mid""

3. search merchandise set query=""operation:close AND status:3""



Expected Result:

1.1-3.1 http response 200

         response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2833 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

multi cancel by cc:(PUT)/v1/egs/merchandise/multi_cancel_by_cc?user_update=



1.submit a basic merchandise mid

 set mtype='basic'

2.shelve the merchandise mid



Step:   

1. multi cancel by cc for merchandise mid

2. search merchandise set query=""operation:multiCancelByCc AND mid:mid""

3. search merchandise set query=""operation:multiCancelByCc AND status:3""



Expected Result:

1.1-3.1 http response 200

         response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2834 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

multi cancel by cc:(PUT)/v1/egs/merchandise/multi_cancel_by_cc?user_update=



1.submit a bid merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:   

1. multi cancel by cc for merchandise mid

2. search merchandise set query=""operation:multiCancelByCc AND mid:mid""

3. search merchandise set query=""operation:multiCancelByCc AND status:3""



Expected Result:

1.1-3.1 http response 200

         response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2835 ]]


    URI syntax: /v1/egs/merchandise/submit/?user_update=

    Request Method: POST

    [PUT]/v1/egs/merchandise/shelve/?user_update=

    [GET]/v1/egs/merchandise/search_by_vql/?vql=

    

    Step£º

     1. submit a basic merchandise and get merchandise Id mid

     2.shelve the merchandise mid

     3.search merchandise by title

     4.search merchandise by use_state

     5.search merchandise by taxonomy_node_id 

     6.search merchandise by cluster_id

     7.search merchandise by cust_id  

     8.search merchandise by price 

     9.search merchandise by status 

     10.search merchandise by  mid 

     11.search merchandise by mtype 

     12search merchandise by  cust_category 

     13.search merchandise by popularity 

     

   Expected Result:

      1. http response 200

         response_message()

     3-13. verify respondse data hava mid

[[ TC2836 ]]


    URI syntax: /v1/egs/merchandise/submit/?user_update=

    Request Method: POST

    [PUT]/v1/egs/merchandise/shelve/?user_update=

    [GET]/v1/egs/merchandise/search_by_vql/?vql=

    

    Step£º

     1. submit a bid merchandise and get merchandise Id mid

     2.shelve the merchandise mid

     3.search merchandise by title

     4.search merchandise by use_state

     5.search merchandise by taxonomy_node_id

     6.search merchandise by cluster_id

     7.search merchandise by cust_id

     8.search merchandise by price

     9.search merchandise by status

     10.search merchandise by mid

     11.search merchandise by start_price

     12.search merchandise by buynow_price

     13.search merchandise by current_price

     14.search merchandise by total_bid_times

     15.search merchandise by reserve_price

     16.search merchandise by mtype

     17.search merchandise by cust_category

     18.search merchandise by popularity

      

   Expected Result:

    1. http response 200

         response_message()

    3-18. verify respondse data hava mid

[[ TC2837 ]]


Url syntax:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:POST

submit bid merchandise:(POST)/v1/egs/merchandise/submit/?user_update=

shelve merchandise:(PUT)/v1/egs/merchandise/shelve/?user_update=

place bid:(PUT)/v1/egs/merchandise/bid_place/?user_update=



1.submit a basic merchandise mid

 set mtype='bid'

2.shelve the merchandise mid



Step:  

1. place bid 

2. search merchandise set query=""+use_state:[0;2]+""

3. search merchandise set query=""+status:[1;3]+""

4. search merchandise set query=""+total_bid_times:[0;2]+""



5. search merchandise set query=""+popularity :[99;100]+""

Expected Result:

1.1-3.1 http response 200

     response_message()

2.2-3.2 verify respondse data hava mid

[[ TC2838 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

 3. get merchandise by mid  

 Expected Result:

   1.1-3.1 http response 400

   2.2 verify response message

   3.2 verify fields is new value

[[ TC2839 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

 1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.publish draft merchandise

 

 Expected Result:

   1.1-2.1 http response 400

   2.2 verify response message

[[ TC2840 ]]


    URI syntax: /v1/egs/merchandise/create_draft/?user_update=

    Request Method: POST

    

Step: 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->total_quantity=1

  set requset_data->merchandise_data->bid->bid_item->start_price=20.00

  set requset_data->merchandise_data->bid->bid_item->reserve_price=30.00

  set requset_data->merchandise_data->bid->bid_item->buynow_price=50.00

  set requset_data->merchandise_data->bid->bid_item->auto_extension=0

  set requset_data->merchandise_data->bid->bid_item->close_early=0

  set requset_data->merchandise_data->bid->bid_item->cust_fields='whatever'



Expected Result:

   1.1 http response 200

    verify response message

[[ TC2841 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 4. close bid item

 5. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

    6. get detail 

 

Expected Result:

   1.1-6.1 http response 200

   6.2 verify winner list

[[ TC2842 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 4. close bid item

 5. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

  set seller_id='seller_5566'

    6. get detail 

 

Expected Result:

   1.1-6.1 http response 200

   6.2 verify winner list

[[ TC2843 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_place/

 2.Request Method: POST

 

Testing Steps: 

==========  

1. BidderA place bid   

   set request->merchandise->bid->place_bid_request->min_quantity= 1

   set request->merchandise->bid->place_bid_request->req_quantity= 2

   set request->merchandise->bid->place_bid_request->max_price= 100.00

   set request->merchandise->bid->place_bid_request->comments= 'test comments'

2. BidderB place bid 

  set request->merchandise->bid->place_bid_request->max_price= 110.00



Expected Results 

========== 

1.1-2.1 verify http response 200

1.2 verify response message is ok

2.2 verify response_data->exceeded_bidder_id->BidderA->current_price is 100.00

     response_data->qty_changed_highest_bidder_id is empty

[[ TC2844 ]]


========== 

A.data

 1. submit a bidding merchandise and shelve it and get mid

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_cancel_bid_record/

 2.Request Method: PUT

 

Testing Steps: 

========== 

1. BidderA place bid   

  set request->merchandise->bid->place_bid_request->max_price= 100.00

2. BidderB place bid 

 set request->merchandise->bid->place_bid_request->max_price= 110.00

4. cancel bid record of BidderB 

Expected Results 

========== 

1.1-4.1 verify http response 200

4.2 virify response_data->qty_changed_highest_bidder_id->BidderA



[[ TC2845 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. place bid for the bidding merchandise

2. update the bidding merchandise by mid  

   set request->merchandise->bid->bid_item->total_quantity= 100

3. get bid merchandise 

Expected Results 

========== 

1.1-3.1 verify http response 200

2.2 virify bid_item total_quantity and cust_fields

[[ TC2923 ]]


======URI Syntax:   create node(POST)  /v1/egs/category/node/insert/?timeframe=

   get node path(GET) /v2/egs/category/node/get_path//?timeframe=&amp;activated_only=

   get node(GET)/v1/egs/category/node/get_node//?timeframe=&amp;activated_only=

   get children of node(GET) /v2/egs/category/node/get_children//?timeframe=&amp;activated_only=

  

 Testing Steps:

 ==========

 

 1. insert root node node1 and children node node2

 2. insert children node  and get cat_id = node3

  set next_sibling_cat_id = node2

 3. get node3

 4. get node3 node path

 5. get node1 children node

 

 Expected Results

 ==========

 1.1-5.1 http response code is 200

 3.2 veify http response format and next_sibling_cat_id = node2

 4.2 veify http response format

 5.2 veify http response format and node sequence node3-&gt;node2-&gt;node1

[[ TC2924 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



Expected Results







==========







1.Http Response Code 200



[[ TC2925 ]]




request->image_data = ["http:\/\/l.yimg.com\/f\/i\/tw\/hp\/mh\/09purple.gif"]







Expected Result:



1. http response 200



response json format



status->code=200



status->message="succes



[[ TC2926 ]]




1. Insert merchandise，get merchandise_id mid



2. Purge merchanidse



   SET merchandise_id = mid







Expected Result:



1， http code 200



[[ TC2927 ]]


 

========== 



URI Syntax:

  

Submit: /v1/egs/merchandise/submit/?user_update=



Get:  /v1/egs/merchandise/get/







Testing Steps:



==========

 

Step:

  

1. Submit merchandise(POST) and get mid



SET request_data->cust_category=["123"， "456"， "789"]



2. Get Merchandise(Get) by mid







Expected Results



==========

 

1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message="success"







2.1 http response code is 200



2.2 check data is the same as insert



[[ TC2928 ]]


 

==========

 

URI Syntax:

  

Submit: /v1/egs/merchandise/submit/?user_update=



Get Detial:  /v1/egs/merchandise/get_detail/







Testing Steps:



 

==========

 

Step:

  

1. Submit merchandise(POST) and get mid



SET request_data->cust_category=["123"， "456"， "789"]



2. Get Merchandise(Get) Detail by mid







Expected Results

 

==========

 

1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message="success"







2.1 http response code is 200



2.2 check data is the same as insert



[[ TC2929 ]]


 

==========

 

URI Syntax:

  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:

 

==========

 

Step:

  

1. Create Draft merchandise(POST) and get mid



SET request_data->aid='jordan'



SET request_data->mtype='basic'



SET request_data->cust_category=["123"， "456"， "789"]



2. Get Merchandise(Get) by mid







Expected Results

 

==========

 

1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2.1 http response code is 200



2.2 check data is the same as insert



[[ TC2930 ]]




request_data->sid='adpost'



request_data->aid='jordan'



request_data->mtype='basic'



request_data->ccode='tw'



request_data->property='auction'



request_data->category='11111'



request_data->title='this is title'



request_data->descs='this is descs'



request_data->location='taipei'



request_data->currency='TWD'



2. GET /v1/egs/merchandise/publish_draft/{mid}



3. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'



2.1 http response code is 200



2.2 check status code and correct



status->code=200



status->message='success'



3.1 http response code is 200



3.2 check data is the same as insert



3.3 check status is NEW



[[ TC2931 ]]




request_data->aid='jordan'



request_data->mtype='basic'



request_data->ccode='tw'



request_data->property='auction'



2. PUT /v1/egs/merchandise/update/{mid}



request_data->aid='jordan_1'



3. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'



2.1 http response code is 200



2.2 check status code and correct



status->code=200



status->message='success'



3.1 http response code is 200



3.2 check data is the same as update



[[ TC2932 ]]




request->image_data = {



      profile: basic，



      src_urls: [http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg，



                         http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg



      ]



}







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC2933 ]]




request->image_data = {



      profile: basic，



      src_urls: [http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg，



                         http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg



      ]



}







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC2934 ]]








Step:  1. GET /v1/egs/merchandise/accept_scheduler/?mid=M12345678&action=off_shelve&ts=123456789&sign=ABCDEFGHIJK







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='success'



[[ TC2935 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/mass_submit



2. SET batch_id = result_data->response_data->batch_id



GET /v1/egs/batch/query_summary/${batch_id}







[Expected Result]



1. assertEquals http 200

 assertEquals status->code = '200'



2. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals response_data->batch_summary->ccode = request_data->ccode



 assertEquals response_data->batch_summary->property = request_data->property



 assertEquals response_data->batch_summary->status = 0



 assertEquals response_data->batch_summary->total_cnt = count(request_data->mass_data)



 assertEquals response_data->batch_summary->create_time < Now + 5



[[ TC2936 ]]






1. Repeat 10 time



SET request_data = required_default



SET request_data->merchandise_data->title = "dustin is a good man"(length=128)



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



2. Repeat 10 time



PUT /v1/egs/merchandise/shelve/${mid}



3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:dustin+)&collapsefield=gid&collasesize=10







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



has_group_member=true



[[ TC2937 ]]




1. Repeat 10 time



SET request_data = required_default



SET request_data->merchandise_data->title = "???????????"(length=128)



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



2. Repeat 10 time



PUT /v1/egs/merchandise/shelve/${mid}



3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:???+)&collapsefield=gid&collasesize=10







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



has_group_member=true



[[ TC2938 ]]




1. Repeat 5 time



SET request_data = required_default



SET request_data->merchandise_data->title = "???????????"



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



2. Repeat 5 time



PUT /v1/egs/merchandise/shelve/${mid}



3. Repeat 5 time



SET request_data = required_default



SET request_data->merchandise_data->title = "yahoo go go go"



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



4. Repeat 5 time



PUT /v1/egs/merchandise/shelve/${mid}



5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:??+)&collapsefield=gid&collasesize=5



6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:yahoo+)&collapsefield=gid&collasesize=5









[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 200



verify response_message()



5. assertEquals http 200



verify response_message()



total count = 5， title is correct



has_group_member=true



6. assertEquals http 200



verify response_message()



total count=5， title is correct



has_group_member=true



[[ TC2939 ]]




1. Repeat 10 time



SET request_data = required_default



SET request_data->merchandise_data->title = "??????yahoo go go go"



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



2. Repeat 5 time



PUT /v1/egs/merchandise/shelve/${mid}



3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title??+)&collapsefield=gid&collasesize=5



4. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:go+)&collapsefield=gid&collasesize=5





[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 200



verify response_message()



search result from 3 is the same as 2



has_group_member=true



[[ TC2940 ]]




1. SET request_data = required_default



SET request_data->merchandise_data->title = "???????????"



POST /v1/egs/merchandise/submit



2. PUT /v1/egs/merchandise/shelve/${mid}



3. SET request_data = required_default

SET request_data->merchandise_data->title = "???????????"



POST /v1/egs/merchandise/submit



SET mid = response_data->mid



4. PUT /v1/egs/merchandise/shelve/${mid}



5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:??+)&collapsefield=gid&collasesize=2







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 200



verify response_message()



5. assertEquals http 200



verify response_message()



search result have two merchandise



has_group_member=true



[[ TC2941 ]]




1. SET request_data = required_default



PUT /v1/egs/merchandise/mass_cancel



2. SET batch_id = result_data->response_data->batch_id



GET /v1/egs/batch/query_summary/${batch_id}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



2. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals response_data->batch_summary->ccode = request_data->ccode



 assertEquals response_data->batch_summary->property = request_data->property



 assertEquals response_data->batch_summary->status = 0



 assertEquals response_data->batch_summary->total_cnt = count(request_data->mass_data)



 assertEquals response_data->batch_summary->create_time < Now + 5



[[ TC2942 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode="tw"



request_data->property="auction"



request_data->mtype="basic"



request_data->mass_data=[



         {



           "merchandise_data": {



             "mid": {$mid}，



             "extend_mins": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



status->code=200



status->message="extend merchandises ok"



[[ TC2943 ]]




1. SET request_data = required_default



PUT /v1/egs/merchandise/mass_cancel_by_aid



2. SET batch_id = result_data->response_data->batch_id



G







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



2. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals response_data->batch_summary->ccode = request_data->ccode



 assertEquals response_data->batch_summary->property = request_data->property



 assertEquals response_data->batch_summary->status = 0



[[ TC2944 ]]




1. submitMerchandise



2. shelveMerchandise







Expected Result:





verify similarity



[[ TC2945 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+index_cust_field2="iphone 5"



3. Search this merchandise by search require parameters+index_cust_field1="iphone 5"







Expected Results ==========



verify the merchandise can be searched



[[ TC2946 ]]




=========



 Submit Merchandise URL:/v1/egs/merchandise/submit



 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Create Product URL:/v1/egs/product/create_product



Testing Steps:

 

========== 





1.Submit Merchandise(POST) with product id and Get mid(mid1) from ResponseData



SET request_data->cust_category=["123"， "456"， "789"]



2.Get Merchandise Details(GET) by mids



   ids=mid1



Expected Results

 

==========





1.1.Http Response Code 200



1.2.Response Data:$.status->code = 200



   Response Data:$.status->message = "response ok"



2.Response Data:$.response_data->detail_response_data = insert data



   Response Data:$.response_data->detail_status->code= 200



[[ TC2970 ]]




1. submit Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]



   method:POST



2. get url? /v1/egs/merchandise/get/



   method: GET





   

Step:

  

1.create a bid merchandise with default optional parameter

 

   set request_data->bid->total_quantity



         request_data->bid->start_price



2. get bidding merchandise by merchandise_id





    

Expected Result:



1. http response code 200



    verify response data



2. http response code 200



   verify response data format



[[ TC2971 ]]




(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]



method:POST



(Query detail bid log list)



Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 1.submit a bid merchandise and get mid







Step: 



 



1.place a bid with all required parameters



    set requestUrl->mid=mid

 

    unset request_data->merchandise->bid->comments



2. query detail bid log list







Expected Result:



1. http response code 200



    verify response data=insert data



    verify response_data->merchandise->bid->bid_id



2. http response code 200



    verify response_data->merchandise->bid->bid_logs[0]->log_type=2



[[ TC2972 ]]


1. submit Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

   method:POST

  

Step:  

1.create a pre-sell merchandise with default optional parameter 

   set request_data->presale_shipping_type->"ondate"

       request_data->presale_shipping_ondate->time()+5*60*1000

      request_data->taxonomy_node_id->'1234'

      request_data->cluster_id->'000003261712'



2.create a pre-sell merchandise with default optional parameter 

  set request_data->presale_shipping_type->"afterdays"

        request_data->presale_shipping_afterdays->10

      request_data->taxonomy_node_id->'1234'

      request_data->cluster_id->'000003261712'

     

Expected Result:

1-2. http response code 200

     verify response data



[[ TC2973 ]]




Url syntax:



Request URI: /v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?count=[count]&offset=[offset]







method:GET



 1.submit a bid merchandise and get mid and place bid







Step:

  

1.query detail bid log list with required parameters



    set requestUrl->mid=mid



 



Expected Result:



1. http response code 200

 

    verify response data->merchandise_data->bid



[[ TC2974 ]]




method:PUT



(query detail log list)Request URI



 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 1.submit a bid merchandise and get mid and place bid





   

Step:

  

1.cancel bid record with required parameters



    (mid，bidder_id，cancel_reason)



2. query detail bid log list by mid







Expected Result:



1. http response code 200

 

    verify response data->merchandise_data->bid



2. http response code 200



    verify response data->merchandise_data->bid->continuation=false



    verify response data->merchandise_data->bid->bid_logs[0]->log_type=8



[[ TC2975 ]]




Url syntax:



Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]



method:PUT



(query detail log list)Request URI



 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 1.submit a bid merchandise and get mid and place bid





   

Step:

  

1.close merchandise with required parameters



   requestUrl->mid_list=mid



 2. query detail bid log list by mid



 

 

Expected Result:



1. http response code 200

 

    verify response data



2. http response code 200



    verify response data->merchandise_data->bid->continuation=true



    verify response data->merchandise_data->bid->bid_logs[0]->log_type=8



[[ TC2976 ]]


1.create a bid merchandise with default optional parameter 

2.shelve

3.place bid

4.get



Expected Result:

verify win_quantity and close status = 6

[[ TC2977 ]]


1.create a bid merchandise

2.shelve

3.qa update

4.get merchandise



Expected Result:

verify total_auto_reshelve_count and shelve status

[[ TC2978 ]]


1.create a bid merchandise with default optional parameter 

2.shelve

3.place bid

4.call bid qa update

5.get



Expected Result:

verify win_quantity and close status

[[ TC2979 ]]




1.create a bid merchandise with default optional parameter;



2.shelve



3.qa update merchandise offtime



4.get

 



Expected Result:



verify merchandise status and total_auto_reshelve_count



[[ TC2980 ]]


 

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}







Step:



 



1. create draft merchandise(POST) 

 set requestData.mtype=bid







Expected Result:



1.verify response httpcode is 200

  verify resposeData



[[ TC2981 ]]




==========

 

A.data



 1. create draft merchandise and get mid







B.URI Syntax:



 1.Request URI: /v1/egs/merchandise/update//?user_update



 2.Request Method: PUT







Testing Steps:

 

==========

 

1. update merchandise by mid

 

 set request->auto_shelve_type='timespan'



 set request->duration_day=1



 set request->offshelve_tod=10



 set request->timezone='Asia/Taipei'



 set request->auto_reshelve_allowed=5



 set request->timespan_shelve_time = '1361868600' ，

  

2. get merchandise 







Expected Results

 

==========

 

1.1-2.1 http response 200



2.2 virify timespan_shelve_time ='1361868600'



[[ TC2982 ]]


 

==========

 

A.data



 1. submit merchandise and get mid







B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update



 2.Request Method: PUT





 

Testing Steps:

 

==========

 

1. update merchandise by mid

 

 set request->auto_shelve_type='timespan'



 set request->duration_day=1



 set request->offshelve_tod=10



 set request->timezone='Asia/Taipei'



 set request->auto_reshelve_allowed=5



 set request->timespan_shelve_time = time()+5 ，

  

2. get merchandise



 



Expected Results

 

==========

 

1.1-2.1 http response 200



2.2 virify timespan_shelve_time is set value



[[ TC2983 ]]


 

==========

 

A.data



 1. submit merchandise and get mid







B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update





 2.Request Method: PUT





Testing Steps:

 

==========

 

1. shelve merchandise

 

2. update merchandise by mid

 

 set request->timespan_shelve_time = '1361868600' ，



  



Expected Results

 

==========



1.1 http response 200



2.1 http response 400



[[ TC2984 ]]


 

==========

 

A.data

 1. submit merchandise and get mid







B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update



 2.Request Method: PUT







Testing Steps:

 

==========



1. shelve merchandis



2. close merhcanide

 

3. update merchandise by mid

 

 set request-&gt;auto_shelve_type='timespan'



 set request-&gt;duration_day=1



 set request-&gt;offshelve_tod=10



 set request-&gt;timezone='Asia/Taipei'



 set request-&gt;auto_reshelve_allowed=5



 set request-&gt;timespan_shelve_time = time()+5 ，

  

4. get merchandise



 



Expected Results

 

==========

 

1.1-3.1 http response 200



3.2 virify timespan_shelve_time is set value



[[ TC2985 ]]


 

==========

 

A.data



  1. submit a bidding merchandise and get mid





 

B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update=



 2.Request Method: PUT





 

Testing Steps:

 

==========

  

1. update the bidding merchandise by mid

  

 set request->auto_shelve_type='timespan'



 set request->duration_day=1



 set request->offshelve_tod=10



 set request->timezone='Asia/Taipei'



 set request->auto_reshelve_allowed=5



    set request->timespan_shelve_time  = time()+5 ，

      

2. get merchandise



 

 

Expected Results

 

==========

 

1.1-2.1 http response 200



2.2 virify timespan_shelve_time is set value



[[ TC2986 ]]


 

==========

 

A.data



  1. submit a bidding merchandise and get mid





  

B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update=



 2.Request Method: PUT





 

Testing Steps:



==========

  

1. shelve the bidding merchandise

 

2. update the bidding merchandise by mid

  

    set request->timespan_shelve_time  = '1361868600' ，



     

 

Expected Results

 

==========

 

1.1 http response 200



2.1 http response 400



[[ TC2987 ]]


 

==========

 

A.data



  1. submit a bidding merchandise and get mid





 

B.URI Syntax:

 

 1.Request URI: /v1/egs/merchandise/update//?user_update=



 2.Request Method: PUT





 

Testing Steps:

 

==========

  

1. shelve the bidding merchandis



2. close the bidding merhcanide



3. update the bidding merchandise by mid

 

 set request->auto_shelve_type='timespan'



 set request->duration_day=1



 set request->offshelve_tod=10



 set request->timezone='Asia/Taipei'



 set request->auto_reshelve_allowed=5



    set request->timespan_shelve_time  = time()+5 ，

     

4. get merchandise



 

 

Expected Results

 

==========

 

1.1-3.1 http response 200



3.2 virify timespan_shelve_time is set value



[[ TC2988 ]]




Url syntax:



Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}



method:GET



 1.submit a bid merchandise and get mid and shelve merchandise and place bid







Step:

  

1.query bidder bid record list with required parameters



 set requestUrl->bidder_id，ccode，property







Expected Result:



1. http response code 200



   verify response_data->query_bider_results count=1

 

    verify response data->query_bidder_results



[[ TC2989 ]]




Url syntax:



Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}



method:GET





 1.submit a bid merchandise and get mid and shelve merchandise and place bid







Step:

 

1.place bid for mid

 

2.query bidder bid record list with required parameters



 set requestUrl->bidder_id，ccode，property(current_only=1)







Expected Result:



2. http response code 200

 

    verify response_data->query_bider_results count=1

 

    verify response data->query_bidder_results



[[ TC2990 ]]




Url syntax:



Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}



method:GET







 1.submit a bid merchandise and get mid1 and shelve merchandise and place bid



 2.submit a bid merchandise and get mid2 and shelve merchandise and place bid







Step:

 

1.query bidder bid record list with required parameters



 set requestUrl->bidder_id，ccode，property(current_only=1)







Expected Result:



1. http response code 200

 

    verify response_data->query_bider_results count=2



    verify response data->query_bidder_results



[[ TC2991 ]]




Url syntax:



Request URI: /v1/egs/merchandise/bid_query_bidder_highest_winning_list/{bidder_id}?{param}



method:GET







 1.submit a bid merchandise and get mid and shelve merchandise and place bid



 2.qa_update end time then close the bid merchandise





 

Step:

  

1.query bidder bid record list with required parameters



 set requestUrl->bidder_id，ccode，property







Expected Result:



1. http response code 200



    verify response data->merchandise_data->bid->bidder_highest_winning_results



[[ TC2992 ]]




Url syntax:



Request URI:/v1/egs/merchandise/bid_query_bidder_highest_winning_list/{bidder_id}?{param}



method:GET







 1.submit a bid merchandise and get mid1 and shelve merchandise and place bid



 2.submit a bid merchandise and get mid2 and shelve merchandise and place bid



 3.qa_update end time then close the bid merchandise mid1，mid2







Step:



1.query bidder bid record list with required parameters



 set requestUrl->bidder_id，ccode，property







Expected Result:



1. http response code 200

 

    verify response data->merchandise_data->bid->bidder_highest_winning_results



[[ TC2995 ]]


(cancel bid)Request URI: EGS_merchandise_cancel_bid

method:PUT

 1.submit a bid merchandise and get mid and shelve



Step:

1.cancel bid with all parameters



Expected Result:

1.http response code 200

    verify response data



[[ TC2996 ]]


(cancel bid)Request URI: EGS_merchandise_cancel_bid

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.cancel bid with all parameters



Expected Result:

1.http response code 400

    verify response data

[[ TC2997 ]]


(cancel bid)Request URI: EGS_merchandise_cancel_bid

method:PUT

 1.submit a bid merchandise and get mid and shelve



Step:

1.cancel bid with all parameters

  set seller_id=array(12)



Expected Result:

1.http response code 400

    verify response data

[[ TC2998 ]]


(cancel bid)Request URI: EGS_merchandise_cancel_bid

method:PUT

 1.submit a bid merchandise and get mid and shelve



Step:

1.cancel bid with all parameters

  set mid=1233!@



Expected Result:

1.http response code 404

    verify response data

[[ TC2999 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3000 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]="y"

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment" 

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]="y"



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3001 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]="123456789012345678790"

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]="123456789012345678790"



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3002 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

  set request_data[auto_shelve_type]="appointment"

  request_data[auto_shelve_time]=""

  request_data[auto_offshelve_time]=time()+60



3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"

 request_data[auto_shelve_time]=time()

 request_data[auto_offshelve_time]=""

 

Expected Result:

2-3. response code return 400

  verify status.code=10

[[ TC3003 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]=array(12)

request_data[auto_offshelve_time]=201307101021



3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  

 request_data[auto_shelve_time]=201307101020

 request_data[auto_offshelve_time]=array(12)



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3004 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]=array("a"=>1)

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=array("a"=>1)



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3005 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]=-1

request_data[auto_offshelve_time]=201307101021



3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=-1



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3006 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  

request_data[auto_shelve_time]=0

request_data[auto_offshelve_time]=201307101021



3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=0



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3007 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"

 request_data[auto_shelve_time]=null

 request_data[auto_offshelve_time]=time()+60

 

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"

 request_data[auto_shelve_time]=time()

 request_data[auto_offshelve_time]=null

 

Expected Result:

2-3. response code return 400

  verify status.code=10

[[ TC3008 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment" 

request_data[auto_shelve_time]="!@#"

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"

 request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]="!@#"



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3009 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

 set offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan" 

 set offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"  

 set duration_day，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"  

 set duration_day，offshelve_tod，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"  

 set duration_day，offshelve_tod，timezone



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3010 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]="y"

 set duration_day， offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day="y" offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod="y" ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone="y" ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed="y"



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3011 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day is out of scope， offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod is out of scope ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone is out of scope ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed is out of scope



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3012 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]=""  

 set duration_day， offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day="" offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod="" ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone="" ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=""



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3013 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]=array(12)

 set duration_day， offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day=array(12) offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod=array(12) ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone=array(12) ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=array(12)



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3014 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid

Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]=array("a"=>1)

 set duration_day， offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day=array("a"=>1) offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod=array("a"=>1) ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone=array("a"=>1) ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=array("a"=>1)



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3015 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid

Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]=-1

 set duration_day=-1 offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day=-1 offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod=-1 ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone=-1 ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=-1



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3016 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid

Step: 

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=0

 set duration_day=0 offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day=0 offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod=0 ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone=0 ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=0



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3017 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]=null

 set duration_day， offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day=null offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod=null ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone=null ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed=null



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3018 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1. Submit a bid merchandise and get mid



Step: 

1. Shelve merchandise by mid

set request_data[auto_shelve_type]="!@#"  

 set duration_day offshelve_tod，timezone，auto_reshelve_allowed

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="timespan"  

 set duration_day="!@#" offshelve_tod，timezone，auto_reshelve_allowed

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod="!@#" ，timezone，auto_reshelve_allowed

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day，offshelve_tod，timezone="!@#" ，auto_reshelve_allowed

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"   

set duration_day， offshelve_tod，timezone，auto_reshelve_allowed="!@#"



Expected Result:

1-5. response code return  400

    verify status.code=10

[[ TC3019 ]]


Url syntax:

Request URI:/v1/egs/merchandise/delete/[mid list]?user_update=[user_update]

method:PUT



Step:  

 1.submit a bid merchandise and get mid1

2.delete merchandise with all parameters

   set mid list=mid1，user_update=true

3. get merchandise detail



Expected Result:

2. http response code 200

   verify response_data

3.verify merchandise status

[[ TC3020 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET

 

Step:  

1.submit 50 bid merchandise and get mid1，mid2....mid50

2.delete merchandise with required parameters

   set mid list=mid1，mid2....mid50

4.get merchanidse detail



Expected Result:

2. http response code 200

   verify response_data

3. verify merchanidse status

[[ TC3021 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1

2.delete merchandise with required parameters

   set mid list=mid1，nonexistence mid2



Expected Result:

2. http response code 200 

    verify response_data

[[ TC3022 ]]


Url syntax: 

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param} 

method:GET 



Step: 

1.submit a bid merchandise and get mid1 

2.delete merchandise with required parameters 

set mid list=mid1 

set user_update=123 



Expected Result: 

2. http response code 400

verify response_data



[[ TC3023 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    unset requestUrl->mid_list

2.close with all parameters

    unset requestUrl->user_update



Expected Result:

1.http response code 200

2. http response code 404

    verify response data

[[ TC3024 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid="y")

2.close with all parameters

    set requestUrl->user_update=¡°y¡±



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3025 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid is varchar(20))

2.close with all parameters

    set requestUrl->user_update is 10



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3026 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

  set requestUrl->mid_list(mid="")

2.close with all parameters

  set requestUrl->user_update=¡°¡±



Expected Result:

1-2. http response code 400

  verify response data

[[ TC3027 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid=array(12))

2.close with all parameters

    set requestUrl->user_update=array(12)



Expected Result:

1-2. http response code 404

    verify response data"

[[ TC3028 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid=array("a"=>2))

2.close with all parameters

    set requestUrl->user_update=array("a"=>2)



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3029 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid=-1)

2.close with all parameters

    set requestUrl->user_update=-1



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3030 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid=0)

2.close with all parameters

    set requestUrl->user_update=0



Expected Result:

1. http response code 404

    verify response data

2.http response code 200

[[ TC3031 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid=null)

2.close with all parameters

    set requestUrl->user_update=null



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3032 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid



Step:

1.close with all parameters

    set requestUrl->mid_list(mid="!@#")

2.close with all parameters

    set requestUrl->user_update=¡°!@#¡±



Expected Result:

1-2. http response code 404

    verify response data

[[ TC3033 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    unset requestUrl->mid

2.get bid merchandise with all parameters

    unset requestUrl->highest_bidders

3.get bid merchandise with all parameters

    unset requestUrl->max_bidders

4.get bid merchandise with all parameters

    unset requestUrl->bidder_id



Expected Result:

2-4.http response code 200

1. http response code 404

    verify response data

[[ TC3034 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid="y"

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders="y"

3.get bid merchandise with all parameters

    set requestUrl->max_bidders="y"

4.get bid merchandise with all parameters

    set requestUrl->bidder_id="y"



Expected Result:

1 http response code 404

    verify response data

[[ TC3035 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid is varchar(20)

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=4294967295

4.get bid merchandise with all parameters

    set requestUrl->bidder_id is varchar(129)



Expected Result:

1 http response code 404

    verify response data

[[ TC3036 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=""

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=""

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=""

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=""



Expected Result:

1 http response code 404

    verify response data

[[ TC3037 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=array(12)

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=array(12)

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=array(12)

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=array(12)



Expected Result:

1 http response code 404

    verify response data

[[ TC3038 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=array("a"=>12)

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=array("a"=>12)

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=array("a"=>12)

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=array("a"=>12)



Expected Result:

1 http response code 404

    verify response data

[[ TC3039 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=-1

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=-1

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=-1

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=-1



Expected Result:

1 http response code 404

    verify response data

[[ TC3040 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=0

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=0

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=0

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=0



Expected Result:

1 http response code 404

    verify response data

[[ TC3041 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid=null

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders=null

3.get bid merchandise with all parameters

    set requestUrl->max_bidders=null

4.get bid merchandise with all parameters

    set requestUrl->bidder_id=null



Expected Result:

1 http response code 404

    verify response data

[[ TC3042 ]]


(get bid)Request URI: /v1/egs/merchandise/get/[mid]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:

1.get bid  merchansie with all parameters

    set requestUrl->mid="!@#"

2.get bid merchandise with all parameters

   set requestUrl->highest_bidders="!@#"

3.get bid merchandise with all parameters

    set requestUrl->max_bidders="!@#"

4.get bid merchandise with all parameters

    set requestUrl->bidder_id="!@#"



Expected Result:

1 http response code 404

    verify response data

[[ TC3043 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    unset requestUrl->mid

2.place a bid with all parameters

    unset requestData->merchandise_data->bid->bid_type

3.place a bid with all parameters

    unset requestData->merchandise_data->bid->bidder_id

4.place a bid with all parameters

    unset requestData->merchandise_data->bid->increase_bid_times

5.place a bid with all parameters

    unset requestData->merchandise_data->bid->max_price

6.place a bid with all parameters

    unset requestData->merchandise_data->bid->req_quantity



Expected Result:

1-6. http response code 400

    verify response data

[[ TC3044 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid="y"

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type="y"

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id="y"

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times="y"

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price="y"

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity="y"



Expected Result:

1. http response code 404

2/4-6. http response code 400

    verify response data

3. http response code 200

    verify response data

[[ TC3045 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid is varchar(20)

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type is long(10)

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id is varchar(129)

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=4294967295

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price is decimal(13.3)

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity is long(10)



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data



[[ TC3046 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid="y"

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=""

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=""

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=""

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=""

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=""



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3047 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid=array(12)

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=array(12)

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=array(12)

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=array(12)

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=array(12)

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=array(12)



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3048 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid=array('a'=>12)

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=array('a'=>12)

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=array('a'=>12)

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=array('a'=>12)

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=array('a'=>12)

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=array('a'=>12)



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3049 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid=-1

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=-1

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=-1

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=-1

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=-1

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=-1



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3050 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid=0

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=0

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=0

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=0

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=0

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=0



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3051 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type=null

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id=null

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times=null

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price=null

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity=null



Expected Result:

1. http response code 404

2-6. http response code 400

    verify response data

[[ TC3052 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:

1.place a bid with all parameters

    set requestUrl->mid="!@#"

2.place a bid with all parameters

    set requestData->merchandise_data->bid->bid_type="!@#"

3.place a bid with all parameters

    set requestData->merchandise_data->bid->bidder_id="!@#"

4.place a bid with all parameters

   set requestData->merchandise_data->bid->increase_bid_times="!@#"

5.place a bid with all parameters

   set requestData->merchandise_data->bid->max_price="!@#"

6.place a bid with all parameters

    set requestData->merchandise_data->bid->req_quantity="!@#"



Expected Result:

1. http response code 404

2/4-6. http response code 400

    verify response data

3. http response code 200

    verify response data

[[ TC3053 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid，shelve



Step:

1.place a bid with all parameters

    set max_price > start_price

Expected Result:

1. http response code 200

    verify response data

[[ TC3054 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid，shelve



Step:

1.place a bid with all parameters

    set max_price < start_price

Expected Result:

1. http response code 200

    verify response data

[[ TC3055 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit a bid merchandise and get mid1

 2.submit a bid merchandise and get mid2 and shelve merchandise

 3.delete merchandise with required parameters

   set mid list=mid1，mid2



Expected Result:

2. http response code 200

    verify response_data[1].detail_status.code=9

[[ TC3056 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list unset mid

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 unset param->count 

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 unset param->offset 

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http Response Code is 200

2.2-3.2 verify bid record format

[[ TC3057 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid = 'h×Ö'

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = 'h×Ö'

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset ='h×Ö'

 

Expected Results 

========== 

1-3. http response code is 400

[[ TC3058 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid 

 set param->count = 101

 set param->offset =0



2. query bid record list set mid

 set param->count = 50

 set param->offset =100001

  

Expected Results 

========== 

1-3. http response code is 400

[[ TC3059 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid =''

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = ''

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =''

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200

2.2-3.2 verify bid record

[[ TC3060 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid ='string'

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = 'string'

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset ='string'

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3061 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid =[12]

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = [12]

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =[12]

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3062 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid ={'a'=>123}

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = {'a'=>123}

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset ={'a'=>123}

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3063 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid =-1

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = -1

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =-1

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3064 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid =0

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = 0

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =0

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200

[[ TC3065 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid =null

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = null

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =null

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200

[[ TC3066 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid record list set mid ='!@#'

 set param->count =10

 set param->offset =0



2. query bid record list set mid

 set param->count = !@#

 set param->offset =0

 

3. query bid record list set mid

 set param->count =10

 set param->offset =!@#

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3067 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list unset mid

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 unset param->count 

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 unset param->offset 

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http Response Code is 200

2.2-3.2 verify bid record format

[[ TC3068 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid = 'h×Ö'

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = 'h×Ö'

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset ='h×Ö'

 

Expected Results 

========== 

1-3. http response code is 400

[[ TC3069 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid 

 set param->count = 101

 set param->offset =0



2. query bid log list set mid

 set param->count = 50

 set param->offset =100001

  

Expected Results 

========== 

1-3. http response code is 400

[[ TC3070 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid =''

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = ''

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =''

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200

2.2-3.2 verify bid record

[[ TC3071 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid ='string'

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = 'string'

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset ='string'

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3072 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid =[12]

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = [12]

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =[12]

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3073 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid ={'a'=>123}

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = {'a'=>123}

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset ={'a'=>123}

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3074 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid =-1

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = -1

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =-1

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3075 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid =0

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = 0

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =0

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200

[[ TC3076 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid =null

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = null

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =null

 

Expected Results 

========== 

1.1 http response code is 400

2.1-3.1 http response code is 200



[[ TC3077 ]]


========== 

A.

   1.submit a merchandise and shleve id and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_query_detail_bid_log_list/{mid}?{param}

   method GET



Testing Steps: 

==========

1. query bid log list set mid ='!@#'

 set param->count =10

 set param->offset =0



2. query bid log list set mid

 set param->count = !@#

 set param->offset =0

 

3. query bid log list set mid

 set param->count =10

 set param->offset =!@#

 

Expected Results 

========== 

1.1-3.1 http response code is 400

[[ TC3078 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response_data value

[[ TC3079 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record unset mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 unset request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 unset request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 unset request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

5. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 unset request_data->seller_id = 'seller_123'

 

Expected Results 

========== 

1.1-4.1 http response code is 400

5.1 http response code is 200

5.2 verify bid record status

[[ TC3080 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid='h×Ö'

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'h×Ö'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'h×Ö'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = h×Ö

 set request_data->seller_id = 'seller_123'

 

5. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'h×Ö'

 

Expected Results 

========== 

1.1-4.1 http response code is 400

5.1 http response code is 200

5.2 verify bid record status

[[ TC3081 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = 'aaa...'(129)

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'aaa...'(101)

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 3

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'aaa...'(129)



Expected Results 

========== 

1.1-4.1 http response code is 400

[[ TC3082 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = ''

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = ''

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = ''



Expected Results 

========== 

1.1-3.1 http response code is 400

4.1 http response code is 200

[[ TC3083 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = 'string'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'string'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = string

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'string'



Expected Results 

========== 

1.1-2.1/4.1 http response code is 200

3.1 http response code is 400

[[ TC3084 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = [12]

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = [12]

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = [12]

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = [12]



Expected Results 

========== 

1.1-4.1 http response code is 400

[[ TC3085 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = {'aaaa'}

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = {'aaaa'}

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = {123}

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = {'aaaa'}



Expected Results 

========== 

1.1-4.1 http response code is 400

[[ TC3086 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = -1

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = -1

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = -1

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = -1



Expected Results 

========== 

1.1-4.1 http response code is 400

[[ TC3087 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = 0

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 0

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 0

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 0



Expected Results 

========== 

1.1-4.1 http response code is 400

[[ TC3088 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = null

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = null

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = null

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = null



Expected Results 

========== 

1.1-3.1 http response code is 400

4.1 http response code is 200

[[ TC3089 ]]


========== 

A.

   1.submit a merchandise and shleve it and get mid

   2.place bid 

B.

   URI Syntax:/v1/egs/merchandise/bid_cancel_bid_record/?user_update=

   method GET



Testing Steps: 

==========

1. cancel bid record set mid

 set request_data->bidder_id = '!@#'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'



2. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = '!@#'

 set request_data->cancel_type = 1

 set request_data->seller_id = 'seller_123'

 

3. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = '!@#'

 set request_data->seller_id = 'seller_123'

 

4. cancel bid record set mid

 set request_data->bidder_id = 'bidder1'

 set request_data->cancel_remark = 'invalid'

 set request_data->cancel_type = 1

 set request_data->seller_id = '!@#'

 

Expected Results 

========== 

1.1-2.1/4.1 http response code is 200

3.1 http response code is 400

[[ TC3090 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 unset request_data->merchandise->bid->bid_item->total_quantity

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 unset request_data->merchandise->bid->bid_item->start_price 

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 unset request_data->merchandise->bid->bid_item->reserve_price

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 unset request_data->merchandise->bid->bid_item->buynow_price 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 unset request_data->merchandise->bid->bid_item->auto_extension 

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 unset request_data->merchandise->bid->bid_item->extension_count 

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 unset request_data->merchandise->bid->bid_item->close_early

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 unset request_data->merchandise->bid->bid_item->cust_fields 

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 unset request_data->merchandise->presale_shipping_type

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 unset request_data->merchandise->presale_shipping_afterdays



Expected Results 

========== 

1.1-2.1 http response code is 400

3.1-8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3091 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = h×Ó

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price ='h×Ó'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = 'h×Ó' 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = 'h×Ó' 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = h×Ó

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =h×Ó

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = h×Ó

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields ='h×Ó'

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  ='h×Ó'

 set request_data->merchandise->presale_shipping_afterdays =15

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =h×Ó



Expected Results 

========== 

1.1-7.1 http response code is 400

8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3092 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 2

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



 

2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price ='1234567890123.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '1234567890123.00' 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '1234567890123.00' 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 2

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =2147483648

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 2

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields ='aaaa...(257)'

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  ='afterddd'

 set request_data->merchandise->presale_shipping_afterdays =15

 

Expected Results 

========== 

1.1-9.1 http response code is 400

[[ TC3093 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = ''

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price =''

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '' 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '' 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = ''

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =''

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = ''

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields =''

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  =''

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =''



Expected Results 

========== 

1.1-7.1 http response code is 400

8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3094 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 'sss'

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



 

2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price ='sss'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = 'sss' 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = 'sss' 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 'sss'

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count ='sss'

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 'sss'

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields ='sss'

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  ='ssss'

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays ='sssss'



Expected Results 

========== 

1.1-7.1 http response code is 400

8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3095 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = [12]

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = [12]

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = [12] 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = [12] 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = [12] 

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =[12] 

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = [12] 

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields =[12] 

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  =[12] 

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =[12] 



Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3096 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = {123}

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = {123}

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = {123} 

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = {123} 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = {123}

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count ={123} 

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = {123}

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields ={123} 

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  ={123}

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays ={123} 



Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3097 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = -1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = -1

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = -1

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = -1 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = -1

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =-1 

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = -1

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields =-1

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  =-1

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =-1 



Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3098 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 0

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = 0

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = 0

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = 0 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =0

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields =0

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  =0

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =0 



Expected Results 

========== 

1.1-4.1/8.1-10.1 http response code is 400

5.1-7.1 http response code is 200

[[ TC3099 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = null

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = null

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = null

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = null 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = null

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =null

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = null

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields =null

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  =null

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =null 



Expected Results 

========== 

1.1-2.1 http response code is 400

3.1-8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3100 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/submit/?user_update=

   method: POST



Testing Steps: 

==========

1. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = !@#

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



2. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = !@#

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

3. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = !@#

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

4. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = !@# 

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

5. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = !@#

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

6. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count =!@#

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'

 

7. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = !@#

 set request_data->merchandise->bid->bid_item->cust_fields = 'invalid user'



8. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->bid->bid_item->reserve_price = '300.00'

 set request_data->merchandise->bid->bid_item->buynow_price = '100.00'

 set request_data->merchandise->bid->bid_item->auto_extension = 0

 set request_data->merchandise->bid->bid_item->extension_count = 5

 set request_data->merchandise->bid->bid_item->close_early = 0

 set request_data->merchandise->bid->bid_item->cust_fields ='!@#'

 

9. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type  ='!@#'

 set request_data->merchandise->presale_shipping_afterdays =15

 

10. submit bid merchandise with bid section parameters

 set request_data->merchandise->bid->bid_item->total_quantity = 1

 set request_data->merchandise->bid->bid_item->start_price = '30.00'

 set request_data->merchandise->presale_shipping_type ='afterdays'

 set request_data->merchandise->presale_shipping_afterdays =!@# 



Expected Results 

========== 

1.1-7.1 http response code is 400

8.1 http response code is 200

9.1-10.1 http response code is 400

[[ TC3101 ]]


========== 

A.

   URI Syntax: /v1/egs/merchandise/create_draft/?user_update=

   method: POST



Testing Steps: 

==========

1. create dratf basic merchandise 

 set request_data->merchandise_data->auto_shelve_type = 'timespan'

 set request_data->merchandise_data->duration_day = 2

 set request_data->merchandise_data->offshelve_tod = 10

 set request_data->merchandise_data->timezone = 'Asia/Taipei'

 set request_data->merchandise_data->auto_reshelve_allowed = 5

 set request_data->merchandise_data->timespan_shelve_time = time()



Expected Results 

========== 

1.1 http response code is 200

1.2 verify draft merchandise timespan_shelve_time field

[[ TC3102 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise with all parameters

   set request_data->merchandise_data->title = 'update bidding merchandise title'

   set request_data->merchandise_data->timespan_shelve_time = time()+1

   set request_data->merchandise_data->bid->bid_item->available_quantity=1

   set request_data->merchandise_data->bid->bid_item->start_price='10.00'

   set request_data->merchandise_data->bid->bid_item->reserve_price='300.00'

   set request_data->merchandise_data->bid->bid_item->buynow_price='100.00'

   set request_data->merchandise_data->bid->bid_item->auto_extension=1

   set request_data->merchandise_data->bid->bid_item->extension_count=5

   set request_data->merchandise_data->bid->bid_item->close_early=1

   set request_data->merchandise_data->bid->bid_item->cust_fields='any'



Expected Results 

========== 

1.1 http respons code is 200

1.2 verify response_data field values

[[ TC3103 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   unset request_data->merchandise_data->title 

2. update bidding merchandise

   without set request_data->merchandise_data->timespan_shelve_time 

3. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->available_quantity=1

4. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->start_price

5. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->reserve_price

6. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->buynow_price

7. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->auto_extension

8. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->extension_count

9. update bidding merchandise

   without set request_data->merchandise_data->bid->bid_item->close_early

10. update bidding merchandise   

   without set request_data->merchandise_data->bid->bid_item->cust_fields  

   

Expected Results 

========== 

1.1-10.1 http respons code is 200

1.2-10.2 verify response_data update field values

[[ TC3104 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title ='h×Ö' 

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=h×Ö

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=h×Ö

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price='h×Ö'

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price='h×Ö'

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price='h×Ö'

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=h×Ö

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=h×Ö

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=h×Ö

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields='h×Ö'

   

Expected Results 

========== 

1.1/10.1 http response code is 200

2.1-9.1 http response code is 400

[[ TC3105 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========



1. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=2

2. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price='1234567890123.00'

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price='1234567890123.00'

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price='1234567890123.00'

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=2

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=2147483648

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=2

8. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields='aaa...(257)'

   

Expected Results 

========== 

1.1-8.1 http response code is 400

[[ TC3106 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title ='' 

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price=''

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price=''

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price=''

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields=''

   

Expected Results 

========== 

1.1/10.1 http response code is 200

2.1-9.1 http response code is 400

[[ TC3107 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title ='string' 

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time='string'

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity='string'

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price='string'

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price='string'

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price='string'

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension='string'

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count='string'

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early='string'

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields='string'

   

Expected Results 

========== 

1.1/10.1 http response code is 200

2.1-9.1 http response code is 400

[[ TC3108 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title =[12] 

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=[12]

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=[12]

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price=[12]

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price=[12]

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price=[12]

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=[12]

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=[12]

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=[12]

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields=[12]

   

Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3109 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title ={'a'=>123} 

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time={'a'=>123} 

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity={'a'=>123} 

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price={'a'=>123} 

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price={'a'=>123} 

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price={'a'=>123} 

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension={'a'=>123} 

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count={'a'=>123} 

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early={'a'=>123} 

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields={'a'=>123} 

   

Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3110 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title =-1

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=-1

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=-1

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price=-1

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price=-1 

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price=-1

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=-1 

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=-1

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=-1

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields=-1

   

Expected Results 

========== 

1.1-10.1 http response code is 400

[[ TC3111 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title =0

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=0

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=0

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price=0

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price=0 

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price=0

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=0

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=0

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=0

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields=0

   

Expected Results 

========== 

1.1-6.1 http response code is 400

7.1-9.1 http response code is 200

10.1 http response code is 400

[[ TC3112 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title =null

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time=null

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity=null

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price=null

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price=null

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price=null

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension=null

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count=null

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early=null

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields=null

   

Expected Results 

========== 

1.1/3.1-4.1 http response code is 400

2.1/5.1-10.1 http response code is 200

[[ TC3113 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise

   set request_data->merchandise_data->title ='!@#'

2. update bidding merchandise

   set request_data->merchandise_data->timespan_shelve_time='!@#'

3. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->available_quantity='!@#'

4. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->start_price='!@#'

5. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->reserve_price='!@#'

6. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->buynow_price='!@#'

7. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->auto_extension='!@#'

8. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->extension_count='!@#'

9. update bidding merchandise

   set request_data->merchandise_data->bid->bid_item->close_early='!@#'

10. update bidding merchandise   

   set request_data->merchandise_data->bid->bid_item->cust_fields='!@#'

   

Expected Results 

========== 

1.1/10.1 http response code is 200

2.1-9.1 http response code is 400

[[ TC3114 ]]


========== 

A. Data: 1. submit a bidding merchandise and get mid

         2. shelve the bidding merchandise 

B.

   URI Syntax: /v1/egs/merchandise/update//?user_update=

   method: PUT



Testing Steps: 

==========

1. update bidding merchandise set mid='1234567'

  

Expected Results 

========== 

1.1 http respons code is 404

[[ TC3115 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step: 

1.submit a bid merchandise

2. cancel bid record with required parameters



Expected Result:

2. http response code 400

  verify response data

[[ TC3116 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 

Step: 

1.submit a bid merchandise and shelve

2. cancel bid record with required parameters



Expected Result:

2. http response code 500

 verify response data

[[ TC3117 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



  

Step: 

1.submit a bid merchandise and shelve and get mid and place bid

2.bid_qa_update close 

3. cancel bid record with required parameters



Expected Result:

3. http response code 200

  verify response data

[[ TC3118 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



   

Step:  

1.submit a bid merchandise and shelve and get mid and place bid

2.bid_qa_update close 

3. cancel bid record with required parameters two times



Expected Result:

3. http response code 400

    verify response data

[[ TC3119 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT





Step:

1.submit a bid merchandise and get mid and shelve and place bid

2.close the merhcandise two times



Expected Result:

1-2. http response code 400

    verify response data

[[ TC3120 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT





Step:

1.submit a bid merchandise and get mid and shelve

2.close the merhcandise 



Expected Result:

1-2. http response code 400

    verify response data

[[ TC3121 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT





Step:

1.submit a bid merchandise

2.close the bid merhcandise





Expected Result:

1. http response code 400

    verify response data

[[ TC3122 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" 

3. place bid 

4. close bid

5. Shelve merchandise again

6. get merchandise



Expected Result:

1.1-6.1 response code return 200

6.2 verify merchandise status is on

[[ TC3123 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]="timespan"

3. close bid

4. Shelve merchandise again

5. get merchandise



Expected Result:

1.1-5.1 response code return 200

5.2 verify merchandise status is on

[[ TC3124 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" 

3. place bid 

4. cancle bid item

5. Shelve merchandise again

6. get merchandise



Expected Result:

1.1-6.1 response code return 200

6.2 verify merchandise status is on

[[ TC3125 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" 

3. cancel bid item

4. Shelve merchandise again

5. get merchandise



Expected Result:

1.1-5.1 response code return 200

5.2 verify merchandise status is on

[[ TC3126 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. query bid record 



Expected Result:

1.1-2.1 response code return 200

2.2 verify response_data status and record count

[[ TC3127 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

  set request_data[auto_shelve_type]=""""timespan"""" 

3. place bid 

4. query bid record 



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data status and record count

[[ TC3128 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

  set request_data[auto_shelve_type]=""""timespan"""" 

3. place bid 

4. close bid item 

5. query bid record 



Expected Result:

1.1-5.1 response code return 200

4.4 verify bid item status is close

5.2 verify response_data status and record count

[[ TC3129 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

  set request_data[auto_shelve_type]="timespan"

3. place bid 

4. cancel bid item 

5. query bid record 



Expected Result:

1.1-5.1 response code return 200

4.4 verify bid item status is cancel

5.2 verify response_data status and record count

[[ TC3130 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Query bid log detail: (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/?



Step:

1. Submit a bid merchandise and get mid

2. query bid log detail 



Expected Result:

1.1-2.1 response code return 200

2.2 verify response_data status and log list count

[[ TC3131 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid log detail: (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/?



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

   set request_data[auto_shelve_type]="timespan"

3. place bid 

4. query bid log detail 



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data status and log list count

[[ TC3132 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

   set request_data[auto_shelve_type]="timespan"

3. place bid 

4. close bid item 

5. query bid log detail



Expected Result:

1.1-5.1 response code return 200

4.4 verify bid item status is close

5.2 verify response_data status and log list count

[[ TC3133 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Query bid record: (GET)/v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

   set request_data[auto_shelve_type]="timespan"

3. place bid 

4. close bid item 

5. query bid log detail



Expected Result:

1.1-5.1 response code return 200

4.4 verify bid item status is close

5.2 verify response_data status and log list count

[[ TC3134 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step:

 1.submit a bid merchandise and shelve

 2.place bid and set bid_type=3 and max_price>start_price



Expected Result:

2. http response code 200

   verify win_quantity and close status = 6

[[ TC3135 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step:

 1.submit a bid merchandise and shelve

 2.place bid and set bid_type=3 and max_prcie < start_price



Expected Result:

2. http response code 200

   verify responseData

[[ TC3136 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step:

 1.submit a bid merchandise and shelve

 2.place bid and set bid_type=2 and max_prcie < start_price

 3.bid_qa_update close

Expected Result:

2. http response code 200

   verify responseData

[[ TC3137 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step:

 1.submit a bid merchandise and shelve

 2.place bid and set bid_type=2

 3.bid_qa_update close

 4.cancel bid



Expected Result:

2. http response code 200

   verify responseData

[[ TC3138 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



Step:

 1.submit a bid merchandise and shelve

 2.place bid and set bid_type=1

 3.place bid and set bid_type=1



Expected Result:

2. http response code 200

   verify responseData

[[ TC3139 ]]


(close bid)Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT



Step:

1.submit a bid merchandise without close_early and shelve and place bid

2.close the bid merhcandise



Expected Result:

1. http response code 200

    verify response data status

[[ TC3140 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" 

3. Shelve merchandise again





Expected Result:

1.1-2.1 response code return 200

2.2 verify merchandise status is on

3.1 response code return 400

[[ TC3141 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step:

1. Submit a bid merchandise 

  set bid.close_early =1 and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" 

3. get bid merchandis and get bid_id as bid1

4. close bid merchandis

5. shelve bid merchandise again

6. get bid merchandise and get bid_id as bid2 



Expected Result:

1.1-6.1 response code return 200

4.2 verify merchandise status is close and bid_item status is close 

5.2 verify merchandise status is on and bid_item status is on 

6.2 verify bid2 not equal bid1

[[ TC3142 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. get merchandise with all parameters



Expected Result:

1.1-2.1 response code return 200

2.2 verify response_data->bidder_records and highest_bidder_list

[[ TC3143 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. user bidder2 place bid 

5. get merchandise with bidder_id='bidder1'

6. get merchandise with bidder_id='bidder2'

7. cancel bidder1 record

8. get merchandise with bidder_id='bidder1'



Expected Result:

1.1-8.1 response code return 200

5.2/6.2/8.2 verify response_data bidder_records

[[ TC3144 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. close bid merchandise

5. get merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data bidder_records and highest_bidder_list

[[ TC3145 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. cancel bid item and merchandise status is end

5. get merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data bidder_records and highest_bidder_list

[[ TC3146 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. user bidder2 place bid 

5. get merchandise with bidder_id='bidder1'

6. get merchandise with bidder_id='bidder2'



Expected Result:

1.1-8.1 response code return 200

5.2/6.2 verify response_data bidder_records

[[ TC3147 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise without record_id



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records and highest_bidder_list

[[ TC3148 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='h×Ö'



Expected Result:

1.1-3.1 response code return 200

4.1 response code retrun 400

[[ TC3149 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='9999999999999999'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3150 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=''



Expected Result:

1.1-4.1 response code return 400 (return 200 only when record_id has value)

4.2 verify response_data bidder_records and highest_bidder_list

[[ TC3151 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='string'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3152 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=[123，111]



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3153 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id={'a'=>123}



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3154 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=0



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records and highest_bidder_list

[[ TC3155 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=-1



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3156 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=null



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records and highest_bidder_list

[[ TC3157 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='!@#$'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3158 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. get detail merchandise with all parameters



Expected Result:

1.1-2.1 response code return 200

2.2 verify response_data->bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3159 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. user bidder2 place bid 

5. get detail merchandise with bidder_id='bidder1'

6. get detail merchandise with bidder_id='bidder2'

7. cancel bidder1 record

8. get detail merchandise with bidder_id='bidder1'



Expected Result:

1.1-8.1 response code return 200

5.2/6.2/8.2 verify response_data bidder_records，highest_bidder_list and descs，mass_cust_data

[[ TC3160 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. close bid merchandise

5. get detail merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3161 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. cancel bid item and merchandise status is end

5. get detail merchandise with all parameters



Expected Result:

1.1-5.1 response code return 200

5.2 verify response_data bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3162 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. user bidder2 place bid 

5. get detail merchandise with bidder_id='bidder1'

6. get detail merchandise with bidder_id='bidder2'



Expected Result:

1.1-8.1 response code return 200

5.2/6.2 verify response_data bidder_records  ，highest_bidder_list and descs，mass_cust_data

[[ TC3163 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get Details :(GET)/v1/egs/merchandise/get_details/mids



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. Get Details by mid



Expected Result:

1.1-3.1 response code return 200

4.1 http response code retrun 400

"



[[ TC3164 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get detail merchandise without record_id



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records ， highest_bidder_list，descs，mass_cust_data

[[ TC3165 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get detail merchandise set record_id='h×Ö'



Expected Result:

1.1-3.1 response code return 200

4.1 response code retrun 400

[[ TC3166 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='9999999999999999'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3167 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=''



Expected Result:

1.1-4.1 response code return 400(return 200 only when record_id has value)

4.2 verify response_data bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3168 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='string'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3169 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=[123，111]



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3170 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id={'a'=>123}



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3171 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=0



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3172 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=-1



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3173 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id=null



Expected Result:

1.1-4.1 response code return 200

4.2 verify response_data bidder_records ， highest_bidder_list and descs，mass_cust_data

[[ TC3174 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

place bid: (POST)/v1/egs/merchandise/bid_place/

Get bid merchandise:(GET)/v1/egs/merchandise/get_detail/?highest_bidders=&bidder_id=&max_bidders=&record_id=



Step:

1. Submit a bid merchandise and get mid

2. shelve bid merchandise

3. user bidder1 place bid 

4. get merchandise set record_id='!@#$'



Expected Result:

1.1-3.1 response code return 200

4.1 response code return 400

[[ TC3175 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 unset request_data->multi_cancel_by_cc_data->mid

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 unset request_data->multi_cancel_by_cc_data->cst_cancel_by

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 unset request_data->multi_cancel_by_cc_data->cst_cancel_remark

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3176 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid ="h×Ö"

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by ="h×Ö"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark ="h×Ö"

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3177 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid ="1234567890123"

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by ="aaaaa...(128)"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark ="aaaaa...(100)"

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1-6.1 http response code is 400

[[ TC3178 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid =""

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by =""

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark =""

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3179 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid ="string"

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by ="string"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark ="string"

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3180 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid ={"a"=>1233}

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by ={"a"=>1233}

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark ={"a"=>1233}

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1-6.1 http response code is 400

[[ TC3181 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid =[12]

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by =[12]

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark =[12]

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1-6.1 http response code is 400

[[ TC3182 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid =-1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by =-1

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark =-1

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1-6.1 http response code is 400



[[ TC3183 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid =0

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by =0

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark =0

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1-6.1 http response code is 400

[[ TC3184 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid =null

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by =null

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark =null

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3185 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve the bidding merchandise by mid1

3. place bid

4. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid ="!@#"

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

5. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by ="!@#"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark="cancel reason"

 

6. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = mid1

 set request_data->multi_cancel_by_cc_data->cst_cancel_by="cst5566_000000843724"

 set request_data->multi_cancel_by_cc_data->cst_cancel_remark ="!@#"

Expected Results 

========== 

1.1-3.1/5.1-6.1 http response code is 200

4.1 http response code is 400

5.2/6.2 verify detail_status=200 and verify response_data format

[[ TC3186 ]]


========== 

   URI Syntax:/v1/egs/merchandise/multi_cancel_by_cc/?user_update=

   method PUT



Testing Steps: 

==========



1. cancel by cc 

 set request_data->multi_cancel_by_cc_data->mid = '1234'



Expected Results 

========== 

1.1 http response code is 400

[[ TC3187 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  shelve(PUT) /v1/egs/merchandise/shelve/?user_update=

  createDraft(POST) /v1/egs/merchandise/create_draft/?user_update=

  update(PUT) /v1/egs/merchandise/update//?user_update=

  

Testing Steps: 

==========

1. create draft a basic merchandise get mid1

 set timespan_shelve_time = time()+5;

2. submit a bidding merchandise and get mid2

 set timespan_shelve_time = time()+10;

3. publish dratf the basic merchandise mid1

4. shelve mid1 and mid2 

5. cancel mid1 

6. close mid2

7. delete mid1 and mid2

 

Expected Results 

========== 

1.1-7.1 http response code is 200

1.2-7.2 verify status is right and verify timespan_shelve_time

[[ TC3188 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  shelve(PUT) /v1/egs/merchandise/shelve/?user_update=  

  

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1

 set timespan_shelve_time = time()+10;

 set auto_reshelve_allowed = 2

2. when mid is shelve close it 

3. close it again 

4. third close it 



Expected Results 

========== 

1.1-4.1 http response code is 200

2.2 veify merchandis status is 2 and auto_reshelve_count=1

3.2 veify merchandis status is 2 and auto_reshelve_count=2

4.2 veify merchandis status is 3 and auto_reshelve_count=2

[[ TC3189 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

      

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1

 set timespan_shelve_time = time()+10;

 set timezone = 'Asia/Taipei'

 

2. submit a bidding merchandise and get mid2

 set timespan_shelve_time = time()+10;

 set timezone = 'Asia/Beijing' 



Expected Results 

========== 

1.1-2.1 http response code is 200

1.2-2.2 when time is up，veify merchandise status is 2

[[ TC3190 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

      

Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

    set timespan_shelve_time = time()+10;

2. shelve it and close it 

3. after sleep 10s， get merchandise



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2  veify merchandise status is not 2

[[ TC3191 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

      

Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

    set timespan_shelve_time = time()+10;

2. delete it  

3. after sleep 10s， get merchandise



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2  veify merchandise status is delete

[[ TC3192 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

      

Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

    set timespan_shelve_time = time()+10;

2. cancel it  

3. after sleep 10s， get merchandise



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2  veify merchandise status is cancel

[[ TC3193 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

      

Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

    set timespan_shelve_time = time()+5;

2. update merchandise set  timespan_shelve_time = time()+10

3. after sleep 5s， get merchandise

4. after sleep 10s， get merchandise



Expected Results 

========== 

1.1-4.1 http response code is 200

3.2  veify merchandise status is new 

4.2  veify merchandise status is on

[[ TC3194 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  query bidder record list(GET) /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}    

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1  

2. shelve the bidding merchandise mid1

3. query bidder record list set search_type='lost' 



Expected Results 

========== 

1.1-2.1 http response code is 200

1.2-2.2 when time is up，veify merchandise status is 2

[[ TC3195 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  query bidder record list(GET) /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}    

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1  

2. shelve the bidding merchandise mid1

3. query bidder record list set search_type='won' 



Expected Results 

========== 

1.1-2.1 http response code is 200

1.2-2.2 when time is up，veify merchandise status is 2

[[ TC3196 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. shelve the bidding merchandise

2. update the bidding merchandise by mid

    set request->location='location-test'

3. update the bidding merchandise by mid  

   set request->location='location-test1111'



Expected Results 

========== 

1.1-3.1 http response 200

2.2-3.2 veriy response data location is rigth

[[ TC3197 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid   

2. update the bidding merchandise by mid

    set with all fields



Expected Results 

========== 

1.1-2.1 http response 200

2.2 veriy response data

[[ TC3198 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid

2. shelve it   

3. update the bidding merchandise by mid

    set with all fields



Expected Results 

========== 

1.1-3.1 http response 200

3.2 veriy response data

[[ TC3199 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid

2. shelve it and bidder1 place bid   

3. update the bidding merchandise by mid

    set with bid section fields 



Expected Results 

========== 

1.1-2.1 http response 200

3.1  http response 400

[[ TC3200 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid   

2. shelve it

3. cancel bid item

4. cancel bid item again



Expected Results 

========== 

1.1-3.1 http response 200

4.1 http response 400

3.2 veriy response data

[[ TC3201 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit 4 bidding merchandise get mid1/mid2/mid3

2. cancel bid item of mid1  

3. shelve mid1/mid2/mid3 

4. cancel bid item of mid1，status=3， cancel again

5. bidder1 place bid mid2

6. cancel bid item of mid2，status=6， cancel again

7. cancel mid3，status=4， cancel again

8. delete mid3，status=5， cancel mid3



Expected Results 

========== 

2.1/4.1/6.1/7.1/8.1 http code 400

[[ TC3202 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid   

2. shelve it

3. bidder1 place bid

4. cancel bid item



Expected Results 

========== 

1.1-3.1 http response 200

4.1 http response 400

[[ TC3203 ]]


========== 

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/update//?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. submit a bidding merchandise get mid   

2. cancel bid item 

    set seller_id='seller_asdfdf1234'



Expected Results 

========== 

1.1 http response 200

2.1 http response 400

[[ TC3204 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  query bidder record list(GET) /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}    

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1  

2. shelve the bidding merchandise mid1

3. query bidder record list set bidder_id='bidder_111' (the bidder no place bid record)



Expected Results 

========== 

1.1-2.1 http response code is 200

3.2 verify respnse_data->query_bidder_results list no record

[[ TC3205 ]]


========== 

   URI Syntax: 

  sbutmit(POST)  /v1/egs/merchandise/submit/?user_update=

  query bidder record list(GET) /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}    

Testing Steps: 

==========



1. submit a bidding merchandise and get mid1

2. query bidder1 record list  

3. shelve the bidding merchandise mid1 and bidder1 place bid

4. query bidder1 record list 

5. cancel bidder record 

6. query bidder1 record list

7. close bidding merchandise 

8. query bidder1 record list



Expected Results 

========== 

1.1-8.1 http response code is 200

2.2/4.2/6.2/8.2 verify query_bidder_results

[[ TC3206 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity='!@#$'

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price='!@#$'

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price='!@#$'

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price='!@#$'

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension='!@#$'

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early='!@#$' 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields='!@#$' 



 Expected Result:

   1.1-7.1 http response 400

[[ TC3207 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

  unset requset_data->merchandise_data->bid->bid_item->total_quantity  

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  unset requset_data->merchandise_data->bid->bid_item->start_price

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  unset requset_data->merchandise_data->bid->bid_item->reserve_price

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  unset requset_data->merchandise_data->bid->bid_item->buynow_price

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  unset requset_data->merchandise_data->bid->bid_item->auto_extension

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  unset requset_data->merchandise_data->bid->bid_item->close_early

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  unset requset_data->merchandise_data->bid->bid_item->cust_fields



 Expected Result:

   1.1-7.1 http response 200

[[ TC3208 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity='h'  

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price='h' 

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price='h' 

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price='h' 

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension='h' 

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early='h' 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields='h' 



 Expected Result:

   1.1-6.1 http response 400

   7.1 http response 200

[[ TC3209 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=2 

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price='1234567890.123' 

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price='1234567890.123'  

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price='1234567890.123'  

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=2

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early=2

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields='aaa...(258)' 



 Expected Result:

   1.1-7.1 http response 400



[[ TC3210 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=[123，11] 

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price=[123，11] 

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price=[123，11] 

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price=[123，11]  

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=[123，11] 

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early=[123，11] 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields=[123，11]  



 Expected Result:

   1.1-7.1 http response 400

[[ TC3211 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity={'a'=>123}

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price={'a'=>123}

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price={'a'=>123}

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price={'a'=>123} 

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension={'a'=>123}

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early={'a'=>123} 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields={'a'=>123} 



 Expected Result:

   1.1-7.1 http response 400



[[ TC3212 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=''

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price=''

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price=''

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price=''

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=''

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early='' 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields='' 



 Expected Result:

   1.1-7.1 http response 200

   1.2-7.2 verify default value

[[ TC3213 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=-1

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price=-1

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price=-1

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price=-1

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=-1

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early=-1 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields=-1 



 Expected Result:

   1.1-7.1 http response 400



[[ TC3214 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=0

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price=0

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price=0

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price=0

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=0

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early=0 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields=0 



 Expected Result:

   1.1-4.1/7.1 http response 400

   5.1-6.1 http response 200

[[ TC3215 ]]


 URI syntax: /v1/egs/merchandise/create_draft/?user_update=

 Request Method: POST 

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

   set requset_data->merchandise_data->bid->bid_item->total_quantity=null

 2.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->start_price=null

 3.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->reserve_price=null

 4.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->buynow_price=null

 5.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->auto_extension=null

 6.create draft merchandise set request ->merchandise_data->mtype='bid' 

  set requset_data->merchandise_data->bid->bid_item->close_early=null 

    7.create draft merchandise set request ->merchandise_data->mtype='bid'

  set requset_data->merchandise_data->bid->bid_item->cust_fields=null 



 Expected Result:

   1.1-7.1 http response 200

   1.2-7.2 verify default value

[[ TC3216 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  unset request_data->mer_data->bid->bid_item->total_quantity

    3.update draft merchandise

  unset request_data->mer_data->bid->bid_item->start_price

 4.update draft merchandise

  unset request_data->mer_data->bid->bid_item->reserve_price

 5.update draft merchandise

  unset request_data->mer_data->bid->bid_item->buynow_price

 6.update draft merchandise

  unset request_data->mer_data->bid->bid_item->auto_extension

 7.update draft merchandise

  unset request_data->mer_data->bid->bid_item->close_early

 8.update draft merchandise

  unset request_data->mer_data->bid->bid_item->cust_fields

 

Expected Result:

   1.1-8.1 http response 200

           veriy get new value

[[ TC3217 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity='h'

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price='h'

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price='h'

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price='h'

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension='h'

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early='h'

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields='h'

 

Expected Result:

   1.1-7.1 http response 400

   8.1 http response 200

       verify update new value

[[ TC3218 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=2

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price='123456789012.1234'

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price='123456789012.1234'

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price='123456789012.1234'

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=2 

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=2

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields='abc..(258)'

 

Expected Result:

   1.1-8.1 http response 400



[[ TC3219 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=""

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price=""

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price=""

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price=""

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=""

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=""

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields=""

 

Expected Result:

   1.1/3.1-5.1/8.1 http response 200

   2.1/6.1-7.1 http response 400

[[ TC3220 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity={'a'=>123}

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price={'a'=>123}

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price={'a'=>123}

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price={'a'=>123}

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension={'a'=>123}

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early={'a'=>123}

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields={'a'=>123}

 

Expected Result:

   1.1-8.1 http response 400



[[ TC3221 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=[12，34]

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price=[12，34]

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price=[12，34]

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price=[12，34]

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=[12，34]

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=[12，34]

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields=[12，34]

 

Expected Result:

   1.1-8.1 http response 400

[[ TC3222 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity='string'

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price='string'

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price='string'

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price='string'

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension='string'

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early='string'

 

Expected Result:

   1.1-7.1 http response 400

[[ TC3223 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=-1

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price=-1

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price=-1

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price=-1

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=-1

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=-1

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields=-1

 

Expected Result:

   1.1-8.1 http response 400

[[ TC3224 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=0

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price=0

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price=0

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price=0

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=0

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=0

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields=0

 

Expected Result:

   1.1-5.1/8.1 http response 400

   6.1-7.1 http response 200

[[ TC3225 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity=null

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price=null

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price=null

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price=null

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension=null

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early=null

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields=null

 

Expected Result:

   1.1-8.1 http response 200

[[ TC3226 ]]


 URI syntax:  /v1/egs/merchandise/publish_draft/?user_update=

 Request Method: PUT

 creat draft:(POST)/v1/egs/merchandise/create_draft/?user_update=

  

Step 

    1.create draft merchandise set request ->merchandise_data->mtype='bid'

 2.update draft merchandise

  set request_data->mer_data->bid->bid_item->total_quantity='!@#'

    3.update draft merchandise

  set request_data->mer_data->bid->bid_item->start_price='!@#'

 4.update draft merchandise

  set request_data->mer_data->bid->bid_item->reserve_price='!@#'

 5.update draft merchandise

  set request_data->mer_data->bid->bid_item->buynow_price='!@#'

 6.update draft merchandise

  set request_data->mer_data->bid->bid_item->auto_extension='!@#'

 7.update draft merchandise

  set request_data->mer_data->bid->bid_item->close_early='!@#'

 8.update draft merchandise

  set request_data->mer_data->bid->bid_item->cust_fields='!@#'

 

Expected Result:

   1.1-7.1 http response 400

   8.1 http response 200

[[ TC3227 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 

 4. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

 

Expected Result:

   1.1-3.1 http response 200

   4.1 http response 400

[[ TC3228 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 4. close bid item set end_time=time()-2*30*24*60*60

 5. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

 

Expected Result:

   1.1-4.1 http response 200

   5.1 http response 400

[[ TC3229 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1 and record2



 4. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

 

Expected Result:

   1.1-3.1 http response 200

   4.1 http response 400

[[ TC3230 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA place bid， record id is record1 and bidderA is winner

 3. bidderB place bid set current_price < reserve_price ，record id is record2

 4. cancel bidderA bid record1

 5. fill vacant winner position 

     set record_id=record2

  set win_quantity=1

 

Expected Result:

   1.1-4.1 http response 200

   5.1 http response 400

[[ TC3231 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 

 4. fill vacant winner position 

     set record_id=record2

  set win_quantity>available_quantity

 

Expected Result:

   1.1-3.1 http response 200

   4.1 http response 400



[[ TC3232 ]]


    URI syntax: /v1/egs/merchandise/v1/egs/merchandise/bid_fill_vacant_winner_position/

    Request Method: PUT

    

Step: 

    1. submit a bidding merchandise and shelve it

 2. bidderA and bidderB place bid， record id is record1 and record2，and bidderA is winner

 3. cancel bidderA bid record1

 

 4. fill vacant winner position 

     set record_id=record2

  set win_quantity>req_quantity

 

Expected Result:

   1.1-3.1 http response 200

   4.1 http response 400

[[ TC3233 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_place/

 2.Request Method: POST

 

Testing Steps: 

==========  

1. BidderA place bid   

   set request->merchandise->bid->place_bid_request->min_quantity= 1

   set request->merchandise->bid->place_bid_request->req_quantity= 2

   set request->merchandise->bid->place_bid_request->max_price= 100.00

   set request->merchandise->bid->place_bid_request->comments= 'test comments'

   set request->merchandise->bid->place_bid_request->bid_type=1



Expected Results 

========== 

1.1 verify http response 400

[[ TC3234 ]]


========== 

A.data

  1. submit a bidding merchandise and shelve it and get mid

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_place/

 2.Request Method: POST

 

Testing Steps: 

==========  

1. BidderA place bid   

   set request->merchandise->bid->place_bid_request->min_quantity= 3

   set request->merchandise->bid->place_bid_request->req_quantity= 2

   set request->merchandise->bid->place_bid_request->max_price= 100.00

   set request->merchandise->bid->place_bid_request->comments= 'test comments'

   set request->merchandise->bid->place_bid_request->bid_type=2



Expected Results 

========== 

1.1 verify http response 400

[[ TC3241 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3242 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid=''

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

[[ TC3243 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid='!@#$%^&*()_+{}:""|<>?/.，\';][=-`'

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

[[ TC3244 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid='xxx'(length=128)

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

[[ TC3245 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid=12345



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3246 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid=['12345']



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3247 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->sid={ 'sid': '12345'}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3248 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->email='nevec_user_1@yahoo.com.tw'

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as update

[[ TC3249 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='invalid parameter'

[[ TC3250 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='invalid parameter'

[[ TC3251 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='invalid parameter'

[[ TC3252 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'



2. http response code is 200

2. check data is the same as insert

[[ TC3253 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'



2. http response code is 200

2. check data is the same as insert

[[ TC3254 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=null



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3255 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''

3. GET /v1/eca/merchandise/get/{mid}





Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as update

[[ TC3256 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 200

[[ TC3257 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 200

2.2 check status code and correct

status->code=200

[[ TC3258 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3259 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3260 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr=''



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3261 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr={ ROOM_TYPE => '!@##$%^&*()_+{}:""|<>?/.，\';][=-`' }

3. GET /v1/eca/merchandise/get/{mid}





Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as update

[[ TC3262 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->cat_attr={ ROOM_TYPE => '!@##$%^&*()_+{}:""|<>?/.，\';][=-`' }

3. GET /v1/eca/merchandise/get/{mid}





Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as update

[[ TC3263 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": [""value1""， ""value2""]，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3264 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": 1，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3265 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": (value length > max length)，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

[[ TC3266 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": (value length < min length)，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='internal error'

[[ TC3267 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": [""values""]，

}

4. GET /v1/egs/merchandise/get/{mid}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check status code and correct

status->code=200

status->message='success'

4.1 http response code is 200

4.2 check status code and correct

status->code=200

status->message='success'

[[ TC3268 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""values""，

}

4. GET /v1/egs/merchandise/get/{mid}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check status code and correct

status->code=200

status->message='success'

4.1 http response code is 200

4.2 check status code and correct

status->code=200

status->message='success'



[[ TC3269 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": 1，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3270 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""xxx""(defined string)，

}

4. GET /v1/egs/merchandise/get/{mid}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check status code and correct

status->code=200

status->message='success'

4.1 http response code is 200

4.2 check status code and correct

status->code=200

status->message='success'

[[ TC3271 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""xxxx""(undefined string)，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='internal error'

[[ TC3272 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": 1，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 500

3.2 check status code and correct

status->code=400

[[ TC3273 ]]


2. POST  /v1/eca/merchandise/create_draft  

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

3. PUT /v1/egs/merchandise/update/{mid}

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""value1""，

}



Expected Result:

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 400

3.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3274 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success"

[[ TC3275 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->image_data = {

      profile: basic，

      src_urls: [http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg，

                         http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg

      ]

}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3276 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=0



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3277 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=1



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3278 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=2



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3279 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=3



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

2. http response 400

response json format

status->code=400

status->message="invalid parameter"





[[ TC3280 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=-1



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3281 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=1.2



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC3282 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=""abc""



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC3283 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

//request->price_type=2

request->price=10



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""



[[ TC3284 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=2

//request->price=10



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3285 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request->price_type=2

request->price=10

2. PUT /v1/egs/merchandise/update/{mid}

//request->price_type=2

request->price=20



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""



[[ TC3286 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request->price_type=2

request->price=10

2. PUT /v1/egs/merchandise/update/{mid}

request->price_type=1

//request->price=20



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2. http response 200

response json format

status->code=200

status->message=""success""



[[ TC3287 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->index_cust_data={""key1，key2"": ""value1""}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 400

2.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3288 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

2. PUT /v1/egs/merchandise/update/{mid}

request->index_cust_data={""key1"": ""value1""， ""key2"": ""value1， value2""}

3. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC3289 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

//request_data->latlong=''

request_data->title ='update title'

3. GET /v1/egs/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check status code and correct

status->code=200

status->message='success'

check merchandise data is correct

[[ TC3290 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='N60.123E90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3291 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='60.123;90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3292 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='N90;E90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3293 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='N90.000001;E90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3294 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='N90;E180'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3295 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='N90;E180.000001'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3296 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='A60.123;E90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3297 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='S60.123;A90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3298 ]]


request_data->latlong='N60.123;E90.123'

request_data->aid='jordan'

request_data->mtype='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->latlong='E60.123;N90.123'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='success'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'

[[ TC3299 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request_data->image_profile='basic'

2. PUT /v1/egs/merchandise/update/{mid}

request_data->image_profile='advance'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'



2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'



[[ TC3300 ]]


request_data->merchandise_data->duration_day = 0.01



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3301 ]]


request_data->merchandise_data->duration_day = 0



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3302 ]]


request_data->merchandise_data->duration_day = 1



2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC3303 ]]


request_data->merchandise_data->offshelve_tod = 0.01



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3304 ]]


request_data->merchandise_data->offshelve_tod = -1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3305 ]]


request_data->merchandise_data->offshelve_tod = 0



Expected Result:

1. http response 200

response json format

status->code=200

[[ TC3306 ]]


request_data->merchandise_data->offshelve_tod = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC3307 ]]


request_data->merchandise_data->timezone = Asia/Taipei1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3308 ]]


request_data->merchandise_data->timezone = Asia/Tokyo

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct

[[ TC3309 ]]


request_data->merchandise_data->timezone = ASIA/TAIPEI



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3310 ]]


request_data->merchandise_data->timezone = asia/taipei



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3311 ]]


request_data->merchandise_data->auto_reshelve_allowed = 0.01



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3312 ]]


request_data->merchandise_data->auto_reshelve_allowed = -1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3313 ]]


request_data->merchandise_data->auto_reshelve_allowed = -0.01



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3314 ]]


request_data->merchandise_data->auto_reshelve_allowed = 0

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct

[[ TC3315 ]]


//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

2. PUT /v1/egs/merchandise/update/{merchandise_id}

request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

3. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3316 ]]


//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

2. PUT /v1/egs/merchandise/update/{merchandise_id}

//request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

3. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3317 ]]


//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

2. PUT /v1/egs/merchandise/update/{merchandise_id}

//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

3. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3318 ]]


//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

2. PUT /v1/egs/merchandise/update/{merchandise_id}

//request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->total_reshelve_allowed = 1

3. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3319 ]]


request_data->merchandise_data->duration_day = -1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3320 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(null， 10)

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3321 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(''， 10)

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3322 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->title = 'update title'

UNSET request_data->merchandise_data->remind_notify_minute

PUT /v1/egs/merchandise/update/${mid}

3. GET /v1/egs/merchandise/get_detail/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

[[ TC3323 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('~!@#$%^&*()_+{}|"":<>?/.，\';][=-`'， 10)

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3324 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(5)

PUT /v1/egs/merchandise/update/${mid}

3. GET /v1/egs/merchandise/get_detail/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

[[ TC3325 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(4)

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3326 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = 10

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3327 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = '10'

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3328 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('10')

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3329 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('key' => 10)

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3330 ]]


1. SET request_data = optional_default()

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('key' => '10')

PUT /v1/egs/merchandise/update/${merchandise_id}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3331 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->price   = ""5.00""

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->price   = ""1234.ab""

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3332 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view   = 12345

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view = 2147483646

PUT /v1/egs/merchandise/update/${mid}

3. GET /v1/egs/merchandise/get_detail/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

[[ TC3333 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view   = 12345

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view = 299999999999999.01

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3334 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view   = 12345

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view = 0

PUT /v1/egs/merchandise/update/${mid}

3. GET /v1/egs/merchandise/get_detail/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

[[ TC3335 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view   = 12345

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view = -1

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3336 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view   = 12345

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view = 99999999999.99

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3337 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->nogroup =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->nogroup = 1， 0， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3338 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->nogroup =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->nogroup = null， ''， -1， 1.1， 0.1， true， false， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3339 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->verified_user =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->verified_user = 0， 1， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3340 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->verified_user =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->verified_user = null， ''， true， false， 2， 0.1， -1， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3341 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view_weekly = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3342 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->page_view_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->page_view_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3343 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->watchlist_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->watchlist_weekly = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3344 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->watchlist_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->watchlist_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3345 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->watchlist =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->watchlist = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3346 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->watchlist =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->watchlist = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3347 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->qna_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->qna_weekly = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3348 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->qna_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->qna_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3349 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->qna =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->qna = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3350 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->qna =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->qna = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3351 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->appointment_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->appointment_weekly = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3352 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->appointment_weekly =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->appointment_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3353 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->appointment =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->appointment = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3354 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->appointment =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->appointment = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3355 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->popularity =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->popularity = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3356 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->popularity =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->popularity = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3357 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data1 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data1 = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3358 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data1 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data1 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3359 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data2 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data2 = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3360 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data2 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data2 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC3361 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data3 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data3 = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3362 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data3 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data3 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'



[[ TC3363 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data4 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data4 = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3364 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data4 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data4 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'



[[ TC3365 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data5 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data5 = 0， 2147483646， '0'， '2147483646'， notincluded

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()



[[ TC3366 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->range_data5 =  1

POST /v1/egs/merchandise/create_draft

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->range_data5 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/update/${mid}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals status->message = 'success'

2. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'



[[ TC3367 ]]


1. SET request_data = required_default() 

encrypt every fields 

POST /v1/egs/merchandise/create_draft

SET mid = result_data->response_data->mid 

2. SET request_data->merchandise_data->email = unencrypted(email) 

PUT /v1/egs/merchandise/update/${mid} 

3. SET request_data->merchandise_data->phone = unencrypted(phone) 

PUT /v1/egs/merchandise/update/${mid} 

4. SET request_data->merchandise_data->ym = unencrypted(ym) 

PUT /v1/egs/merchandise/update/${mid} 



[Expected Result] 

1. assertEquals http 200 

verify response_message() 

2. assertEquals http 400 

verify error_message()

3. assertEquals http 400 

verify error_message() 

4. assertEquals http 400 

verify error_message()

[[ TC3368 ]]


1. SET request_data = required_default() 

encrypt every fields 

POST /v1/egs/merchandise/create_draft

SET mid = result_data->response_data->mid 

2. SET request_data->merchandise_data->email = unencrypted(email) 

PUT /v1/egs/merchandise/update/${mid} 

3. SET request_data->merchandise_data->phone = unencrypted(phone) 

PUT /v1/egs/merchandise/update/${mid} 

4. SET request_data->merchandise_data->ym = unencrypted(ym) 

PUT /v1/egs/merchandise/update/${mid} 



[Expected Result] 

1. assertEquals http 200 

verify response_message() 

2. assertEquals http 200 

verify response_message()

3. assertEquals http 200 

verify response_message()

4. assertEquals http 200 

verify response_message()

[[ TC3369 ]]


1. SET request_data = required_default() 

POST /v1/egs/merchandise/create_draft

SET mid = result_data->response_data->mid 

2. SET request_data->merchandise_data->email = encrypted(email) 

PUT /v1/egs/merchandise/update/${mid} 

3. SET request_data->merchandise_data->phone = encrypted(phone) 

PUT /v1/egs/merchandise/update/${mid} 

4. SET request_data->merchandise_data->ym = encrypted(ym) 

PUT /v1/egs/merchandise/update/${mid} 



[Expected Result] 

1. assertEquals http 200 

verify response_message() 

2. assertEquals http 400 

verify error_message()

3. assertEquals http 400 

verify error_message() 

4. assertEquals http 400 

verify error_message()

[[ TC3370 ]]


========== 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}

Update:/v1/egs/merchandise/update//?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Create Draft merchandise(POST) and get mid

SET request_data->cust_category=[""123""， ""456""， ""789""]

2. Update merchandise(PUT) by mid

SET request_data->cust_category=['102']

3. Get Merchandise(Get) by mid



Expected Results 

========== 

1 http response code is 200

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check response_data->merchandise_data->cust_category=['102']

[[ TC3371 ]]


========== 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}

Update:/v1/egs/merchandise/update//?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Create Draft merchandise(POST) and get mid

SET request_data->cust_category=[""123""]

2. Update merchandise(PUT) by mid

SET request_data->cust_category=['ÑÅ»¢']

3. Get Merchandise(Get) by mid



Expected Results 

========== 

1 http response code is 200

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check response_data->merchandise_data->cust_category==['ÑÅ»¢']

[[ TC3372 ]]


========== 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}

Update:/v1/egs/merchandise/update//?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Create Draft merchandise(POST) and get mid

SET request_data->cust_category=[""123""， ""456""， ""789""]

2. Update merchandise(PUT) by mid

SET request_data->cust_category=[]

3. Get Merchandise(Get) by mid



Expected Results 

========== 

1 http response code is 200

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='create draft ok'

3.1 http response code is 200

3.2 check response_data->merchandise_data->cust_category==[""123""， ""456""， ""789""]

[[ TC3373 ]]


========== 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}

Update:/v1/egs/merchandise/update//?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Create Draft merchandise(POST) and get mid

SET request_data->cust_category=[""123""， ""456""， ""789""]

2. Update merchandise(PUT) by mid

SET request_data->cust_category=['0']

3. Get Merchandise(Get) by mid



Expected Results 

========== 

1 http response code is 200

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='create draft ok'

3.1 http response code is 200

3.2 check response_data->merchandise_data->cust_category=['0']

[[ TC3374 ]]


========== 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}

Update:/v1/egs/merchandise/update//?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Create Draft merchandise(POST) and get mid

SET request_data->cust_category=[""123""， ""456""， ""789""]

2. Update merchandise(PUT) by mid

SET request_data->cust_category=['-1']

3. Get Merchandise(Get) by mid



Expected Results 

========== 

1 http response code is 200

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='create draft ok'

3.1 http response code is 200

3.2 check response_data->merchandise_data->cust_category=['-1']

[[ TC3385 ]]




request_data->sid=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid'



[[ TC3386 ]]




request_data->sid=''



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid'



[[ TC3387 ]]




request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid'



[[ TC3388 ]]




request_data->sid='!@##$%^&*()_+{}:"|<>?/.，\';][=-`'



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'





2. http response code is 200



2. check data is the same as insert



[[ TC3389 ]]




request_data->sid='xxx'(length=128)



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3390 ]]




request_data->sid=12345



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3391 ]]




request_data->sid=['aaa'， 'bbb']



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3392 ]]




request_data->sid={'aaa': '123'， 'bbb': '456'}



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3393 ]]




request_data->email='nevec_user_1@yahoo.com.tw'



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3394 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3395 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3396 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3397 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'





[[ TC3398 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3399 ]]




request_data->cat_attr=null



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3400 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3401 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3402 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3403 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3404 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400

status->message='invalid parameter'



[[ TC3405 ]]




request_data->cat_attr=''



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3406 ]]




request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3407 ]]




request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3408 ]]




request_data->cat_attr={ ROOM_TYPE => '!@##$%^&*()_+{}:"|<>?/.，\';][=-`' }



request_data->aid='jordan'



request_data->mtype='basic'

2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'



[[ TC3409 ]]




request_data->cat_attr={ ROOM_TYPE => '!@##$%^&*()_+{}:"|<>?/.，\';][=-`' }



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3410 ]]




2. POST */v1/eca/merchandise/create_draft 

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": ["value1"， "value2"]，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3411 ]]




2. POST */v1/eca/merchandise/create_draft

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": 1，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3412 ]]




2. POST */v1/eca/merchandise/create_draft



request->merchandise_data->cat_attr={



    "ROOM_TYPE": (value length > max length)，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3413 ]]




2. POST */v1/eca/merchandise/create_draft

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": (value length < min length)，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3414 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3415 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



    "ROOM_TYPE": ["values"]，



}









Expected Result:



1. http response 200



2. response json format



status->code=200



status->message="success"



[[ TC3416 ]]




2. POST */v1/eca/merchandise/create_draft

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": "values"，



}









Expected Result:



1. http response 200



2. response json format



status->code=200



status->message="success"



[[ TC3417 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



    "ROOM_TYPE": 1，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="parameter invalid"



[[ TC3418 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3419 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



    "ROOM_TYPE": "defined string"，



}









Expected Result:



1. http response 200



2. response json format



status->code=200



status->message="success"



[[ TC3420 ]]




2. POST */v1/eca/merchandise/create_draft

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": "undefined string"，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="parameter invalid"



[[ TC3421 ]]




2. POST */v1/eca/merchandise/create_draft 

 

request->merchandise_data->cat_attr={



    "ROOM_TYPE": 1，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3422 ]]




2. POST */v1/eca/merchandise/create_draft

  

request->merchandise_data->cat_attr={



    "ROOM_TYPE": "value1"，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3423 ]]




2. POST */v1/eca/merchandise/create_draft 

 

request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3424 ]]




2. POST */v1/eca/merchandise/create_draft

 

//request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



//}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3425 ]]




2. POST */v1/eca/merchandise/create_draft

  

//request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



//}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3426 ]]




2. POST */v1/eca/merchandise/create_draft

 

//request->merchandise_data->cat_attr={



//    "ROOM_TYPE": 'three'，



//}









Expected Result:



1. http response 400



2. response json format



status->code=400



status->message="invalid parameter"



[[ TC3427 ]]




request->image_data = {



      profile: basic，



      src_urls: [http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg，



                         http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg



      ]



}







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3428 ]]




request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3429 ]]




request->price_type=1







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3430 ]]




request->price_type=2







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3431 ]]




request->price_type=3







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3432 ]]




request->price_type=-1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3433 ]]




request->price_type=1.2







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3434 ]]




request->price_type="2"







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3435 ]]




request->price=1000



//request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3436 ]]




//request->price=1000



request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3437 ]]




//request->price=1000



//request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3438 ]]




request->price=1000



request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message="success"



[[ TC3439 ]]




request->index_cust_data={ "key1，key2": "value1"}







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3440 ]]




request->index_cust_data={ "key1": "value1， value2"}



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message="success"



2.1 http response 200



2.2 response json format



status->code=200



status->message="success"



merchandise data is correct



[[ TC3441 ]]




request_data->latlong='N60.123E90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3442 ]]




request_data->latlong='60.123;90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400

status->message='invalid parameter'



[[ TC3443 ]]




request_data->latlong='N90;E90.123'



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3444 ]]




request_data->latlong='N90.000001;E90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3445 ]]




request_data->latlong='N90;E180'



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3446 ]]




request_data->latlong='N90;E180.000001'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3447 ]]




request_data->latlong='N60.123456;E90.123456'



request_data->aid='jordan'



request_data->mtype='basic'



2. GET /v1/eca/merchandise/get/{mid}







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2. http response code is 200



2. check data is the same as insert



[[ TC3448 ]]




request_data->latlong='N60.1234567;E90.1234567'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3449 ]]




request_data->latlong='A60.123;E90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3450 ]]




request_data->latlong='N60.123;A90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3451 ]]




request_data->latlong='E60.123;N90.123'



request_data->aid='jordan'



request_data->mtype='basic'







Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC3452 ]]




request_data->merchandise_data->image_profile='notexist'



request_data->merchandise_data->aid='jordan'



request_data->merchandise_data->mtype='basic'







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3453 ]]




request_data->merchandise_data->duration_day = 0.01



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3454 ]]




request_data->merchandise_data->duration_day = 0



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3455 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message="success"



2.1 http response 200



2.2 response json format



status->code=200



status->message="success"



data is correct



[[ TC3456 ]]




request_data->merchandise_data->offshelve_tod = 0.01



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3457 ]]




request_data->merchandise_data->offshelve_tod = -1



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3458 ]]




request_data->merchandise_data->offshelve_tod = 0



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3459 ]]




request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message="success"



2.1 http response 200



2.2 response json format



status->code=200



status->message="success"



data is correct



[[ TC3460 ]]




request_data->merchandise_data->duration_day = 0



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei1



request_data->merchandise_data->total_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3461 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->total_reshelve_allowed = 1



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message="success"



2.1 http response 200



2.2 response json format



status->code=200



status->message="success"



data is correct



[[ TC3462 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = ASIA/TAIPEI



request_data->merchandise_data->total_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3463 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = asia/taipei



request_data->merchandise_data->total_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3464 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 0.01







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3465 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 0







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3466 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message="success"



2.1 http response 200



2.2 response json format



status->code=200



status->message="success"



data is correct



[[ TC3467 ]]




request_data->merchandise_data->duration_day = -1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3468 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = -1







Expected Result:



1. http response 400



response json format



status->code=400



status->message="invalid parameter"



[[ TC3469 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(null， 10)



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3470 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(''， 10)



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3471 ]]




1. SET request_data = optional_default()



UNSET request_data->merchandise_data->remind_notify_minute



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3472 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('~!@#$%^&*()_+{}|":<>?/.，\';][=-`'， 10)



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3473 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(5)



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3474 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(4)



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3475 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = 10



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3476 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = '10'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3477 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('10')



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3478 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('key' => 10)



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3479 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('key' => '10')



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message() 



[[ TC3480 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->price = "1234.ab"



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 verify error_message()



[[ TC3481 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 2147483646



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3482 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 2147483646.01



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid length'



[[ TC3483 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 0



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3484 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = -1



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid length'



[[ TC3485 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 1000.01



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3486 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 65536



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3487 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->nogroup = 1， 0， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3488 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->nogroup = null， ''， -1， 1.1， 0.1， true， false， array(true)， array('key' => true)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3489 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->verified_user = 0， 1， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3490 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->verified_user = null， ''，true， false， 2， 0.1， -1， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3491 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3492 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3493 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3494 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3495 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3496 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3497 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3498 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3499 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3500 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3501 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3502 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3503 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3504 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment = null， ''， 0.1， -1， 2147483647，  array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3505 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->popularity = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3506 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->popularity = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3507 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data1 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3508 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data1 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3509 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data2 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3510 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data2 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3511 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data3 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3512 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data3 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3513 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data4 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3514 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data4 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400





 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3515 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data5 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3516 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data5 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3517 ]]




1. SET request_data = required_default()



set aid without encrypting



set email without encrypting



set phone without encrypting



set ym without encrypting



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC3518 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



verify response_message()



[[ TC3519 ]]




1. SET request_data = required_default()



set aid with encrypting



set email with encrypting



set phone with encrypting



set ym with encrypting



POST /v1/egs/merchandise/create_draft







[Expected Result]



1. assertEquals http 200



verify response_message()



[[ TC3520 ]]




1. POST /v1/egs/merchandise/create_draft/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC3521 ]]




1. POST /v1/egs/merchandise/create_draft/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=1



[[ TC3522 ]]




1. POST /v1/egs/merchandise/create_draft/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC3523 ]]


 

==========

 

A:data



  1. Create 3 products(Post) with required parameters



  2. Publish 3 products(Put) with required parameters



  3. get the 3 product's id productId1，productId2，productId3



B:syntax



   URI: /v1/egs/merchandise/create_draft/?user_update={0，1}



   Method:POST







Testing Steps:

 

==========



1 Create merchandise with required parameters



   set poroduct_ids=[productId1，productId2，productId3]



2. Get merchandise details by mid







Expected Results

 

==========

 

1. http Response Code is 200



2.Status code is 200



3. status->message="create draft ok"



5.verify Json schema



4. Verify the product_ids are correct



[[ TC3524 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1-5



cust_field1-5



3. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message="create draft ok"



4.Get index_cust_field1-5 = Insert index_cust_field1-5 and cust_field1-5=insert cust_field1-5



5.verify Json schema



[[ TC3525 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field3="iphone 5"

2. Search this merchandise by search require parameters+index_cust_field1="iphone 5"







Expected Results ==========



verify the merchandise can be searched



[[ TC3526 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1-5=""



cust_field1-5=""



2. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message="create draft ok"



4.Get index_cust_field1-5 = "" and cust_field1-5=""



5.verify Json schema



[[ TC3528 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1-5="??"



cust_field1-5="??"



2. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message="create draft ok"



4.Get index_cust_field1-5 = "??" and cust_field1-5="??"



5.verify Json schema



[[ TC3529 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1-5="!@#"



cust_field1-5="!@3"



2. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message="create draft ok"



4.Get index_cust_field1-5 = "!@#" and cust_field1-5="!@3"



5.verify Json schema



[[ TC3530 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1="{"a":"1"，"b":"2"}"



2. Create draft merchandise(Post) with required parameters+



index_cust_field2="{"a":"1"，"b":"2"}"



3. Create draft merchandise(Post) with required parameters+



index_cust_field3="{"a":"1"，"b":"2"}"



4. Create draft merchandise(Post) with required parameters+



index_cust_field4="{"a":"1"，"b":"2"}"



5. Create draft merchandise(Post) with required parameters+



index_cust_field5="{"a":"1"，"b":"2"}"



6. Create draft merchandise(Post) with required parameters+



cust_field1="{"a":"1"，"b":"2"}"



7. Create draft merchandise(Post) with required parameters+



cust_field2="{"a":"1"，"b":"2"}"



8. Create draft merchandise(Post) with required parameters+



cust_field3="{"a":"1"，"b":"2"}"



9. Create draft merchandise(Post) with required parameters+



cust_field4="{"a":"1"，"b":"2"}"



10. Create draft merchandise(Post) with required parameters+



cust_field5="{"a":"1"，"b":"2"}"







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC3531 ]]




==========

URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1="[12]"



2. Create draft merchandise(Post) with required parameters+



index_cust_field2="[12]"



3. Create draft merchandise(Post) with required parameters+



index_cust_field3="[12]"



4. Create draft merchandise(Post) with required parameters+



index_cust_field4="[12]"



5. Create draft merchandise(Post) with required parameters+



index_cust_field5="[12]"



6. Create draft merchandise(Post) with required parameters+



cust_field1="[12]"



7. Create draft merchandise(Post) with required parameters+



cust_field2="[12]"



8. Create draft merchandise(Post) with required parameters+



cust_field3="[12]"



9. Create draft merchandise(Post) with required parameters+



cust_field4="[12]"



10. Create draft merchandise(Post) with required parameters+



cust_field5="[12]"







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC3532 ]]




==========



URI Syntax: /v1/egs/merchandise/create_draft/?user_update={0，1}







Testing Steps:



==========



1. Create draft merchandise(Post) with required parameters+



index_cust_field1=var(1025)



2. Create draft merchandise(Post) with required parameters+



index_cust_field2=var(1025)



3. Create draft merchandise(Post) with required parameters+



index_cust_field3=var(1025)



4. Create draft merchandise(Post) with required parameters+



index_cust_field4=var(1025)



5. Create draft merchandise(Post) with required parameters+



index_cust_field5=var(1025)



6. Create draft merchandise(Post) with required parameters+



cust_field1=var(1025)



7. Create draft merchandise(Post) with required parameters+



cust_field2=var(1025)



8. Create draft merchandise(Post) with required parameters+



cust_field3=var(1025)



9. Create draft merchandise(Post) with required parameters+



cust_field4=var(1025)



10. Create draft merchandise(Post) with required parameters+



cust_field5=var(1025)







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC3533 ]]


 

==========

 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:



==========

 

Step:

 

1. Create Draft merchandise(POST) and get mid



    SET request_data->cust_category = [000]



2. Get Merchandise(Get) by mid







Expected Results

 

=========



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2.1 http response code is 200



2.2 check response_data->merchandise_data->cust_category =["??"，"??"]



[[ TC3534 ]]


 

==========



URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:

 

==========

 

Step:

  

1. Create Draft merchandise(POST) and get mid



    SET request_data->cust_category = []



2. Get Merchandise(Get) by mid







Expected Results

 

==========



1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2.1 http response code is 200



2.2 check response_data->merchandise_data->cust_category = null



[[ TC3535 ]]


 

========== 



URI Syntax:

  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:

 

==========

 

Step:



1. Create Draft merchandise(POST) and get mid



    SET request_data->cust_category = '1234'







Expected Results



==========

 

1.1 http response code is 400



1.2 check status code and correct



status->code=1



status->message='request is not array'



[[ TC3536 ]]


 

==========

 

URI Syntax:

  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:

 

==========



Step:

  

1. Create Draft merchandise(POST) and get mid



    SET request_data->cust_category = ['0']



2. Get Merchandise(Get) by mid







Expected Results

 

==========

 

1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2.1 http response code is 200



2.2 check response_data->merchandise_data->cust_category = ['0']



[[ TC3537 ]]


 

==========

 

URI Syntax:  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}



Get:  /v1/egs/merchandise/get/







Testing Steps:

 

==========

 

Step:

  

1. Create Draft merchandise(POST) and get mid



    SET request_data->cust_category = ['-1']



2. Get Merchandise(Get) by mid







Expected Results

 

==========

 

1.1 http response code is 200



1.2 check status code and correct



status->code=200



status->message='create draft ok'







2.1 http response code is 200



2.2 check response_data->merchandise_data->cust_category = ['-1']



[[ TC3538 ]]


  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}







Step:

 



1.  create draft merchandise(POST) and get mid



    set duration_day=""



    set offshelve_tod=""



    set  timezone=""



    set auto_reshelve_allowed =""







Expected Result:



1. response return success 200



[[ TC3539 ]]


  

Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1}







Step:

 



1.  create draft merchandise(POST) and get mid



    set duration_day=null



    set offshelve_tod=null



    set  timezone=null



    set auto_reshelve_allowed =null







 



Expected Result:



1. response return success 200



[[ TC3542 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=1

 and set fee_code_qty={fee_code}，{qty} (fee_code not exist)

 

2. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=1

 and set fee_code_qty={fee_code}，{qty} (fee_code not node's fee code)

 

Expected Result:

1.1-2.1 http response code is 200

1.2-2.2 check status code and correct

   



[[ TC3543 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=0

 and set fee_code_qty={fee_code}，{qty} (fee_code not exist)

 

2. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=0

 and set fee_code_qty={fee_code}，{qty} (fee_code not node's fee code)

 

Expected Result:

1.1-2.1 http response code is 404

[[ TC3544 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=漢

 and set fee_code_qty={fee_code}，{qty} 

 

Expected Result:

1.1 http response code is 400

[[ TC3545 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=2

 and set fee_code_qty={fee_code}，{qty} 

 

Expected Result:

1.1 http response code is 400

[[ TC3546 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=''

 and set fee_code_qty={fee_code}，{qty} 

 

Expected Result:

1.1 http response code is 400

[[ TC3547 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found='string'

 and set fee_code_qty={fee_code}，{qty} 

 

Expected Result:

1.1 http response code is 400

[[ TC3548 ]]


=========

URL: /v1/egs/category_pricing/batch_query_price/{tree_id}/{cat_id}/?timeframe={timeframe}&amp;fee_code_qty={fee_code}，{qty}&amp;fee_code_qty={fee_code}，{qty}&amp;user_id={user_id}&amp;ignore_fee_code_not_found=1，0

Method: GET



1. prepare tree and node

2. prepare pricing rule for node



Step: 

1. batch_query_price 

 set {tree_id}/{cat_id}/?timeframe={timeframe} 

 and set ignore_fee_code_not_found=!@

 and set fee_code_qty={fee_code}，{qty} 

 

Expected Result:

1.1 http response code is 400

[[ TC3623 ]]


1. Purge merchanidse

   UNSET merchandise_id



Expected Result:

1. http code 400



[[ TC3624 ]]


1. Purge merchanidse

   SET merchandise_id = 126_900000001



Expected Result:

1， http code 404

[[ TC3625 ]]


1. Insert merchandise，get merchandise_id mid

2. Purge merchanidse

   SET merchandise_id = mid

3. Purge merchanidse

   SET merchandise_id = mid



Expected Result:

1， http code 200

1， http code 404

[[ TC3626 ]]


1. Get merchanidse

   UNSET merchandise_id



Expected Result:

1， http code 400

[[ TC3627 ]]


1. GET merchanidse

   SET merchandise_id = 126_900000001



Expected Result:

1， http code 404

[[ TC3628 ]]


1. Insert merchandise，get merchandise_id mid

2. Insert merchandise，get merchandise_id mid

3. GET  merchanidse

   SET merchandise_id = mid



Expected Result:

1， http code 200

2. verify response data is same as insert data

[[ TC3629 ]]


1. Get merchanidse detail

   UNSET merchandise_id



Expected Result:

1， http code 400

[[ TC3630 ]]


1. GET merchanidse detail

   SET merchandise_id = 126_900000001



Expected Result:

1， http code 404

[[ TC3631 ]]


1. Insert merchandise，get merchandise_id mid

2. Insert merchandise，get merchandise_id mid

3. GET  merchanidse detail

   SET merchandise_id = mid



Expected Result:

1， http code 200

2. verify response data is same as insert data

[[ TC3632 ]]


1. Submit merchandise，get merchandise_id mid

2. close merchanidse

   UNSET merchandise_id



Expected Result:

1， http code 400

[[ TC3633 ]]


1. Submit merchandise，get merchandise_id mid

2. close merchanidse

   UNSET merchandise_id = 'notexist'



Expected Result:

1， http code 404

[[ TC3634 ]]


1. Submit merchandise，get merchandise_id mid

2. Cancel merchanidse

   UNSET merchandise_id



Expected Result:

1， http code 400

[[ TC3635 ]]


1. Submit merchandise，get merchandise_id mid

2. Cancel merchanidse

    merchandise_id = 'notexist'



Expected Result:

1， http code 404

[[ TC3636 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1150

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->total_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 10

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}

3. GET /v1/egs/merchandise/cancel/${mid}

4. GET /v1/eca/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

4. assertEquals http 200

verify remind_close_notify_scheduler_event()

[[ TC3637 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1250

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->total_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 10

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}

3. GET /v1/egs/merchandise/cancel/${mid}

4. GET /v1/eca/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

4. assertEquals http 200

verify remind_close_notify_scheduler_event()

[[ TC3638 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1150

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->total_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 10

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}

Wait for reshelve one time

3. GET /v1/egs/merchandise/cancel/${mid}

4. GET /v1/eca/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

4. assertEquals http 200

verify remind_close_notify_scheduler_event()



[[ TC3639 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1250

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->total_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 10

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}

Wait for reshelve one time

3. GET /v1/egs/merchandise/cancel/${mid}

4. GET /v1/eca/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 200

verify response_message()

4. assertEquals http 200

verify remind_close_notify_scheduler_event()



[[ TC3640 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

PUT /v1/egs/merchandise/delete/null



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3641 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data-&gt;response_data-&gt;mid

PUT /v1/egs/merchandise/delete/



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3642 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

PUT /v1/egs/merchandise/delete/notexist



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 404

verify error_message()



[[ TC3643 ]]


1. submit 50 merchandises

2. delete 50 merchandise



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

50 merchandise status is delete

[[ TC3644 ]]


1. submit 51 merchandises

2. delete 51 merchandise



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3645 ]]


1. submit 50 merchandises

2. delete 50 merchandises， 10 merchandise are not exist.



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

total: 50

success: 40

[[ TC3646 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

PUT /v1/egs/merchandise/close/null



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()



[[ TC3647 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

PUT /v1/egs/merchandise/close/



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()



[[ TC3648 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

PUT /v1/egs/merchandise/close/notexist



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 404

verify error_message()



[[ TC3649 ]]


1. submit 50 merchandises

2. close 50 merchandise



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

50 merchandise status is close

[[ TC3650 ]]


1. submit 51 merchandises

2. close 51 merchandise



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3651 ]]


1. submit 50 merchandises

2. close 50 merchandises， 10 merchandise are not exist.



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

total: 50

success: 40

[[ TC3652 ]]


1. submit 1 merchandises

2. delete 1 mechandsie

3. delete 2 merchandise



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3. assertEquals http 400

verify error_message()

[[ TC3653 ]]


1. SET request_data = required_default

SET request_data->ccode = null

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3654 ]]


1. SET request_data = required_default

SET request_data->ccode = ''

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3655 ]]


1. SET request_data = required_default

UNSET request_data->ccode

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3656 ]]


1. SET request_data = required_default

SET request_data->ccode = 'notexist'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3657 ]]


1. SET request_data = required_default

SET request_data->ccode = 'TWN'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3658 ]]


1. SET request_data = required_default

SET request_data->ccode = 12345

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3659 ]]


1. SET request_data = required_default

SET request_data->ccode = 'tw'

PUT /v1/egs/merchandise/mass_cancel

2. SET batch_id = result_data->response_data->batch_id

GET /v1/egs/batch/query_summary/${batch_id}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

2. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals response_data->batch_summary->ccode = request_data->ccode

 assertEquals response_data->batch_summary->property = request_data->property

 assertEquals response_data->batch_summary->status = 0

 assertEquals response_data->batch_summary->total_cnt = count(request_data->mass_data)

 assertEquals response_data->batch_summary->create_time < Now + 5

[[ TC3660 ]]


1. SET request_data = required_default

SET request_data->ccode = array('tw'， 'us')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3661 ]]


1. SET request_data = required_default

SET request_data->ccode = array('ccode1' => 'tw'， 'ccode2' => 'us')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3662 ]]


1. SET request_data = required_default

SET request_data->property = null

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3663 ]]


1. SET request_data = required_default

SET request_data->property = ''

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3664 ]]


1. SET request_data = required_default

UNSET request_data->property

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3665 ]]


1. SET request_data = required_default

SET request_data->property = 'notexist'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 404

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'not found'

[[ TC3666 ]]


1. SET request_data = required_default

SET request_data->property = '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 404

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'not found'

[[ TC3667 ]]


1. SET request_data = required_default

SET request_data->property = random_string(21)

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3668 ]]


1. SET request_data = required_default

SET request_data->property = 12345

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3669 ]]


1. SET request_data = required_default

SET request_data->property = 'auction'

PUT /v1/egs/merchandise/mass_cancel

2. SET batch_id = result_data->response_data->batch_id

GET /v1/egs/batch/query_summary/${batch_id}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

2. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals response_data->batch_summary->ccode = request_data->ccode

 assertEquals response_data->batch_summary->property = request_data->property

 assertEquals response_data->batch_summary->status = 0

 assertEquals response_data->batch_summary->total_cnt = count(request_data->mass_data)

 assertEquals response_data->batch_summary->create_time < Now + 5

[[ TC3670 ]]


1. SET request_data = required_default

SET request_data->property = array('tw'， 'us')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3671 ]]


1. SET request_data = required_default

SET request_data->property = array('ccode1' => 'tw'， 'ccode2' => 'us')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3672 ]]


1. SET request_data = required_default

UNSET request_data->mass_data

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3673 ]]


1. SET request_data = required_default

SET request_data->mass_data = 12345

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3674 ]]


1. SET request_data = required_default

SET request_data->mass_data = '{{""sid1"" => ""test sid1""}， {""sid2"" => ""test sid2""}}'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3675 ]]


1. SET request_data = required_default

SET request_data->mass_data = array('{{""sid1"" => ""test sid1""}， {""sid2"" => ""test sid2""}}'，  '{{""sid1"" => ""test sid1""}， {""sid2"" => ""test sid2""}}')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3676 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = null

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3677 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = ''

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3678 ]]


1. SET request_data = required_default

UNSET request_data->mass_data->merchandise_data->mid

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-007'

 assertEquals status->error_list->ccode->message = 'miss required'

[[ TC3679 ]]


1. SET request_data = required_default

SET request_data-&gt;mass_data-&gt;merchandise_data-&gt;mid='notexist'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 200



[[ TC3680 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 404

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-007'

 assertEquals status->error_list->ccode->message = 'not found'

[[ TC3681 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = 12345

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3682 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = 'test sid'

PUT /v1/egs/merchandise/mass_cancel

2. SET batch_id = result_data->response_data->batch_id

GET /v1/egs/batch/query_summary/${batch_id}



[Expected Result]

1. assertEquals http 200

 assertEquals status->code = '200'

2. assertEquals http 200

 assertEquals status->code = '200'

 assertEquals response_data->batch_summary->ccode = request_data->ccode

 assertEquals response_data->batch_summary->property = request_data->property

 assertEquals response_data->batch_summary->status = 0

 assertEquals response_data->batch_summary->total_cnt = count(request_data->mass_data)

 assertEquals response_data->batch_summary->create_time < Now + 5

[[ TC3683 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = array('test sid1'， 'test sid2')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3684 ]]


1. SET request_data = required_default

SET request_data->mass_data->merchandise_data->mid = array('sid1' => 'test sid1'， 'sid2' => 'test sid2')

PUT /v1/egs/merchandise/mass_cancel



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->system = 'batch'

 assertEquals status->error_list->ccode->code = '10-008'

 assertEquals status->error_list->ccode->message = 'invalid format'

[[ TC3685 ]]


1. SET request_data = required_default()+image_data(imageA)

 POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

 SET image_data = imageB

 /v1/egs/merchandise/update/{mid}

3.Delay 5 min

4. GET /v1/egs/merchandise/get/mid



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

4.assertEquals http 200

assertEquals response_data->merchandise_data->status=5

assertNotExist response_data->image_data->imageA

assertEchos response_data->image_data =imageB

[[ TC3686 ]]


1. SET request_data = required_default()+image_data()

 POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

 PUT /v1/egs/merchandise/delete/mid

3. SET mid = result_data->response_data->mid

 Purge /v1/egs/merchandise/purge/{mid}

4. GET /v1/egs/merchandise/get/mid



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

3.assertEquals http 200

4. assertEquals http 404

assertEquals response_data->merchandise_data->status=5

assertNotExist response_data->image_data



[[ TC3687 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 3 Merchandises(POST) with product id£¨with sid and sid1£© and Get mid(mid1，mid2，mid3) from ResponseData

2.Get Merchandise Details(GET) by mids

   ids=mid1，mid2，mid3

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[0]->detail_response_data = mid1 create data

   Response Data:$.response_data[1]->detail_response_data = mid2 create data

   Response Data:$.response_data[2]->detail_response_data = mid3 create data



[[ TC3688 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) without ids

   URL: /v1/egs/merchandise/get_details

   

Expected Results 

========== 

1.Http Response Code 400

2.Response Data:$.status->code = 10

   Response Data:$.status->message = ""ids is not a non-empty list""

[[ TC3689 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids=null

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[0->detail_status->code = 8

   Response Data:$.response_data[0]->detail_status->message = ""Record not found""



[[ TC3690 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids=

   

Expected Results 

========== 

1.Http Response Code 400

2.Response Data:$.status->code = 10

   Response Data:$.status->message = ""ids is not a non-empty list""

[[ TC3691 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = ø

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""

[[ TC3692 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = string

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""

[[ TC3693 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = @#!

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""

[[ TC3694 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = {¡°a¡±:1}

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""



[[ TC3695 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = [1，2]

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""

[[ TC3696 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = 9999999999999999999

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 8

   Response Data:$.response_data->detail_status->message =""Record not found""

[[ TC3697 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = 123456789012345678901

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data->detail_status->code = 10

   Response Data:$.response_data->detail_status->message =""[mid] has length 21. Maximum length is 20""



[[ TC3698 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = id1，...id200

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data count = 200

[[ TC3699 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL: /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Get Merchandise Details(GET) 

   SET ids = id1，....id201

   

Expected Results 

========== 

1.Http Response Code 400

2.Response Data:$.status->code = 10

   Response Data:$.status->message = ""ids exceed maximum limitation 200""

[[ TC3700 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，null，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found"

[[ TC3701 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 10

   Response Data:$.response_data[1]->detail_status->message = ""[mid] is a required field"

[[ TC3702 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，ø，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found"

[[ TC3703 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，string，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found""

[[ TC3704 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，@#!，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found""

[[ TC3705 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，{¡°a¡±:1}，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found""

[[ TC3706 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，[1，2]，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found""



[[ TC3707 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，9999999999999999999，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 8

   Response Data:$.response_data[1]->detail_status->message = ""Record not found""

[[ TC3708 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit 2 Merchandise(POST) and Get mid(mid1，mid2) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，123456789012345678901，mid2

   

Expected Results 

========== 

1.Http Response Code 200

2.Response Data:$.status->code = 200

   Response Data:$.status->message = ""response ok""

3.Response Data:$.response_data[1]->detail_status->code = 10

   Response Data:$.response_data[1]->detail_status->message = ""[mid] has length 21. Maximum length is 20""



[[ TC3709 ]]


=========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Get Merchandise Details URL:      /v1/egs/merchandise/get_details?ids=



Testing Steps: 

========== 

1.Submit Merchandise(POST) and Get mid(mid1) from ResponseData

2.Get Merchandise Details(GET) 

   SET ids=mid1，123，123

   

Expected Results 

========== 

1.Http Response Code 400

2.Response Data:$.status->code = 10

   Response Data:$.status->message = ""input id 123 is duplicated""

[[ TC3711 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = null

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3712 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = ''

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3713 ]]


 1. SET request_data = required_default

 UNSET request_data-&gt;ccode

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3714 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = 'notexist'

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3715 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = 'TWN'

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3716 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = 12345

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3717 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = 'tw'

 PUT /v1/egs/merchandise/mass_shelve

 2. SET batch_id = result_data-&gt;response_data-&gt;batch_id

 GET /v1/egs/batch/query_summary/${batch_id}



  [Expected Result]

 1. assertEquals http 200

  assertEquals status-&gt;code = '200'

 2. assertEquals http 200

  assertEquals status-&gt;code = '200'

  assertEquals response_data-&gt;batch_summary-&gt;ccode = request_data-&gt;ccode

  assertEquals response_data-&gt;batch_summary-&gt;property = request_data-&gt;property

  assertEquals response_data-&gt;batch_summary-&gt;status = 0

  assertEquals response_data-&gt;batch_summary-&gt;total_cnt = count(request_data-&gt;mass_data)

  assertEquals response_data-&gt;batch_summary-&gt;create_time &lt; Now + 5

[[ TC3718 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = array('tw'， 'us')

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3719 ]]


 1. SET request_data = required_default

 SET request_data-&gt;ccode = array('ccode1' =&gt; 'tw'， 'ccode2' =&gt; 'us')

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 400

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'invalid format'

[[ TC3720 ]]


 1. SET request_data = required_default

 SET request_data-&gt;property = 'notexist'

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 404

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'not found'

[[ TC3721 ]]


 1. SET request_data = required_default

 SET request_data-&gt;property = '~!@#$%^&amp;*()_+{}|\":&lt;&gt;?/.，\';][=-`'

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 404

  assertEquals status-&gt;code = '10'

  assertEquals status-&gt;system = 'batch'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;code = '10-008'

  assertEquals status-&gt;error_list-&gt;ccode-&gt;message = 'not found'

[[ TC3722 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2

  2. call EGS merchandise:get - mid from step 1



   Expected Result:

 1. all responses are http 200

 2. duration_day， offshelve_tod， timezone， auto_reshelve_allowed  from step 2 as step 1 input

[[ TC3723 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2

  2. call EGS merchandise:get - mid from step 1



  Expected Result:

 1. all responses are http 200

 2. duration_day， offshelve_tod， timezone， auto_reshelve_allowed  from step 2 as step 1 input

[[ TC3724 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "ASIA/TAIPEI"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3725 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "asia/taipei"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3726 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod":  current tod + 5，

     "timezone": "ABC"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3727 ]]


  1. call EGS merchandise:shelve

     "duration_day": "abc"，

     "offshelve_tod": current tod + 5，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3728 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": "abc"，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3729 ]]


  1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": -1，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2



  Expected Result:

 1. response return fail 400

[[ TC3730 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": "abc"



  Expected Result:

 1. response return fail 400

[[ TC3731 ]]


 1. call EGS merchandise:shelve

     "duration_day": 1，

     "offshelve_tod": current tod + 5，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 0



  Expected Result:

 1. response return success 200

[[ TC3732 ]]


 1. SET request_data = optional_default()

 SET shelve_time = 1200

 SET request_data-&gt;merchandise_data-&gt;duration_day  = 1

 SET request_data-&gt;merchandise_data-&gt;offshelve_tod  = 1150

 SET request_data-&gt;merchandise_data-&gt;timezone  = 'Asia/Taipei'

 SET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 5 SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = 1440 + (duration_day*1440 - shelve time) + offshelve_tod + 1

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 GET /v1/egs/merchandise/shelve/${mid}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3733 ]]


 1. SET request_data = optional_default()

 SET shelve_time = 1200

 SET request_data-&gt;merchandise_data-&gt;duration_day  = 1

 SET request_data-&gt;merchandise_data-&gt;offshelve_tod  = 1250

 SET request_data-&gt;merchandise_data-&gt;timezone  = 'Asia/Taipei'

 SET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 5

 SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = (duration_day*1440 - shelve time) + offshelve_tod + 1

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 GET /v1/egs/merchandise/shelve/${mid}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3734 ]]


 1. SET request_data = optional_default()

 SET shelve_time = 1200

 SET request_data-&gt;merchandise_data-&gt;duration_day  = 1

 SET request_data-&gt;merchandise_data-&gt;offshelve_tod  = 1150

 SET request_data-&gt;merchandise_data-&gt;timezone  = 'Asia/Taipei'

 SET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 5

 SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = 1440 + (duration_day*1440 - shelve time) + offshelve_tod

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 GET /v1/egs/merchandise/shelve/${mid}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 verify the notify message is sent in the correct time in the first shelve

 verify the notify message is sent in the correct time in the other shelve without any error_message()

[[ TC3735 ]]


 1. SET request_data = optional_default()

 SET shelve_time = 1200

 SET request_data-&gt;merchandise_data-&gt;duration_day  = 1

 SET request_data-&gt;merchandise_data-&gt;offshelve_tod  = 1250

 SET request_data-&gt;merchandise_data-&gt;timezone  = 'Asia/Taipei'

 SET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 5

 SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = (duration_day*1440 - shelve time) + offshelve_tod

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 GET /v1/egs/merchandise/shelve/${mid}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 verify the notify message is sent in the correct time in the first shelve

 verify the notify message is sent in the correct time in the other shelve without any error_message()

[[ TC3736 ]]


 1. SET request_data = optional_default()

 UNSET request_data-&gt;merchandise_data-&gt;duration_day

 UNSET request_data-&gt;merchandise_data-&gt;offshelve_tod

 UNSET request_data-&gt;merchandise_data-&gt;timezone

 UNSET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed

 SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = 10

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 GET /v1/egs/merchandise/shelve/${mid}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify error_message()

[[ TC3737 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=192.168.1.1

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

[[ TC3738 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=2001:db8:85a3::8a2e:370:7334

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

[[ TC3739 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=256.168.1.1

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3740 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=2001:db8:85a3::8a2e:370:gfff

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3741 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=2001::25de::cade

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3742 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=::ffff:c0a8:5909

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

[[ TC3743 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344

 SET duration_day=1

 SET offshelve_tod=current tod + 5

 SET timezone="Asia/Taipei"

 SET auto_reshelve_allowed=2

 GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&amp;duration_day=${duration_day}&amp;offshelve_tod=${offshelve_tod}&amp;timezone=${timezone}&amp;auto_reshelve_allowed=${auto_reshelve_allowed}



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3744 ]]


 1. SET request_data = required_default()

 encrypt every required fields

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET request_data-&gt;merchandise_data-&gt;shelve_ip=192.168.1.1

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3745 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET request_data-&gt;merchandise_data-&gt;shelve_ip=192.168.1.1

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

[[ TC3746 ]]


 1. SET request_data = required_default()

 POST /v1/egs/merchandise/submit

 2. SET mid = result_data-&gt;response_data-&gt;mid

 SET request_data-&gt;merchandise_data-&gt;shelve_ip=encrypt(192.168.1.1)

 PUT /v1/egs/merchandise/mass_shelve



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 400

 verify error_message()

[[ TC3747 ]]


    1. POST /v1/egs/merchandise/mass_shelve/?user_update=0

 request_data = required data

 2.get merchandise



  Expected Result:

 1.verify submit

 http code 200

 status-&gt;code=200

 status-&gt;message="insert ok"

 2.verify get merchandise

 response data-&gt;user_update=0

[[ TC3748 ]]


    1. POST /v1/egs/merchandise/mass_shelve/?user_update=1

 request_data = required data

 2.get merchandise



  Expected Result:

 1.verify submit

 http code 200

 status-&gt;code=200

 status-&gt;message="insert ok"

 2.verify get merchandise

 response data-&gt;user_update=1

[[ TC3749 ]]


    1. POST /v1/egs/merchandise/mass_shelve/?user_update=

 request_data = required data

 2.get merchandise



  Expected Result:

 1.verify submit

 http code 200

 status-&gt;code=200

 status-&gt;message="insert ok"

 2.verify get merchandise

 response data-&gt;user_update=0

[[ TC3752 ]]


request_data->sid='!@#$%^&*()_+{}:""|<>?/.，\';][=-`'

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request_data->category='11111'

request_data->title='this is title'

request_data->descs='this is descs'

request_data->location='taipei'

request_data->currency='TWD'

2. GET /v1/egs/merchandise/publish_draft/{mid}

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as insert

3.3 check status is NEW



[[ TC3753 ]]


request_data->sid='xxx'(length=128)

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request_data->category='11111'

request_data->title='this is title'

request_data->descs='this is descs'

request_data->location='taipei'

request_data->currency='TWD'

2. GET /v1/egs/merchandise/publish_draft/{mid}

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as insert

3.3 check status is NEW

[[ TC3756 ]]


request_data->sid='adpost'

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request_data->category=''

request_data->title='this is title'

request_data->descs='this is descs'

request_data->location='taipei'

request_data->currency='TWD'

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'



[[ TC3757 ]]


request_data->sid='adpost'

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

//request_data->category='11111'

request_data->title='this is title'

request_data->descs='this is descs'

request_data->location='taipei'

request_data->currency='TWD'

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 400

2.2 check status code and correct

status->code=400

status->message='invalid parameter'



[[ TC3774 ]]


request_data->sid='adpost'

request_data->aid='jordan'

request_data->mtype='basic'

request_data->ccode='tw'

request_data->property='auction'

request_data->category='11111'

request_data->title='this is title'

request_data->descs='this is descs'

request_data->location='taipei'

request_data->currency='TWD'

request_data->price=0

2. GET /v1/egs/merchandise/publish_draft/{mid}

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status->code=200

status->message='success'

3.1 http response code is 200

3.2 check data is the same as insert

3.3 check status is NEW



[[ TC3775 ]]


request_data-&gt;sid='adpost'

request_data-&gt;aid='jordan'

request_data-&gt;mtype='basic'

request_data-&gt;ccode='tw'

request_data-&gt;property='auction'

request_data-&gt;category='11111'

request_data-&gt;title='this is title'

request_data-&gt;descs='this is descs'

request_data-&gt;location='taipei'

request_data-&gt;currency='TWD'

request_data-&gt;email='nevec_user_1@yahoo.com.tw'

2. GET /v1/egs/merchandise/publish_draft/{mid}

3. GET /v1/eca/merchandise/get/{mid}



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status-&gt;code=200

status-&gt;message='create draft ok'

2.1 http response code is 200

2.2 check status code and correct

status-&gt;code=200

status-&gt;message='success'

3.1 http response code is 200

3.2 check data is the same as insert

3.3 check status is NEW

[[ TC3787 ]]


2. POST */v1/eca/merchandise/create_draft  

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": 1，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 400

3.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3788 ]]


2. POST */v1/eca/merchandise/create_draft 

request-&gt;merchandise_data-&gt;cat_attr={

  ""ROOM_TYPE"": [""values""]，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status-&gt;code=200

status-&gt;message=""success""

3.1 http response 200

3.2 response json format

status-&gt;code=200

status-&gt;message=""success""

[[ TC3789 ]]


2. POST */v1/eca/merchandise/create_draft  

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""values""，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3790 ]]


2. POST */v1/eca/merchandise/create_draft  

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": 1，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 400

3.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3791 ]]


2. POST */v1/eca/merchandise/create_draft  

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""defined string""，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3792 ]]


2. POST */v1/eca/merchandise/create_draft  

request->merchandise_data->cat_attr={

    ""ROOM_TYPE"": ""value1""，

}

3. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

3.1 http response 200

3.2 response json format

status->code=200

status->message=""success""

[[ TC3793 ]]


request_data->aid='jordan'

request_data->mtype='basic'

request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""



[[ TC3796 ]]


request->price=1000

//request->price_type=0



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3797 ]]


//request->price=1000

request->price_type=0



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC3798 ]]


//request->price=1000

//request->price_type=0



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3799 ]]


request->price=1000

request->price_type=0



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC3800 ]]


//request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->total_reshelve_allowed = 1

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 400

2.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3801 ]]


request_data->merchandise_data->duration_day = 1

//request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->total_reshelve_allowed = 1

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 400

2.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3802 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

//request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->total_reshelve_allowed = 1

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 400

2.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3803 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

//request_data->merchandise_data->total_reshelve_allowed = 1

2. GET /v1/egs/merchandise/publish_draft/{mid}



Expected Result:

2.1 http response 400

2.2 response json format

status->code=400

status->message=""invalid parameter""

[[ TC3804 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = null



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3805 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = ''



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3806 ]]




1. SET request_data = optinal_default



UNSET request_data->merchandise_data->page_view



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3807 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3808 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 2147483646



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3809 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 2147483646.01



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid length'



[[ TC3810 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 0



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid





GET /v1/egs/merchandise/get/${mid}



[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3811 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = -1



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid length'



[[ TC3812 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 1000.01



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 400



 verify error_message()



[[ TC3813 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = 65536



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3814 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = "65536"



POST /v1/egs/merchandise/mass_submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



 verify response_message()



2. assertEquals http 200



 verify response_message()



[[ TC3815 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = array("65536"， "0")



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3816 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view = array("key1"=>"65536"， "key2"=>"0")



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3817 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->nogroup = 1， 0， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3818 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->nogroup = null， ''， -1， 1.1， 0.1， true， false， array(true)， array('key' => true)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3819 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->verified_user = 0， 1， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3820 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->verified_user = null， ''，true， false， 2， 0.1， -1， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3821 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3822 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->page_view_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3823 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3824 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3825 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3826 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->watchlist = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3827 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3828 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)，'~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3829 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3830 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->qna = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3831 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3832 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3833 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3834 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->appointment = null， ''， 0.1， -1， 2147483647，  array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3835 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->popularity = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3836 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->popularity = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3837 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data1 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3838 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data1 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3839 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data2 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3840 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data2 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3841 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data3 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3842 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data3 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3843 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data4 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3844 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data4 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3845 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data5 = 0， 2147483646， '0'， '2147483646'， notincluded



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



[[ TC3846 ]]




1. SET request_data = optinal_default



SET request_data->merchandise_data->range_data5 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\":<>?/.，\';][=-`'



POST /v1/egs/merchandise/mass_submit







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC3847 ]]




1. SET request_data = required_default()

 

SET aid without encrypting



POST /v1/egs/merchandise/mass_submit

 

2. SET request_data = required_default()

 

SET email without encrypting

 

POST /v1/egs/merchandise/mass_submit

 

3. SET request_data = required_default()



SET phone without encrypting

 

POST /v1/egs/merchandise/mass_submit



4. SET request_data = required_default()

 

SET ym without encrypting

 

POST /v1/egs/merchandise/mass_submit



 



[Expected Result]

 

1. assertEquals http 400



verify error_message()

 

2. assertEquals http 400

 

verify error_message()

  

3. assertEquals http 400

 

verify error_message()

 

4. assertEquals http 400

 

verify error_message()



[[ TC3848 ]]


1. SET request_data = required_default() 

SET aid without encrypting 

POST /v1/egs/merchandise/mass_submit 

2. SET request_data = required_default() 

SET email without encrypting 

POST /v1/egs/merchandise/mass_submit 

3. SET request_data = required_default() 

SET phone without encrypting 

POST /v1/egs/merchandise/mass_submit 

4. SET request_data = required_default() 

SET ym without encrypting 

POST /v1/egs/merchandise/mass_submit 



[Expected Result] 

1. assertEquals http 200 

verify response_message() 

2. assertEquals http 200 

verify response_message() 

3. assertEquals http 200 

verify response_message() 

4. assertEquals http 200 

verify response_message() 

&nbsp;

[[ TC3849 ]]


1. SET request_data = required_default() 

SET aid with encrypting 

POST /v1/egs/merchandise/mass_submit 

2. SET request_data = required_default() 

SET email with encrypting 

POST /v1/egs/merchandise/mass_submit 

3. SET request_data = required_default() 

SET phone with encrypting 

POST /v1/egs/merchandise/mass_submit 

4. SET request_data = required_default() 

SET ym with encrypting 

POST /v1/egs/merchandise/mass_submit 



[Expected Result] 

1. assertEquals http 400 

verify error_message() 

2. assertEquals http 400 

verify error_message() 

3. assertEquals http 400 

verify error_message() 

4. assertEquals http 400 

verify error_message()

[[ TC3850 ]]


1. POST /v1/egs/merchandise/mass_submit/?user_update=0

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status-&gt;code=200

status-&gt;message="insert ok"

2.verify get merchandise

response data-&gt;user_update=0

[[ TC3851 ]]


1. POST /v1/egs/merchandise/mass_submit/?user_update=1

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status-&gt;code=200

status-&gt;message="insert ok"

2.verify get merchandise

response data-&gt;user_update=1

[[ TC3852 ]]


1. POST /v1/egs/merchandise/mass_submit/?user_update=

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status-&gt;code=200

status-&gt;message="insert ok"

2.verify get merchandise

response data-&gt;user_update=0

  4. assertEquals http 200

  verify response_message()

[[ TC3870 ]]


1. Shelve merchanidse

   UNSET merchandise_id



Expected Result:

1， http code 400

[[ TC3871 ]]


1. Shelve merchanidse

   SET merchandise_id = ¡°notexist¡±



Expected Result:

1， http code 404

[[ TC3872 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 2. call EGS merchandise:get - mid from step 1

 

Expected Result:

1. all responses are http 200

2. duration_day， offshelve_tod， timezone， total_reshelve_allowed  from step 2 as step 1 input

[[ TC3873 ]]


1. call EGS merchandise:submit 

 - do not put data of columns ""duration_day""， ""offshelve_tod""， ""timezone""， ""total_reshelve_allowed""

 2. call EGS merchandise:shelve - mid from step 1

 - do not put data of columns ""duration_day""， ""offshelve_tod""， ""timezone""， ""total_reshelve_allowed""

 

Expected Result:

1. responses returns success 200 at step 1

2. responses returns&nbsp; success 200 at step 2

[[ TC3874 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": """"，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3875 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": null，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3876 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""ASIA/TAIPEI""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3877 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""asia/taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3878 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"":  current tod + 5，

    ""timezone"": ""ABC""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3879 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"":  current tod + 5，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3880 ]]


1. call EGS merchandise:shelve

    ""duration_day"": ""abc""，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3881 ]]


1. call EGS merchandise:shelve

    ""duration_day"": """"，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3882 ]]


1. call EGS merchandise:shelve

    ""duration_day"": null，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3883 ]]


1. call EGS merchandise:shelve

    ""duration_day"": -1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3884 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 2147483647，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3885 ]]


1. call EGS merchandise:shelve

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""total_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3886 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 3650，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return success 200

[[ TC3887 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": ""abc""，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3888 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": """"，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3889 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": null，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3890 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": -1，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3891 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": 0，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3892 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": 1441，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3893 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return fail 400

[[ TC3894 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": 1，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return success 200

[[ TC3895 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": 1440，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2

 

Expected Result:

1. response return success 200

[[ TC3896 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": ""abc""

 

Expected Result:

1. response return fail 400

[[ TC3897 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": """"

 

Expected Result:

1. response return fail 400

[[ TC3898 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": null

 

Expected Result:

1. response return fail 400

[[ TC3899 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": -1

 

Expected Result:

1. response return fail 400

[[ TC3900 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2147483647

 

Expected Result:

1. response return fail 400

[[ TC3901 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

 

Expected Result:

1. response return fail 400

[[ TC3902 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 0

 

Expected Result:

1. response return success 200

[[ TC3903 ]]


1. call EGS merchandise:shelve

    ""duration_day"": 1，

    ""offshelve_tod"": current tod + 5，

    ""timezone"": ""Asia/Taipei""，

    ""auto_reshelve_allowed"": 2147483646

 

Expected Result:

1. response return success 200

[[ TC3904 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1150

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->auto_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 1440 + (duration_day*1440 - shelve time) + offshelve_tod + 1

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3905 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1250

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->auto_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = (duration_day*1440 - shelve time) + offshelve_tod + 1

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()



[[ TC3906 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1150

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->auto_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = 1440 + (duration_day*1440 - shelve time) + offshelve_tod

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

verify the notify message is sent in the correct time in the first shelve

verify the notify message is sent in the correct time in the other shelve without any error_message()

[[ TC3907 ]]


1. SET request_data = optional_default()

SET shelve_time = 1200

SET request_data->merchandise_data->duration_day  = 1

SET request_data->merchandise_data->offshelve_tod  = 1250

SET request_data->merchandise_data->timezone  = 'Asia/Taipei'

SET request_data->merchandise_data->auto_reshelve_allowed = 5

SET request_data->merchandise_data->remind_notify_minute = (duration_day*1440 - shelve time) + offshelve_tod

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

verify the notify message is sent in the correct time in the first shelve

verify the notify message is sent in the correct time in the other shelve without any error_message()

[[ TC3908 ]]


1. SET request_data = optional_default()

UNSET request_data-&gt;merchandise_data-&gt;duration_day

UNSET request_data-&gt;merchandise_data-&gt;offshelve_tod

UNSET request_data-&gt;merchandise_data-&gt;timezone

UNSET request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed

SET request_data-&gt;merchandise_data-&gt;remind_notify_minute = 10

POST /v1/egs/merchandise/submit

2. SET mid = result_data-&gt;response_data-&gt;mid

GET /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

[[ TC3909 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=192.168.1.1

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3910 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=2001:db8:85a3::8a2e:370:7334

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3911 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=256.168.1.1

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3912 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=2001:db8:85a3::8a2e:370:gfff

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3913 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=2001::25de::cade

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3914 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=::ffff:c0a8:5909

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 200

verify response_message()

[[ TC3915 ]]


1. SET request_data = required_default()

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344

SET duration_day=1

SET offshelve_tod=current tod + 5

SET timezone=""Asia/Taipei""

SET auto_reshelve_allowed=2

GET /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



[Expected Result]

1. assertEquals http 200

verify response_message()

2. assertEquals http 400

verify error_message()

[[ TC3916 ]]


1. SET request_data = required_default()

encrypt every required fields

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

SET request_data->merchandise_data->shelve_ip=192.168.1.1

PUT /v1/egs/merchandise/shelve/${mid}



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC3917 ]]


1. call EGS merchandise:shelve

    set duration_day=""

    set offshelve_tod=""

    set timezone=""

set auto_reshelve_allowed =""



Expected Result:

1. response return success 200

[[ TC3918 ]]


1. call EGS merchandise:shelve

  set duration_day=null

  set offshelve_tod=null

  set timezone=null

  set auto_reshelve_allowed =null

 

Expected Result:

1. response return success 200

[[ TC3919 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan""

 request_data[duration_day]=2

 request_data[offshelve_tod]=12

 request_data[timezone]=""Asia/Taipei""

 request_data[auto_reshelve_allowed]=10

3. get merchandise detail by mid

Expected Result:

2. response code return  200

    verify status.code=200

    verify status.message=""success""

3. reponse http code 200

    verify json schema and responseData equals submit data

    verify merchandise status is closed

[[ TC3920 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""

request_data[auto_offshelve_time]=201307101021

3. get merchandise detail by mid

Expected Result:

2. response code return  200

    verify status.code=200

    verify status.message=""success""

3. reponse http code 200

    verify json schema and responseData equals submit data

    verify responseData[merchandise][status]=3(closed)

when time is  201307101020

 verify responseData[merchandise][auto_shelve_time] is null

when time is  201307101021

   verify  responseData[merchandise][auto_offshelve_time] is null

[[ TC3921 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan"" and _tod， timezone， auto_reshelve_allowed

unset request_data[duration_day]

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan""，duration_day， timezone， auto_reshelve_allowed

unset request_data[offshelve_tod]

4. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan""，duration_day， offshelve_tod， auto_reshelve_allowed

unset request_data[timezone]

5. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""timespan""，duration_day， offshelve_tod， timezone

unset request_data[auto_reshelve_allowed]





Expected Result:

2.1-5.1. response code return  400

    verify status.code=10

[[ TC3922 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. shelve the merchandise

3. shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

4. get merchandise detail by mid

Expected Result:

3. response code return  200

    verify status.code=200

    verify status.message=""success""

4. reponse http code 200

    verify json schema and responseData equals submit data

verify responseData[merchandise][status]=3(closed)

when time is  201307101021

    verify responseData[merchandise][auto_shelve_time] is null

            responseData[merchandise][auto_offshelve_time] is null

[[ TC3923 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. shelve the merchandise

3. close the merchandise

4. shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

request_data[auto_offshelve_time]=201307101021

5 get merchandise detail by mid

Expected Result:

4. response code return  200

    verify status.code=200

    verify status.message=""success""

5. reponse http code 200

    verify json schema and responseData equals submit data

    verify responseData[merchandise][status]=3(closed)

when time is  201307101020

 verify responseData[merchandise][auto_shelve_time] is null

when time is  201307101021

   verify  responseData[merchandise][auto_offshelve_time] is null

[[ TC3924 ]]


create draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. create draft merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

3 get merchandise detail by mid

Expected Result:

2. response code return  200

    verify status.code=200

    verify status.message=""success""

3. reponse http code 200

    verify json schema and responseData equals submit data

 verify responseData[merchandise][status]=0(draft)

[[ TC3925 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020



Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3926 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]="appointment"  request_data[auto_shelve_time]='測'

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]="appointment"  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]='測'

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3927 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=""123456789012345678790¡°

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=""123456789012345678790""

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3928 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment"" 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; request_data[auto_shelve_time]=""¡°

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; request_data[auto_offshelve_time]=time()+60

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; request_data[auto_shelve_time]=time()

&nbsp;&nbsp;&nbsp;&nbsp; request_data[auto_offshelve_time]=""""

Expected Result:

2-3. response code return 400

  verify status.code=10

[[ TC3929 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=array(12)

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=array(12)

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3930 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=array(""a""=>1)

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=array(""a""=>1)

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3931 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=""string¡°

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=""string""

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3932 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=-1

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=-1

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3933 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=0

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=0

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3934 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

 request_data[auto_shelve_time]=null

 request_data[auto_offshelve_time]=time()+60

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment"" 

 request_data[auto_shelve_time]=time()

 request_data[auto_offshelve_time]=null

 

Expected Result:

2-3. response code return 400

  verify status.code=10

[[ TC3935 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=""!@#¡°

request_data[auto_offshelve_time]=201307101021

3. Shelve merchandise by mid

 set request_data[auto_shelve_type]=""appointment""  request_data[auto_shelve_time]=201307101020

request_data[auto_offshelve_time]=""!@#""

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3936 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise set auto_shelve_type=timespan and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""appointment"" 

   request_data[auto_shelve_time]=time()

   request_data[auto_offshelve_time]=time()+60

Expected Result:

2-3. response code return 400

  verify status.code=10

[[ TC3937 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit merchandise set auto_shelve_type=appointment and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""timespan""  

     request_data[duration_day]=1

     request_dataoffshelve_tod]=2

     request_data[timezone]=¡®Asia/Taipei¡¯

     request_data[auto_reshelve_allowed]=10

Expected Result:

2-3. response code return  400

    verify status.code=10

[[ TC3938 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1} 

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update] 

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid] 



Step: 

1. Submit merchandise set auto_shelve_type=appointment and get mid 

2. Shelve merchandise by mid 

set request_data[auto_shelve_type]="timespan" 

  request_data[auto_offshelve_time]=time-60

  

Expected Result: 

2-3. response code return 400 

 verify status.code=10

[[ TC3939 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a basic merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""timespan"" 

 request_data[timespan_shelve_time]=nowTime

 request_data[duration_day]=1，

 request_data[offshelve_tod]=1，

 request_data[timezone]=""Asia/Taipei""，

 request_data[auto_reshelve_allowed]= 2



 Expected Result:

2. response code return 400

 verify status.code=10

[[ TC3940 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

Shelve:(PUT)/v1/egs/merchandise/shelve/[mid]/?user_update=[user_update]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



Step: 

1. Submit a bid merchandise and get mid

2. Shelve merchandise by mid

set request_data[auto_shelve_type]=""timespan"" 

 request_data[timespan_shelve_time]=nowTime

 request_data[duration_day]=1，

 request_data[offshelve_tod]=1，

 request_data[timezone]=""Asia/Taipei""，

 request_data[auto_reshelve_allowed]= 2



Expected Result:

2. response code return 400

 verify status.code=10

[[ TC3946 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "盧彥勳贏球，目標大滿貫"

POST /v1/egs/merchandise/submit

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "盧彥勳贏球，目標大滿貫"

POST /v1/egs/merchandise/submit

4. PUT /v1/egs/merchandise/shelve/${mid}

5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+title:贏球+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 search result have two merchandise

 has_group_member=true

[[ TC3947 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "盧彥勳贏球，目標大滿貫"

 POST /v1/egs/merchandise/submit

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${mid}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 has_group_member=false

[[ TC3948 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

7. SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

 PUT /v1/egs/merchandise/update/${midA}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

[[ TC3949 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

7. SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 PUT /v1/egs/merchandise/update/${midB}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 9. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

[[ TC3950 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

POST /v1/egs/merchandise/submit

SET midC = response_data-&amp;gt;mid

6. PUT /v1/egs/merchandise/shelve/${mid}

7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2

10. SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

 PUT /v1/egs/merchandise/update/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 9. assertEquals http 200

 verify response_message()

 midC belong to the a group id

 has_group_member=false

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midC belong to the same group id

 has_group_member=true

 12. assertEquals http 200

 verify response_message()

 midB belong to a group id

 has_group_member=false

 13. assertEquals http 200

 verify response_message()

 midA and midC belong to the same group id

 has_group_member=true

[[ TC3951 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midA = response_data-&gt;mid

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 4. PUT /v1/egs/merchandise/cancel/${mid} 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 have group id

 has_group_member is false

 status is shelve

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 have group id 

 has_group_member=false

 status is cancel

[[ TC3952 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 7. PUT /v1/egs/merchandise/cancel/${midA}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is cancel

 9. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is shelve

[[ TC3953 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 6. PUT /v1/egs/merchandise/shelve/${mid}

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2

 10. PUT /v1/egs/merchandise/cancel/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 8. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 9. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is false

 status is cancel

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

[[ TC3954 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midA = response_data-&gt;mid

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 4. PUT /v1/egs/merchandise/delete/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 have group id

 has_group_member is false

 status is shelve

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 have group id 

 has_group_member=false

 status is delete

[[ TC3955 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 7. PUT /v1/egs/merchandise/delete/${midA}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is delete

 9. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is shelve

[[ TC3956 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 6. PUT /v1/egs/merchandise/shelve/${mid}

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2

 10. PUT /v1/egs/merchandise/delete/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 8. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 9. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is false

 status is delete

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

[[ TC3957 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midA = response_data-&gt;mid

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 4. PUT /v1/egs/merchandise/close/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 have group id

 has_group_member is false

 status is shelve

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 have group id 

 has_group_member=false

 status is close

[[ TC3958 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 7. PUT /v1/egs/merchandise/close/${midA}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is close

 9. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is shelve

[[ TC3959 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 6. PUT /v1/egs/merchandise/shelve/${mid}

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2

 10. PUT /v1/egs/merchandise/close/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 8. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 9. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is false

 status is close

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

[[ TC3960 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midA = response_data-&gt;mid

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 4. PUT /v1/egs/merchandise/cancel/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 6. PUT /v1/egs/merchandise/recover/${mid}

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 have group id

 has_group_member is false

 status is shelve

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 have group id 

 has_group_member=false

 status is cancel

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 have group id 

 has_group_member=false

 status is shelve

[[ TC3961 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 7. PUT /v1/egs/merchandise/cancel/${midA}

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 10. PUT /v1/egs/merchandise/recover/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 6. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 7. assertEquals http 200

 verify response_message()

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is cancel

 9. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is false

 status is shelve

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

 12. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member is true

 status is shelve

[[ TC3962 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/submit

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/shelve/${mid}

5. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 6. PUT /v1/egs/merchandise/shelve/${mid}

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midC}+)&amp;collapsefield=gid&amp;collasesize=2

 10. PUT /v1/egs/merchandise/cancel/${midA}

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 14. PUT /v1/egs/merchandise/recover/${midA}

 15. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 16. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

 17. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 8. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 9. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 10. assertEquals http 200

 verify response_message()

 11. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is false

 status is cancel

 12. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 13. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 14. assertEquals http 200

 verify response_message()

 15. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 16. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

 17. assertEquals http 200

 verify response_message()

 midA and midB and midC belong to the same group id

 has_group_member is true

 status is shelve

[[ TC3963 ]]


 1. SET request_data = required_default

 SET request_data-&gt;merchandise_data-&gt;title = "中油為大家加油，請大家為台灣加油"

SET request_data-&gt;merchandise_data-&gt;nogroup = true

POST /v1/egs/merchandise/submit

SET midA = response_data-&gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&gt;merchandise_data-&gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 this group only have midA

[[ TC3964 ]]


 1. SET request_data = required_default

 SET request_data-&gt;merchandise_data-&gt;title = "中油為大家加油，請大家為台灣加油"

SET request_data-&gt;merchandise_data-&gt;nogroup = true

POST /v1/egs/merchandise/submit

SET midA = response_data-&gt;mid

2. PUT /v1/egs/merchandise/shelve/${mid}

3. SET request_data = required_default

SET request_data-&gt;merchandise_data-&gt;title = "中油為大家加油，請大家為台灣加油"

 POST /v1/egs/merchandise/submit

 SET midB = response_data-&gt;mid

 4. PUT /v1/egs/merchandise/shelve/${mid}

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+verified_user:1+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 this group only have midA

[[ TC3965 ]]


 1. SET request_data = required_default

 SET request_data-&gt;merchandise_data-&gt;title = "中油為大家加油，請大家為台灣加油"

 SET request_data-&gt;merchandise_data-&gt;page_view = 10

 SET request_data-&gt;merchandise_data-&gt;page_view_weekly = 100

 SET request_data-&gt;merchandise_data-&gt;watchlist = 20

 SET request_data-&gt;merchandise_data-&gt;watchlist_weekly = 200

 SET request_data-&gt;merchandise_data-&gt;qna = 30

 SET request_data-&gt;merchandise_data-&gt;qna_weekly = 300

 SET request_data-&gt;merchandise_data-&gt;appointment = 40

 SET request_data-&gt;merchandise_data-&gt;appointment_weekly = 400

 SET request_data-&gt;merchandise_data-&gt;popularity = 50

 SET request_data-&gt;merchandise_data-&gt;range_data1 = 60

 SET request_data-&gt;merchandise_data-&gt;range_data2 = 70

 SET request_data-&gt;merchandise_data-&gt;range_data3 = 80

 SET request_data-&gt;merchandise_data-&gt;range_data4 = 90

 SET request_data-&gt;merchandise_data-&gt;range_data5 = 95

 POST /v1/egs/merchandise/submit

 SET midA = response_data-&gt;mid

 2. PUT /v1/egs/merchandise/shelve/${mid}

 3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+page_view:[9，11]+)&amp;collapsefield=gid&amp;collasesize=2

 4. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+page_view_weekly:[99，101]+)&amp;collapsefield=gid&amp;collasesize=2

 5. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+watchlist:[19，21]+)&amp;collapsefield=gid&amp;collasesize=2

 6. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+watchlist_weekly:[199，201]+)&amp;collapsefield=gid&amp;collasesize=2

 7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+qna:[29，31]+)&amp;collapsefield=gid&amp;collasesize=2

 8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+qna_weekly:[299，301]+)&amp;collapsefield=gid&amp;collasesize=2

 9. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+appointment:[39，41]+)&amp;collapsefield=gid&amp;collasesize=2

 10. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+appointment_weekly:[399，401]+)&amp;collapsefield=gid&amp;collasesize=2

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+popularity:[49，51]+)&amp;collapsefield=gid&amp;collasesize=2

 12. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+range_data1:[59，61]+)&amp;collapsefield=gid&amp;collasesize=2

 13. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+range_data2:[69，71]+)&amp;collapsefield=gid&amp;collasesize=2

 14. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+range_data3:[79，81]+)&amp;collapsefield=gid&amp;collasesize=2

 15. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+range_data4:[89，91]+)&amp;collapsefield=gid&amp;collasesize=2

 16. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+range_data1:[94，96]+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 assertEquals http 200

 verify response_message()

 every query is correct

[[ TC3966 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



SET midA = response_data->mid



2. PUT /v1/egs/merchandise/shelve/${midA}



3. SET request_data = update_data



PUT /v1/egs/merchandise/update/${midA}



3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)







[Expected Result]



assertEquals http 200



verify response_message()



search result is equal to merchandise data



[[ TC3967 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/create_draft



SET midA = response_data->mid



2. PUT /v1/egs/merchandise/publish_draft/${midA}



3. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)







[Expected Result]



assertEquals http 200



verify response_message()



search result is equal to merchandise data



[[ TC3968 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/create_draft

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/publish_draft/${midA}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

POST /v1/egs/merchandise/create_draft

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/publish_draft/${midB}

5. PUT /v1/egs/merchandise/shelve/${midA}

6. PUT /v1/egs/merchandise/shelve/${midB}

7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

9. SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 PUT /v1/egs/merchandise/update/${midB}

 10. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 9. assertEquals http 200

 verify response_message()

 10. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 nogroup=0

 11. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 nogroup=0

[[ TC3969 ]]


 1. SET request_data = required_default

 SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

POST /v1/egs/merchandise/create_draft

SET midA = response_data-&amp;gt;mid

2. PUT /v1/egs/merchandise/publish_draft/${midA}

3. SET request_data = required_default

SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "雅虎奇摩是電子商務第一把交椅"

POST /v1/egs/merchandise/create_draft

SET midB = response_data-&amp;gt;mid

4. PUT /v1/egs/merchandise/publish_draft/${midB}

5. PUT /v1/egs/merchandise/shelve/${midA}

6. PUT /v1/egs/merchandise/shelve/${midB}

7. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

8. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2

9. SET request_data-&amp;gt;merchandise_data-&amp;gt;title = "中油為大家加油，請大家為台灣加油"

 PUT /v1/egs/merchandise/update/${midB}

 10. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midA}+)&amp;collapsefield=gid&amp;collasesize=2

 11. GET /v1/egs/merchandise/search_by_vql/?vql=search?query=(+mid:${midB}+)&amp;collapsefield=gid&amp;collasesize=2



  [Expected Result]

 1. assertEquals http 200

 verify response_message()

 2. assertEquals http 200

 verify response_message()

 3. assertEquals http 200

 verify response_message()

 4. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 5. assertEquals http 200

 verify response_message()

 6. assertEquals http 200

 verify response_message()

 7. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 8. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=false

 9. assertEquals http 200

 verify response_message()

 10. assertEquals http 200

 verify response_message()

 midA and midB belong to the same group id

 has_group_member=true

 nogroup=0

 11. assertEquals http 200

 verify response_message()

 midA and midB belong to the different group id

 has_group_member=true

 nogroup=0

[[ TC3970 ]]


1.  

SET request_data-&gt;merchandise_data-&gt;title = "<span style="font-family: monospace; white-space: pre;">TOYOTA CAMRY 2.0G 頂級 ACCORD TEANA GRUNDE</span>" 

POST /v1/egs/merchandise/submit 

2. 

SET request_data-&gt;merchandise_data-&gt;title = "<span style="font-family: monospace; white-space: pre;">TOYOTA CAMRY 2.0E 頂級 ACCORD TEANA GRUNDE</span>" 

POST /v1/egs/merchandise/submit 



[Expected Result] 

1. assertEquals <span style="font-family: monospace; white-space: pre;">gid</span> 

2. assertEquals <span style="font-family: monospace; white-space: pre;">has_group_member is true</span>

</div>

[[ TC3971 ]]


1.  

SET request_data-&gt;merchandise_data-&gt;title = $this-&gt;_getUniqueTitle("TOYOTA CAMRY 2.0G 頂級 ACCORD TEANA GRUNDE")

POST /v1/egs/merchandise/submit 

2. 

SET request_data-&gt;merchandise_data-&gt;title = $this-&gt;_getUniqueTitle("1233443433 TOYOTA CAMRY 2.0E1234567 頂級 ACCORD TEANA GRUNDE") 

POST /v1/egs/merchandise/submit 



[Expected Result] 

1. assertNotEquals <span>gid</span> 

2. assertNotEquals <span>has_group_member is true</span></div></div>

[[ TC3972 ]]


1. submitMerchandise



Expected Result:



verify similarity

[[ TC3973 ]]




==========



1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise category



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> category =update category



verify Json schema



[[ TC3974 ]]




========== 



1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise title



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> title =update title



verify Json schema



[[ TC3975 ]]




========== 



1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise descs



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> descs =update descs



verify Json schema



[[ TC3976 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise location



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> location =update location



verify Json schema



[[ TC3977 ]]




==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise cat_attr



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> cat_attr =update cat_attr



verify Json schema



[[ TC3978 ]]




==========



1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise price_type



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> price_type =update price_type



verify Json schema



[[ TC3979 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise index_cust_data



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> index_cust_data =update index_cust_data



verify Json schema



[[ TC3980 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product



[Step]

1. submit a merchandise with required field+optional field

2. update merchandise index_cust_data

3. search merchandise by mid

 POST /v1/eca/merchandise_search/query/?mid=mid



[Expected Result]

1. assertEquals http 200

2. verify response data> index_cust_data =update index_cust_data

verify Json schema

[[ TC3981 ]]


========== 

1.create 2 products with required parameters(have model)

2. get the 2 productId1，productId2

3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise nogroup



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> nogroup =update nogroup



verify Json schema



[[ TC3982 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise verified_user



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> verified_user =update verified_user



verify Json schema



[[ TC3983 ]]




==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise page_view



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> page_view =update page_view



verify Json schema



[[ TC3984 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise page_view_weekly



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> page_view_weekly =update page_view_weekly



verify Json schema



[[ TC3985 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise watchlist_weekly



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> watchlist_weekly =update watchlist_weekly



verify Json schema



[[ TC3986 ]]




==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise watchlis



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> watchlis =update watchlis



verify Json schema



[[ TC3987 ]]


 

==========



1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise qna_weekly



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> qna_weekly =update qna_weekly



verify Json schema



[[ TC3988 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise qna



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> qna =update qna



verify Json schema



[[ TC3989 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise appointment_weekly



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> appointment_weekly =update appointment_weekly



verify Json schema



[[ TC3990 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise appointment



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> appointment =update appointment



verify Json schema



[[ TC3991 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise popularity



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> popularity =update popularity



verify Json schema



[[ TC3992 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise range_data1



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> range_data1 =update range_data1



verify Json schema



[[ TC3993 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise range_data2



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> range_data2 =update range_data2



verify Json schema



[[ TC3994 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise range_data3



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> range_data3 =update range_data3



verify Json schema



[[ TC3995 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise range_data4



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> range_data4 =update range_data4



verify Json schema



[[ TC3996 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise range_data5



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> range_data5 =update range_data5



verify Json schema



[[ TC3997 ]]


 

==========

 

1.create 2 products with required parameters(have model)



2. get the 2 productId1，productId2



3. publish the 2 product







[Step]



1. submit a merchandise with required field+optional field



2. update merchandise  category，title，email，range_data1



3. search merchandise by mid



 POST /v1/eca/merchandise_search/query/?mid=mid







[Expected Result]



1. assertEquals http 200



2. verify response data> category，title，email，range_data1 =update  category，title，email，range_data1



verify Json schema



[[ TC4004 ]]




==========



URI Syntax: /v1/egs/merchandise/submit/?user_update=[user_update]







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters and get mid



    set requestdata[merchandise_data]['auto_shelve_type']="appointment";



         requestdata[merchandise_data]['auto_shelve_time']=time()+10;



         requestdata[merchandise_data]['auto_offshelve_time']=time()+75; 

  

2. when now time=time()+10 Search this merchandise by mid



3. when now time=time()+75 Search this merchandise by mid







Expected Results ==========



2. response httpcode is 200



   verify responseData ontime and offtime



3. response httpcode is 200



   verify responseData ontime and offtime



[[ TC4042 ]]


  ==========

  A.data: submit a bidding merchandise and shelve it， get mid



   B.URI Syntax:

   1.Request URI: /v1/egs/merchandise/update//?user_update=

  2.Request Method: PUT



   Testing Steps:

  ========== 

  1. place bid for the bidding merchandise

 2. cancel bid record

   3. cancel bid merchandise bid item

 4. update the bidding merchandise by mid 

     set request-&gt;merchandise-&gt;cust_data = array("MyTag" =&gt; "update")

    set request-&gt;merchandise-&gt;index_cust_data = array("highlight_ad" =&gt; "1"， "prioritize_ad" =&gt; "1")

    set request-&gt;merchandise-&gt;mass_cust_data = "mass cust data"

    set request-&gt;merchandise-&gt;index_cust_field1 = "index_cust_field1"

    set request-&gt;merchandise-&gt;index_cust_field2 = "index_cust_field2"

    set request-&gt;merchandise-&gt;index_cust_field3 = "index_cust_field3"

    set request-&gt;merchandise-&gt;index_cust_field4 = "index_cust_field4"

    set request-&gt;merchandise-&gt;index_cust_field5 = "index_cust_field5"

    set request-&gt;merchandise-&gt;cust_field1 = "cust_field1"

    set request-&gt;merchandise-&gt;cust_field2 = "cust_field2"

    set request-&gt;merchandise-&gt;cust_field3 = "cust_field3"

    set request-&gt;merchandise-&gt;cust_field4 = "cust_field4"

    set request-&gt;merchandise-&gt;cust_field5 = "cust_field5"

set request-&gt;merchandise-&gt;cust_category&nbsp; = array("123"，"456")

    set request-&gt;merchandise-&gt;range_data1 = 11111

    set request-&gt;merchandise-&gt;range_data2 = 22222

    set request-&gt;merchandise-&gt;range_data3 = 33333

    set request-&gt;merchandise-&gt;range_data4 = 44444

    set request-&gt;merchandise-&gt;range_data5 = 55555

    set request-&gt;meta_data-&gt;seq_id = array('seq_id' =&gt; $respData['meta_data']['seq_id']，

 5. get bid merchandise



   Expected Results

  ==========

  1.1-5.1 verify http response 200

 3.2 verify merchandise status is end 

 5.2 verify fields is new value

[[ TC4056 ]]


purchase_over=0， purchase_over_price=0，  price=10， qty=20， discount=0.2 

 

Expected Result: 

1.1 http response code is 200 

1.2 check status code and correct 

status-&gt;code=200 

status-&gt;message='success' 

calc_price= qty * price

 

 

Expected Result:

1.1-2.1 http response code is 200

1.2-2.2 check status code and correct

[[ TC4057 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Get merchandise detial



  Expected Result:

 1， http code 200

 2.verify resp_data['merchandise_data']['status'] = 2

    verify ontime，ptime，mtime field

[[ TC4058 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Close merchanidse

     merchandise_id = mid

 3.Get merchandise detial



  Expected Result:

 1， http code 400

[[ TC4059 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Cancel merchanidse

     merchandise_id = mid

 3.Get merchandise detial



  Expected Result:

 1， http code 200

 2.verify offtime，cancel_time，status field

[[ TC4060 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Shelve merchanidse

     merchandise_id = mid



  Expected Result:

 1， http code 400

[[ TC4061 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Close merchanidse

     merchandise_id = mid

 4.Get merchandise detail



  Expected Result:

 1， http code 200

 2.verify status，offtime，ontime

[[ TC4062 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Cancel merchanidse

     merchandise_id = mid

 4.Get merchandise detail



  Expected Result:

 1， http code 200

 2.verify status，offtime，ontime

[[ TC4063 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Close merchanidse

     merchandise_id = mid

 4.Close merchandise detail



  Expected Result:

 1， http code 400

[[ TC4064 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Close merchanidse

     merchandise_id = mid

 4.Cancel merchandise detail



  Expected Result:

 1， http code 200

 2.verify cancel_time，status

[[ TC4065 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Cancel merchanidse

     merchandise_id = mid

 4.Shelve merchandise detail



  Expected Result:

 1， http code 400

[[ TC4066 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Cancel merchanidse

     merchandise_id = mid

 4.Close merchandise detail

 Expected Result:

 1， http code 400

[[ TC4067 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 3.Cancel merchanidse

     merchandise_id = mid

 4.Close merchandise detail

 Expected Result:

 1， http code 400

[[ TC4068 ]]


 1. Create draft merchandise，get merchandise_id mid

 2. Publish merchanidse

     merchandise_id = mid

 3. Get merchanidse detail

     merchandise_id = mid

 Expected Result:

 1， http code 200

 2.verify status，ptime

[[ TC4069 ]]


 1. Create draft merchandise，get merchandise_id mid

 2. Shelve merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4070 ]]


 1. Create draft merchandise，get merchandise_id mid

 2. Close merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4071 ]]


 1. Create draft merchandise，get merchandise_id mid

 2. Cancel merchanidse

     merchandise_id = mid

 3. Get merchanidse detail

     merchandise_id = mid

 Expected Result:

 1， http code 200

 2.verify status，offtime，cancel_time

[[ TC4072 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Publish merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4073 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelved merchanidse

     merchandise_id = mid

 3. publish merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4074 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelved merchanidse

     merchandise_id = mid

 3. Close merchanidse

     merchandise_id = mid

 4. publish merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4075 ]]


 1. Submit merchandise，get merchandise_id mid

 2. Shelved merchanidse

     merchandise_id = mid

 3. Cancel merchanidse

     merchandise_id = mid

 4. publish merchanidse

     merchandise_id = mid

 Expected Result:

 1， http code 400

[[ TC4076 ]]




2. call submit function with correct merchandise data



3. call get_by_mid function with mid， with_detail=true



4. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return merchandise data is the same as original and status=1



4. return true



[[ TC4077 ]]




2. call submit function with correct merchandise data



3. call update_by_mid function with correct mid， merchandise data



4. call get_by_mid function with mid， with_detail=true



5. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



4. return merchandise data is the same as original



5. return true



[[ TC4078 ]]




2. call submit function with correct merchandise data



3. call get_by_mid function with mid， with_detail=false



4. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return merchandise data without description， mass_cust_data



4. return true



[[ TC4079 ]]




2. call submit function with correct merchandise data



3. call shelve_by_mid function with mid， livetime



4. call get_by_mid function with mid， with_detail=true



5. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



2. return true



3. return merchandise data which status=2



4. return true



[[ TC4080 ]]




2. call submit function with correct merchandise data



3. call shelve_by_mid function with mid， livetime



4. call close_by_mid function with mid



5. call get_by_mid function with mid， with_detail=true



6. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



4. return true



5. return merchandise data which status=3



6. return true



[[ TC4081 ]]




2. call submit function with correct merchandise data



3. call shelve_by_mid function with mid， livetime



4. call cancel_by_mid function with mid



5. call get_by_mid function with mid， with_detail=true



6. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



4. return true



5. return merchandise data which status=4



6. return true



[[ TC4082 ]]




2. call createDraft function with correct merchandise draft data



3. call get_by_mid function with mid， with_detail=true



4. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return merchandise draft data is the same as original and status=0



4. return true



[[ TC4083 ]]




2. call createDraft function with correct merchandise draft data



3. call publishDraft function with mid



4. call get_by_mid function with mid， with_detail=true



5. call delete_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



3. return merchandise draft data is the same as original and status=1



4. return true



[[ TC4084 ]]








Expected Result:



1.1 http response code is 404



1.2 check status code and correct



status->code=404



status->message='data not found'



[[ TC4085 ]]








Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC4086 ]]








Expected Result:



1.1 http response code is 404



1.2 check status code and correct



status->code=404



status->message='data not found'



[[ TC4087 ]]








Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC4088 ]]








Expected Result:



1.1 http response code is 400



[[ TC4089 ]]








Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC4090 ]]




note: since validation of the sign will auto truncate tail， result of this test will be success.



Expected Result:



1.1 http response code is 200



[[ TC4091 ]]








Expected Result:



1.1 http response code is 400



1.2 check status code and correct



status->code=400



status->message='invalid parameter'



[[ TC4092 ]]


  1. call EGS merchandise:create_draft

     "duration_day": 1，

     "offshelve_tod": current tod，

     "timezone": "Asia/Taipei"，

     "auto_reshelve_allowed": 2

  2. check not scheduler event



   Expected Result:

 1. all responses are http 200

 2. no scheduler event

[[ TC4093 ]]


 

1. call EGS merchandise:create_draft



    "duration_day": 1，



    "offshelve_tod": current tod，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 2



 2. call EGS merchandise:publish_draft - mid from step 1



 3. check no scheduler event







Expected Result:



1. all responses are http 200



2. check no scheduler event



[[ TC4094 ]]




1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": current tod，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 2



 2. call EGS merchandise:shelve - mid from step 1



 3. wait for 1 day



 4. call EGS merchandise:get - mid from step 1







Expected Result:



1. all responses are http 200



2. status from step 4 is 2



auto_shelve_count=1



auto_shelve_count <= auto_reshelve_allowed



[[ TC4095 ]]




1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": current tod，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 1



 2. call EGS merchandise:shelve - mid from step 1



 3. wait for 2 day 



 4. call EGS merchandise:get - mid from step 1







Expected Result:



1. all responses are http 200



2. status from step 4 is 3



auto_shelve_count=1



auto_shelve_count = auto_reshelve_allowed



[[ TC4096 ]]


 

1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": current tod，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 2



 2. call EGS merchandise:shelve - mid from step 1



 3. call EGS merchandise:cancel - mid from step 1



 4. check no scheduler event







Expected Result:



1. all responses are http 200



2. status from step 5 is 4



auto_shelve_count=0



auto_shelve_count < auto_reshelve_allowed



3. check no scheduler event



[[ TC4097 ]]




1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": Absolute(current tod - 480)，



    "timezone": "Africa/Casablanca"，



    "auto_reshelve_allowed": 2



 2. call EGS merchandise:shelve - mid from step 1



 3. wait for 1 day



 4. call EGS merchandise:get - mid from step 1







Expected Result:



1. all responses are http 200



2. status from step 4 is 2



auto_shelve_count=1



auto_shelve_count < auto_reshelve_allowed



check the value of the offtime in the first time is the same as the secoand time.



[[ TC4098 ]]


 

1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": Absolute(current tod - 480)，



    "timezone": "Africa/Casablanca"，



    "auto_reshelve_allowed": 1



 2. call EGS merchandise:shelve - mid from step 1



 3. wait for 2 days



 4. call EGS merchandise:get - mid from step 1







Expected Result:



1. all responses are http 200



2. status from step 4 is 3



auto_shelve_count=1



auto_shelve_count = auto_reshelve_allowed



check the value of the offtime in the first time is the same as the secoand time.



[[ TC4099 ]]


 

1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": current tod-60，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 5



2. call EGS merchandise:shelve - mid from step 1



3. check scheduler event will delay two days







Expected Result:



1. all responses are http 200



2. check scheduler event will delay two days



[[ TC4100 ]]


 

1. call EGS merchandise:submit



    "duration_day": 1，



    "offshelve_tod": current tod+60，



    "timezone": "Asia/Taipei"，



    "auto_reshelve_allowed": 1



2. call EGS merchandise:shelve - mid from step 1



3. check scheduler will delay one day







Expected Result:



1. all responses are http 200



2. check scheduler will delay one day



[[ TC4101 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=2



PUT /v1/egs/merchandise/shelve/${mid}?${shelve_ip}&${duration_day}&${offshelve_tod}&${timezone}&${auto_reshelve_allowed}



3. wait for 24 hours + 60 minutes



4. repeat 5 times



5. GET /v1/egs/merchandise/get/${mid}



6. repeat 2 times







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



5. assertEquals http 200



verify response_message()



auto_shelve_count=5



auto_shelve_count=auto_reshelve_allowed



total_auto_reshelve_count=4



total_reshelve_count=2



[[ TC4102 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=1



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/close/${mid}



4. PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



5. PUT /v1/egs/merchandise/close/${mid}



6. PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



5. assertEquals http 200



verify response_message()



auto_shelve_count=0



auto_shelve_count=auto_reshelve_allowed



total_auto_reshelve_count=0



total_reshelve_count=1



6. assertEquals http 200



verify response_message()



auto_shelve_count=0



auto_shelve_count=auto_reshelve_allowed



total_auto_reshelve_count=0



total_reshelve_count=2



[[ TC4103 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4104 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4105 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=0



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 400



verify error_message()



[[ TC4106 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=0



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/close/${mid}



4. PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 400



verify error_message()



[[ TC4107 ]]




1. PUT /v1/egs/merchandise/recover/







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4108 ]]




1. PUT /v1/egs/merchandise/recover/notexist







[Expected Result]



1. assertEquals http 404



verify error_message()



[[ TC4109 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/create_draft



2. SET mid = result_data->response_data->mid



PUT /v1/egs/merchandise/cancel/${mid}



3. PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



status=4



3. assertEquals http 200



verify response_message()



status=0



[[ TC4110 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



PUT /v1/egs/merchandise/cancel/${mid}



3. PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



status=4



3. assertEquals http 200



verify response_message()



status=0



[[ TC4111 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=5



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. reshelve 2 times



4. PUT /v1/egs/merchandise/cancel/${mid}



5. PUT /v1/egs/merchandise/recover/${mid}





recover time > offtime





[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



status=2



4. assertEquals http 200



verify response_message()



status=4



5. assertEquals http 200



verify response_message()



status=3



auto_reshelve_count=2



auto_reshelve_allowed=5



total_auto_reshelve_count=auto_reshelve_count



total_reshelve_count=0



[[ TC4112 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=5



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. reshelve 2 times



4. PUT /v1/egs/merchandise/cancel/${mid}



5. PUT /v1/egs/merchandise/recover/${mid}



recover time < offtime







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



status=2



4. assertEquals http 200



verify response_message()



status=4



5. assertEquals http 200



verify response_message()



status=2



auto_reshelve_count=2



auto_reshelve_allowed=5



total_auto_reshelve_count=auto_reshelve_count



total_reshelve_count=0



[[ TC4113 ]]




1. SET request_data = required_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->shelve_ip=22001:0db8:85a3:08d3:1319:8a2e:0370:7344



SET request_data->merchandise_data->duration_day=1



SET request_data->merchandise_data->offshelve_tod=current tod + 5



SET request_data->merchandise_data->timezone="Asia/Taipei"



SET request_data->merchandise_data->auto_reshelve_allowed=5



PUT /v1/egs/merchandise/shelve/${mid}?shelve_ip=${shelve_ip}&duration_day=${duration_day}&offshelve_tod=${offshelve_tod}&timezone=${timezone}&auto_reshelve_allowed=${auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/close/${mid}



4. PUT /v1/egs/merchandise/cancel/${mid}



5. PUT /v1/egs/merchandise/recover/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



status=2



3. assertEquals http 200



verify response_message()



status=3



4. assertEquals http 200



verify response_message()



status=4



5. assertEquals http 200



verify response_message()



status=3



auto_reshelve_count=0



auto_reshelve_allowed=0



total_auto_reshelve_count=0



total_reshelve_count=0



[[ TC4114 ]]




2. call submit function with correct merchandise data



3. call shelve_by_mid function with mid， livetime



4. call cancel_by_mid function with mid



5. call get_by_mid function with mid， with_detail=true



6. call recover_by_mid function with mid



7. call get_by_mid function with mid， with_detail=true







Expected Result:



1. construct success



2. return mid success



3. return true



4. return true



5. return merchandise data which status=4



6. return true



7. return merchandise data which status=2



[[ TC4115 ]]




2. call submit function with correct merchandise data



3. call shelve_by_mid function with mid， livetime



4. call delete function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



4. return success



[[ TC4116 ]]




2. call submit function with correct merchandise data



3. call purge_by_mid function with mid







Expected Result:



1. construct success



2. return mid success



3. return true



[[ TC4117 ]]




1. SET request_data->extend_mins = 30



SET mid = null



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4118 ]]




1. SET request_data->extend_mins = 30



SET mid = ''



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4119 ]]




1. SET request_data->extend_mins = 30



SET mid = 'notexist'



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4120 ]]




1. SET extend_mids = null



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4121 ]]




1. SET extend_mids = ''



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4122 ]]




1. SET extend_mids = '~!@#$%^&*()_+{}|":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4123 ]]




1. SET extend_mids = 1



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



[[ TC4124 ]]




1. SET extend_mids = 0



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4125 ]]




1. SET extend_mids = 5256000



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



[[ TC4126 ]]




1. SET extend_mids = 5256001



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4127 ]]




1. SET extend_mids = '10'



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4128 ]]




1. SET extend_mids = array(10)



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4129 ]]




1. SET extend_mids = array('key' => 10)



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4130 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/create_draft







2. SET mid=response->merchandise_data->mid



SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4131 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit







2. SET mid=response->merchandise_data->mid



SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 400



verify error_message()



[[ TC4132 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4133 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. PUT /v1/egs/merchandise/close/${mid}



4. SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 400



verify error_message()



[[ TC4134 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. PUT /v1/egs/merchandise/cancel/${mid}



4. SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 400



verify error_message()



[[ TC4135 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. PUT /v1/egs/merchandise/delete/${mid}



4. SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 400



verify error_message()



[[ TC4136 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. SET request_data->extend_mins = 10



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



no delay



[[ TC4137 ]]




1. SET request_data = required_default



POST /v1/egs/merchandise/submit



2. SET mid=response->merchandise_data->mid



SET duration_day = 1



SET offshelve_tod = 100



SET timezone = 'asia/taipei'



SET auto_reshelve_allowed = 3



SET shelve_ip = 192.168.1.1



PUT /v1/egs/merchandise/shelve/${mid}



3. SET request_data->extend_mins = 11



PUT /v1/egs/merchandise/extend/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



delay one day



[[ TC4138 ]]


   

1. POST /v1/egs/merchandise/mass_cancel/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4139 ]]


   

1. POST /v1/egs/merchandise/mass_cancel_by_aid/?user_update=0



request_data = required data



2.get merchandise







Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4140 ]]


   

1. POST /v1/egs/merchandise/mass_cancel_by_sid/?user_update=0



request_data = required data



2.get merchandise







Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4141 ]]


    1. POST /v1/egs/merchandise/mass_extend/?user_update=0

 request_data = required data

 2.get merchandise



   Expected Result:

 1.verify submit

 http code 200

 status-&gt;code=200

 status-&gt;message="insert ok"

 2.verify get merchandise

 response data-&gt;user_update=0

[[ TC4142 ]]


  

1. POST /v1/egs/merchandise/close/{mid}，{mid}，{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4143 ]]


   

1. POST /v1/egs/merchandise/cancel/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4144 ]]


 

1. POST /v1/egs/merchandise/delete/{mid}，{mid}，{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4145 ]]


  

1. POST /v1/egs/merchandise/shelve/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message="insert ok"



2.verify get merchandise



response data->user_update=0



[[ TC4146 ]]


   

1. POST /v1/egs/merchandise/publish_draft/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4147 ]]


   

1. POST /v1/egs/merchandise/recover/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4148 ]]


  

1. POST /v1/egs/merchandise/extend/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4149 ]]


   

1. POST /v1/egs/merchandise/mass_cancel/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4150 ]]


   

1. POST /v1/egs/merchandise/mass_cancel_by_aid/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4151 ]]


   

1. POST /v1/egs/merchandise/mass_cancel_by_sid/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4152 ]]


   

1. POST /v1/egs/merchandise/mass_extend/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4153 ]]


   

1. POST /v1/egs/merchandise/close/{mid}，{mid}，{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4154 ]]


   

1. POST /v1/egs/merchandise/cancel/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4155 ]]


   

1. POST /v1/egs/merchandise/delete/{mid}，{mid}，{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4156 ]]


   

1. POST /v1/egs/merchandise/shelve/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4157 ]]


  

1. POST /v1/egs/merchandise/publish_draft/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4158 ]]


   

1. POST /v1/egs/merchandise/recover/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4159 ]]


 

1. POST /v1/egs/merchandise/extend/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4160 ]]


   

1. POST /v1/egs/merchandise/mass_cancel/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4161 ]]


  

1. POST /v1/egs/merchandise/mass_cancel_by_aid/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4162 ]]


  

1. POST /v1/egs/merchandise/mass_cancel_by_sid/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4163 ]]


   

1. POST /v1/egs/merchandise/mass_extend/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4164 ]]


  

1. POST /v1/egs/merchandise/close/{mid}，{mid}，{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4165 ]]


  

1. POST /v1/egs/merchandise/cancel/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4166 ]]


   

1. POST /v1/egs/merchandise/delete/{mid}，{mid}，{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4167 ]]


  

1. POST /v1/egs/merchandise/shelve/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4168 ]]


  

1. POST /v1/egs/merchandise/publish_draft/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4169 ]]


   

1. POST /v1/egs/merchandise/recover/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4170 ]]




1. POST /v1/egs/merchandise/extend/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4172 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bidding merchandise and get $mid

2. shelve the bidding merchandise and get offtime

3. execute mass_extend set 'extend_mins' = 1

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="bid"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 1

  } 

    ]

4. execute mass_extend set 'extend_mins' = 5256000

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="bid"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 5256000

  } 

    ]

  

Expected Results 

========== 

1.1-4.1 http respons code is 200

2.2  veriy merchandise is shelve

3.2-4.2 veriy bid merchandise offtime is expect 



[[ TC4173 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bidding merchandise and get $mid

2. shelve the bidding merchandise and get offtime

3. execute mass_extend set 'extend_mins' = 0

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="bid"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 0

  } 

    ]

4. execute mass_extend set 'extend_mins' = 5256011

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="bid"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 5256011

  } 

    ]

  

Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-4.1 http respons code is 400

verify respons.message

[[ TC4174 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend unset 'mtype' 

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，unset 'ccode' 



5. execute mass_extend set mtype='bid' ， unset 'property' 

 

6. execute mass_extend set mtype='bid' ， unset 'extend_mins' 



7. execute mass_extend set mtype='bid' ， unset 'mid' 



8. execute mass_extend set mtype='bid' ， unset 'mass_data' 



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-8.1 http respons code is 400

verify respons.message

[[ TC4175 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = ""

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="!@#"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = ""



5. execute mass_extend set mtype='bid' ，'property' = ""

 

6. execute mass_extend set mtype='bid' ，'extend_mins' = ""



7. execute mass_extend set mtype='bid' ，'mid' = ""



8. execute mass_extend set mtype='bid' ，'mass_data' = ""



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-8.1 http respons code is 400

verify respons.message

[[ TC4176 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = "string"

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="!@#"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = "string"



5. execute mass_extend set mtype='bid' ，'property' = "string"

 

6. execute mass_extend set mtype='bid' ，'extend_mins' = "string"



7. execute mass_extend set mtype='bid' ，'mass_data' = "string"



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-7.1 http respons code is 400

verify respons.message

[[ TC4177 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = array('a'=>'string')

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="!@#"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = array('a'=>'string')



5. execute mass_extend set mtype='bid' ，'property' = array('a'=>'string')

 

6. execute mass_extend set mtype='bid' ，'extend_mins' = array('a'=>'string')



7. execute mass_extend set mtype='bid' ，'mass_data' = array('a'=>'string')



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-7.1 http respons code is 400

verify respons.message

[[ TC4178 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = array(123)

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="!@#"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = array(123)



5. execute mass_extend set mtype='bid' ，'property' = array(123)

 

6. execute mass_extend set mtype='bid' ，'extend_mins' = array(123)



7. execute mass_extend set mtype='bid' ，'mass_data' = array(123)



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-7.1 http respons code is 400

verify respons.message

[[ TC4179 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = "測"

&nbsp;request_data-&gt;ccode="tw"

 request_data-&gt;property="auction"

 request_data-&gt;mtype="!@#"

 request_data-&gt;mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = "測"



5. execute mass_extend set mtype='bid' ，'property' = "測"



6. execute mass_extend set mtype='bid' ，'extend_mins' = "測"



Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-6.1 http respons code is 400

verify respons.message

[[ TC4180 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bid merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = "!@#"

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="!@#"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

4. execute mass_extend set mtype='bid' ，'ccode' = "!@#"



5. execute mass_extend set mtype='bid' ，'property' = "!@#"

 

6. execute mass_extend set mtype='bid' ，'extend_mins' = "!@#"

 

Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-6.1 http respons code is 400

verify respons.message

[[ TC4181 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a baisc merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' = bid

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="bid"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

  

Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-4.1 http respons code is 400

verify respons.message

[[ TC4182 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a bidding merchandise and get $mid

2. shelve the bidding merchandise and get offtime

3. execute mass_extend set 'mtype' = basic

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="basic"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

  

Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-4.1 http respons code is 400

verify respons.message

[[ TC4183 ]]


==========  

A.

   URI Syntax: /v1/egs/merchandise/mass_extend/?user_update=

   method: PUT

   

Testing Steps: 

==========

1. submit a baisc merchandise and get $mid

2. shelve the merchandise and get offtime

3. execute mass_extend set 'mtype' not exist

    request_data->ccode="tw"

 request_data->property="auction"

 request_data->mtype="abcd123"

 request_data->mass_data=[

  {

  "mid": $mid，

  "extend_mins": 30

  } 

    ]

  

Expected Results 

========== 

1.1-2.1 http respons code is 200

3.1-4.1 http respons code is 400

verify respons.message

[[ TC4184 ]]


 

URI syntax: v1/egs/merchandise/mass_extend/?user_update=



Request Method:PUT





request_data->ccode="tw"



request_data->property="auction"



request_data->mtype="bid"



request_data->mass_data=[



{



"merchandise_data": {



"mid": {$mid}，



"extend_mins": 30



}

 

}



]







Expected Result:



1.http response 200



2.response json format



status->code=200



status->message="extend merchandises ok"



[[ TC4185 ]]




URI syntax: v1/egs/merchandise/mass_extend/?user_update=



Request Method:PUT





request_data->ccode="tw"



request_data->property="auction"



request_data->mtype="bid"



request_data->"mass_data": [



            {



                "mid": "000005475627"，



                "extend_mins": 30



            }，



            {



                "mid": "000005475628"，



                "extend_mins": 30



            }，



            {



                "mid": "000005475629"，



                "extend_mins": 30



            }



        ]







Expected Result:



1.http response 200



2.response json format



status->code=200



status->message="extend merchandises ok"



[[ TC4186 ]]




URI syntax: v1/egs/merchandise/mass_extend/?user_update=



Request Method:PUT







1.get merchandise



2.request_data->ccode="tw"



request_data->property="auction"



request_data->mtype="bid"



request_data->mass_data=[



{



"merchandise_data": {



"mid": {$mid}，



"extend_mins": 30



}



}



]







Expected Result:



1.http response 200



status->code=200



status->message="extend merchandises ok"



2.verify get merchandise



response data->user_update=0



[[ TC4187 ]]




URI syntax: v1/egs/merchandise/mass_extend/?user_update=



Request Method:PUT







1.get merchandise



2.request_data->ccode="tw"



request_data->property="auction"



request_data->mtype="bid"



request_data->mass_data=[



{



"merchandise_data": {



"mid": {$mid}，



"extend_mins": 30



}

 

}



]







Expected Result:



1.http response 200



status->code=200



status->message="extend merchandises ok"



2.verify get merchandise



response data->user_update=1



[[ TC4197 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and price

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='123.00'

3. get price

 

Expected Results 

========== 

1.1-3.1 http response code is 200

2.2  verify response message

3.2 verify fix_price value





[[ TC4198 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='123.00'

3. get price

4. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='110.00'

5. get price

Expected Results 

========== 

1.1-5.1 http response code is 200

2.2/4.2  verify response message

3.2/5.2 verify fix_price value





[[ TC4199 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='123.ab'



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400



[[ TC4200 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&amp;fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&amp;fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data-&gt;fix_price='測'



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400

[[ TC4201 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&amp;fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&amp;fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data-&gt;fix_price='1234567890123.123'

3. update price with tree_id， timeframe， cat_id， fee_code

&nbsp;set request_data-&gt;fix_price='-100.00'

4. update price with tree_id， timeframe， cat_id， fee_code

&nbsp;set request_data-&gt;fix_price='0.00'

Expected Results 

========== 

1.1 http response code is 200

2.1-3.1 http response code is 400

[[ TC4202 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price=''

3. get price



Expected Results 

========== 

1.1-3.1 http response code is 200

2.2 verify response message

3.2 verify fix_price value





[[ TC4203 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='abcdwer'



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400



[[ TC4204 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price=array('a'=>123)



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400



[[ TC4205 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price=array(123)



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400



[[ TC4206 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)

(get price) GET /v1/egs/category_pricing/get/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

URI Syntax: /v1/egs/category_pricing/update/{tree_id}/{cat_id}?timeframe={timeframe}&fee_code={fee_code}

method: PUT 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. update price with tree_id， timeframe， cat_id， fee_code

 set request_data->fix_price='!@#'



Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 400



[[ TC4207 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. query price with tree_id， timeframe， cat_id， fee_code and qty>0

 

Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify calu_price = fix_price*(1-discount)



[[ TC4208 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)



URI Syntax: /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=

method: GET 

   

Testing Steps: 

==========

1. insert price with tree_id， timeframe， cat_id， fee_code and fix_price= '100.00'

2. batch query price with tree_id， timeframe， cat_id， fee_code and qty>0

 

Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify calu_price = fix_price*(1-discount)



[[ TC4209 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST

 1 . request_data-&gt;tree_id=12345 

request_data-&gt;timeframe='1313144924' 

request_data-&gt;cat_id='12345' 

request_data-&gt;fee_code='lf10' 

request_data-&gt;price=3456789 

2 . set&nbsp; request_data-&gt;fixed_price='100.00'

3.get price



  Expected Result:

 1.1-3.1 http response code is 200

&nbsp;2.2 check status code and correct

&nbsp; status-&gt;code=200

3.2 verify fixed_price value

<span style="display: table; width: 100%; table-layout: fixed; height: 100%;"><span style="display: table; width: 100%; table-layout: fixed;"></span></span>

[[ TC4210 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST

<span style="display: table; width: 100%; table-layout: fixed; height: 100%;"><span style="display: table; width: 100%; table-layout: fixed;">1 . request_data-&gt;tree_id=12345 

request_data-&gt;timeframe='1313144924' 

request_data-&gt;cat_id='12345' 

request_data-&gt;fee_code='lf10' 

request_data-&gt;price=3456789 

request_data-&gt;fixed_price='100.00'

2.set request_data-&gt;fixed_price='123.abc'



Expected Result:

1.1 http response code is 200

1.2 check status code and correct

status-&gt;code=200

2.1 http respon code is 400</span></span>

[[ TC4212 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price='測'



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200

 2.1 http respon code is 400

[[ TC4213 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price='11111111111111111111.123'



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200

 2.1 http respon code is 400

[[ TC4214 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price=' '



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200

 2.1 http respon code is 400

[[ TC4215 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price='abcd'



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200 

 2.1 http respon code is 400

[[ TC4216 ]]


  URI syntax: /v1/egs/category_pricing/insert

  Request Method:POST

 

   1 . request_data-&gt;tree_id=12345

  request_data-&gt;timeframe='1313144924'

  request_data-&gt;cat_id='12345'

  request_data-&gt;fee_code='lf10'

  request_data-&gt;price=3456789

  request_data-&gt;fixed_price='100.00'

  2.set request_data-&gt;fixed_price = array('a'=&gt;100)

 

   Expected Result:

  1.1 http response code is 200

  1.2 check status code and correct

  status-&gt;code=200 

  2.1 http respon code is 400

[[ TC4217 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price = array(100)



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200 

 2.1 http respon code is 400

[[ TC4218 ]]


 URI syntax: /v1/egs/category_pricing/insert

 Request Method:POST



  1 . request_data-&gt;tree_id=12345

 request_data-&gt;timeframe='1313144924'

 request_data-&gt;cat_id='12345'

 request_data-&gt;fee_code='lf10'

 request_data-&gt;price=3456789

 request_data-&gt;fixed_price='100.00'

 2.set request_data-&gt;fixed_price = '!@#$%'



  Expected Result:

 1.1 http response code is 200

 1.2 check status code and correct

 status-&gt;code=200

 2.1 http respon code is 400

[[ TC4272 ]]




URI syntax: /v1/egs/category_pricing/insert



Request Method:POST







1 . request_data->tree_id=12345



request_data->timeframe='1313144924'



request_data->cat_id='12345'



request_data->fee_code='lf10'



request_data->price=3456789



request_data->fixed_price='100.00'



2.set request_data->fixed_price = 0







Expected Result:



1.1 http response code is 200



1.2 check status code and correct



status->code=200



2.1 http respon code is 400 



[[ TC4344 ]]


request-&gt;sid=null



2. POST /v1/egs/merchandise/submit

request-&gt;aid=null

3. POST /v1/egs/merchandise/submit

request-&gt;mtype=null

4. POST /v1/egs/merchandise/submit

request-&gt;ccode=null

5. POST /v1/egs/merchandise/submit

request-&gt;property=null

6. POST /v1/egs/merchandise/submit

request-&gt;category=null

7. POST /v1/egs/merchandise/submit

request-&gt;title=null

8. POST /v1/egs/merchandise/submit

request-&gt;descs=null

9. POST /v1/egs/merchandise/submit

request-&gt;location=null

10. POST /v1/egs/merchandise/submit

request-&gt;currency=null

11. POST /v1/egs/merchandise/submit

request-&gt;price=null

12. POST /v1/egs/merchandise/submit

request-&gt;email=null

13. POST /v1/egs/merchandise/submit

request-&gt;phone=null

14. POST /v1/egs/merchandise/submit

request-&gt;ym=null

15. POST /v1/egs/merchandise/submit

request-&gt;cat_attr=null

16. POST /v1/egs/merchandise/submit

request-&gt;index_cust_data=null

17. POST /v1/egs/merchandise/submit

request-&gt;latlong=null

18. POST /v1/egs/merchandise/submit

request-&gt;img_profile=null

19. POST /v1/egs/merchandise/submit

request-&gt;duration_day=null

20. POST /v1/egs/merchandise/submit

request-&gt;offshelve_tod=null

21. POST /v1/egs/merchandise/submit

request-&gt;timezone=null

22. POST /v1/egs/merchandise/submit

request-&gt;auto_reshelve_allowed=null

23. POST /v1/egs/merchandise/submit

request-&gt;cust_category=null





Expected Result:

1.1 - 23.1 verify http code

1.2 - 23.2response json format

[[ TC4345 ]]


&nbsp;unset request-&gt;sid



2. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;aid

3. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;mtype

4. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;ccode

5. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;property

6. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;category

7. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;title

8. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;descs

9. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;location

10. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;currency

11. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;price

12. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;email

13. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;phone

14. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;ym

15. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;cat_attr

16. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;index_cust_data

17. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;latlong

18. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;img_profile

19. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;duration_day

20. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;offshelve_tod

21. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;timezone

22. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;auto_reshelve_allowed

23. POST /v1/egs/merchandise/submit

&nbsp;unset request-&gt;cust_category





Expected Result:

1.1 - 23.1 verify http code

1.2 - 23.2response json format

[[ TC4346 ]]


request->sid is varchar(129)



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4347 ]]


request->sid='!@##$%^&*()_+{}:""|<>?/.，\';][=-`'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4348 ]]


request-&gt;sid='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'



Expected Result:

1. http response 200

response json format

status-&gt;code=200

status-&gt;message=""success""

[[ TC4349 ]]


request-&gt;sid=""



Expected Result:

1. http response 400

response json format

status-&gt;code=400

status-&gt;message=""invalid parameter""

[[ TC4350 ]]


request-&gt;sid='測'



Expected Result:

1. http response 200

response json format

status-&gt;code=200

status-&gt;message="success"

[[ TC4351 ]]


request-&gt;aid='測'



Expected Result:

1. http response 200

response json format

status-&gt;code=200

status-&gt;message="success"

[[ TC4352 ]]


request->mtype=""!@##$%^&*()_+{}:""|<>?/.，\';][=-`""



Expected Result:

1. http response 400

response json format

status->code=400

[[ TC4353 ]]


request->mtype=""basic""



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4354 ]]


request->mtype=""notbasic""



Expected Result:

1. http response 400

response json format

status->code=400

[[ TC4355 ]]


request->title is varchar(128) ????+????



Expected Result:

1. http response 200

response json format

status->code=200

status->message="cess"""de=

[[ TC4356 ]]


request->location=""!@##$%^&*()_+{}:""|<>?/.，\';][=-`""



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4357 ]]


request->location is varchar(128) ????+????



Expected Result:

1. http response 200

response json format

status->code=200

status->message="cess""2200

[[ TC4358 ]]


request->currency is varchar(10) ????+????



Expected Result:

1. http response 200

response json format

status->code=200

status->message="cess"""220

[[ TC4359 ]]


request->price is varchar(128) ????+????



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4360 ]]


request->price=??0.00??



Expected Result:

1. http response 200

response json format

status->code=200

status->message="uccess""ss

[[ TC4361 ]]


request->price=??999999999999.99??



Expected Result:

1. http response 200

response json format

status->code=200

status->message="uccess"""e

[[ TC4362 ]]


request->price=??-0.01??



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4363 ]]


request->price=??9999999999999999.00??



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4364 ]]


request->email is varchar(128)





Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4365 ]]


request->phone is varchar(20)



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""



[[ TC4366 ]]


request->ym is varchar(128)



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4367 ]]


request->merchandise_data['image_data'] = "http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg"，"http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.css"

(invaild)



Expected Result:

1. http response 500



[[ TC4368 ]]


request->merchandise_data['image_data'] = null



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

[[ TC4369 ]]


request->merchandise_data['image_data'] set notexist



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

[[ TC4370 ]]


request->merchandise_data['image_data'] = "http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg"



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

[[ TC4371 ]]


request->merchandise_data['image_data'] = "http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-1.jpg"，"http://safeplay.yahoofs.com/aicTrial/d2/34/m93845-ci_test-4408-2.png"



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

[[ TC4372 ]]


request->merchandise_data['cat_attr'] = array(

        ""ROOM_TYPE"" => ""23000_ROOM_TYPE_A""，

        ""ROOM_SIZE"" => array(""23000_ROOM_SIZE_B""，""23000_ROOM_SIZE_C"")

        )



Expected Result:

1. http response 200

response json format

status->code=200

status->message="success"

[[ TC4373 ]]


request->merchandise_data['cat_attr'] = """"ROOM_TYPE => 23000_ROOM_TYPE_A""""



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4374 ]]


request->merchandise_data['cat_attr'] = 999999999



Expected Result:

1. http response 400

response json format

status->code=400



[[ TC4375 ]]


request->merchandise_data['cat_attr'] = array(

        ""ROOM_TYPE"" => ""23000_ROOM_TYPE_A""，

        ""ROOM_SIZE"" => array(""23000_ROOM_SIZE_B""，""23000_ROOM_SIZE_C"")

        );

merchandise_data['cat_attr']['ROOM_SIZE'] is varchar(65487)



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""



[[ TC4376 ]]


set request_data->merchandise_data=default data



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2， verify resp_json['response_data']['merchandise_data']['status']=1

[[ TC4377 ]]


1. Upload 1，2 image

2. Get merchanidse



Expected Result:

1， 2 image is correct order

[[ TC4378 ]]


1. Upload 1，2 image

2. Upload 1，3 image

3. Get merchandise



Expected Result:

get 1，3 image， and 2 image is delete

[[ TC4379 ]]


1. Upload 1，2 image

2. delete 1，2 image

3. get merchandise



Expected Result:

get no image information

[[ TC4380 ]]


1. Upload 1，2 image

2. Upload 2，3 image

3. Get merchandise



Expected Result:

get 2，3 image and 1 image is delete

[[ TC4381 ]]


request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4382 ]]


request->cust_data = {""~!@#$%^&*()_+{}|"":<>?/.，\';][=-"": ""~!@#$%^&*()_+{}|"":<>?/.，\';][=-""， ""key2"": ""value2""}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4383 ]]


request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}(max length = 65535)



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4385 ]]


request->mass_cust_data = {""key1"": ""value1""， ""key2"": ""value2""}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4386 ]]


request->price_type=0



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4387 ]]


request->price_type=1



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4388 ]]


request->price_type=2



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4389 ]]


request->price_type=3



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4390 ]]


request->price_type=-1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4391 ]]


request->price_type=1.2



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4392 ]]


request->price_type={key1: value1， key2: value2}



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4393 ]]


request->price_type=[value1， value2]



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4394 ]]


request->price=1000

request->price_type=0



Expected Result:

1. http response 200

response json format

status->code=200

tatus->message=""success""

[[ TC4395 ]]


request->index_cust_data=[value1， value2]

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC4396 ]]


request->index_cust_data={ ""key1，key2"": ""value1""}



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4397 ]]


request->index_cust_data={ ""key1"": ""value1， value2""}

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC4398 ]]






Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

check ptime <= mtime

[[ TC4399 ]]


request_data->aid=nevec_user_1#oh



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

[[ TC4400 ]]


request_data->aid=nevec_user_1oh



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4401 ]]


request_data->latlong='N60.123W90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4402 ]]


request_data->latlong='60.123;W90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4403 ]]


request_data->latlong='N90;W90.123'

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC4404 ]]


request_data->latlong='N90.000001;W90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC4405 ]]


request_data->latlong='N90.123;W180'

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC4406 ]]


request_data->latlong='N90.123;W180.000001'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC4407 ]]


2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1. http response 200

response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

merchandise data is correct

[[ TC4408 ]]


request_data->latlong='N90.1234567;W90.1234567'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC4409 ]]


request_data->latlong='A60.123;E90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4410 ]]


request_data->latlong='N60.123;A90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4411 ]]


request_data->latlong='E60.123;N90.123'



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter"""



[[ TC4412 ]]


request_data->merchandise_data->duration_day = 1.01

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4413 ]]


request_data->merchandise_data->duration_day = -1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4414 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct

[[ TC4415 ]]


request_data->merchandise_data->offshelve_tod = -1

request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4416 ]]


request_data->merchandise_data->offshelve_tod = 1.01

request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4417 ]]


request_data->merchandise_data->offshelve_tod = 0

request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4418 ]]


request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC4419 ]]


request_data->merchandise_data->duration_day = 0

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei1

request_data->merchandise_data->auto_reshelve_allowed = 1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4420 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC4421 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = ASIA/TAIPEI

request_data->merchandise_data->auto_reshelve_allowed = 1



1. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC4422 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = asia/taipei

request_data->merchandise_data->auto_reshelve_allowed = 1



1. http response 400

response json format

status->code=400

status->message=""invalid parameter""



[[ TC4423 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1.01



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4424 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = -1



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4425 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC4426 ]]


request_data->merchandise_data->duration_day = 0

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 1

2. GET /v1/egs/merchandise/get_detail/{mid}



Expected Result:

1.1 http response 200

1.2 response json format

status->code=200

status->message=""success""

2.1 http response 200

2.2 response json format

status->code=200

status->message=""success""

data is correct



[[ TC4427 ]]


request_data->merchandise_data->duration_day = 1

request_data->merchandise_data->offshelve_tod = 1

request_data->merchandise_data->timezone = Asia/Taipei

request_data->merchandise_data->auto_reshelve_allowed = 0



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4428 ]]


request_data->aid=nevec_user_1#ohh



Expected Result:

1. http response 400

response json format

status->code=400

status->message=""invalid parameter""

[[ TC4429 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(null， 10)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4430 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(''， 10)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4431 ]]


1. SET request_data = optional_default()

UNSET request_data->merchandise_data->remind_notify_minute

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

[[ TC4432 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('~!@#$%^&*()_+{}|"":<>?/.，\';][=-`'， 10)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4433 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(5)

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

[[ TC4434 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array(4)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4435 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = 10

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4436 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = '10'

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4437 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('10')

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4438 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('key' => 10)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4439 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->remind_notify_minute = array('key' => '10')

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4440 ]]


1. SET request_data = optional_default()

SET request_data->merchandise_data->price = ""1234.ab""

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 verify error_message()

[[ TC4441 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = null

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4442 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = ''

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4443 ]]


1. SET request_data = optinal_default

UNSET request_data->merchandise_data->page_view

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

[[ TC4444 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4445 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = 2147483646

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()



[[ TC4446 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = 2147483646.01

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid length'

[[ TC4447 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = 0

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()



[[ TC4448 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = -1

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid length'

[[ TC4449 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = 1000.01

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid length'

[[ TC4450 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = 65536

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()



[[ TC4451 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = ""65536""

POST /v1/egs/merchandise/submit

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

[[ TC4452 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = array(""65536""， ""0"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4453 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->page_view = array(""key1""=>""65536""， ""key2""=>""0"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4454 ]]


1. Upload 1，2，3 image

2. Upload 1，3 image

3. Get merchandise



Expected Result:

get 1，3 image and 2 image is delete

[[ TC4455 ]]


1. SET request_data = optinal_default

SET request_data->merchandise_data->qna_weekly = array(1)， array('key' => 0)

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

 assertEquals status->code = '10'

 assertEquals status->message = 'invalid format'

[[ TC4456 ]]


1. SET request_data = required_default

SET skip_cat_attr = 1

UNSET cat_attr[""ROOM_TYPE""]

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4457 ]]


1. SET request_data = required_default

SET skip_cat_attr = 0

UNSET cat_attr[""ROOM_TYPE""]

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4458 ]]


1. SET request_data = required_default

SET skip_cat_attr = true

UNSET cat_attr[""ROOM_TYPE""]

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4459 ]]


1. SET request_data = required_default

SET skip_cat_attr = false

UNSET cat_attr[""ROOM_TYPE""]

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()

[[ TC4460 ]]


1. SET request_data = required_default

SET skip_cat_attr = 1

SET cat_attr[""ROOM_TYPE_1""]=""a123456789b123456789c123456789d""

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4461 ]]


1. SET request_data = required_default

SET skip_cat_attr = 0

SET cat_attr[""ROOM_TYPE_1""]=""a123456789b123456789c123456789d""

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4462 ]]


1. SET request_data = required_default

SET skip_cat_attr =true

SET cat_attr[""ROOM_TYPE_1""]=""a123456789b123456789c123456789d""

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4463 ]]


1. SET request_data = required_default

SET skip_cat_attr = false

SET cat_attr[""ROOM_TYPE_1""]=""a123456789b123456789c123456789d""

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4464 ]]


1. SET request_data = required_default

SET skip_cat_attr = 1

SET cat_attr[""ROOM_SIZE""]=array(""23000_ROOM_SIZE_B""， ""23000_ROOM_SIZE_D"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4465 ]]


1. SET request_data = required_default

SET skip_cat_attr = 0

SET cat_attr[""ROOM_SIZE""]=array(""23000_ROOM_SIZE_B""， ""23000_ROOM_SIZE_D"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4466 ]]


1. SET request_data = required_default

SET skip_cat_attr = true

SET cat_attr[""ROOM_SIZE""]=array(""23000_ROOM_SIZE_B""， ""23000_ROOM_SIZE_D"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4467 ]]


1. SET request_data = required_default

SET skip_cat_attr = false

SET cat_attr[""ROOM_SIZE""]=array(""23000_ROOM_SIZE_B""， ""23000_ROOM_SIZE_D"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4468 ]]


1. SET request_data = required_default

SET skip_cat_attr = 1

SET cat_attr[""ROOM_SIZE_1""]=array(""23000_ROOM_SIZE_1_B""， ""23000_ROOM_SIZE_1_C"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4469 ]]


1. SET request_data = required_default

SET skip_cat_attr = 0

SET cat_attr[""ROOM_SIZE_1""]=array(""23000_ROOM_SIZE_1_B""， ""23000_ROOM_SIZE_1_C"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4470 ]]


1. SET request_data = required_default

SET skip_cat_attr = true

SET cat_attr[""ROOM_SIZE_1""]=array(""23000_ROOM_SIZE_1_B""， ""23000_ROOM_SIZE_1_C"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 200



[[ TC4471 ]]


1. SET request_data = required_default

SET skip_cat_attr = false

SET cat_attr[""ROOM_SIZE_1""]=array(""23000_ROOM_SIZE_1_B""， ""23000_ROOM_SIZE_1_C"")

POST /v1/egs/merchandise/submit



[Expected Result]

1. assertEquals http 400

verify error_message()



[[ TC4472 ]]


1. SET request_data = required_default() 

set aid without encrypting 

POST /v1/egs/merchandise/submit 

2. SET request_data = required_default() 

set email without encrypting 

POST /v1/egs/merchandise/submit 

3. SET request_data = required_default() 

set phone without encrypting 

POST /v1/egs/merchandise/submit 

4. SET request_data = required_default() 

set ym without encrypting 

POST /v1/egs/merchandise/submit 



[Expected Result] 

1. assertEquals http 400 

verify error_message() 

2. assertEquals http 400 

verify error_message()  

3. assertEquals http 400 

verify error_message()  

4. assertEquals http 400 

verify error_message()

[[ TC4473 ]]


1. SET request_data = required_default() 

set aid without encrypting 

POST /v1/egs/merchandise/submit 

2. SET request_data = required_default() 

set email without encrypting 

POST /v1/egs/merchandise/submit 

3. SET request_data = required_default() 

set phone without encrypting 

POST /v1/egs/merchandise/submit 

4. SET request_data = required_default() 

set ym without encrypting 

POST /v1/egs/merchandise/submit 



[Expected Result] 

1. assertEquals http 200 

verify response_message() 

2. assertEquals http 200 

verify response_message()  

3. assertEquals http 200 

verify response_message()  

4. assertEquals http 200 

verify response_message()

[[ TC4474 ]]


1. SET request_data = required_default() 

set aid with encrypting 

POST /v1/egs/merchandise/submit 

2. SET request_data = required_default() 

set email with encrypting 

POST /v1/egs/merchandise/submit 

3. SET request_data = required_default() 

set phone with encrypting 

POST /v1/egs/merchandise/submit 

4. SET request_data = required_default() 

set ym with encrypting 

POST /v1/egs/merchandise/submit 



[Expected Result] 

1. assertEquals http 400 

verify error_message() 

2. assertEquals http 400 

verify error_message()  

3. assertEquals http 200 

verify response_message()  

4. assertEquals http 400 

verify error_message()

[[ TC4475 ]]


1. POST /v1/egs/merchandise/submit/?user_update=0

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status->code=200

status->message=""insert ok""

2.verify get merchandise

response data->user_update=0

[[ TC4476 ]]


1. POST /v1/egs/merchandise/submit/?user_update=1

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status->code=200

status->message=""insert ok""

2.verify get merchandise

response data->user_update=1

[[ TC4477 ]]


1. POST /v1/egs/merchandise/submit/?user_update=

request_data = required data

2.get merchandise





Expected Result:

1.verify submit

http code 200

status->code=200

status->message=""insert ok""

2.verify get merchandise

response data->user_update=0

[[ TC4478 ]]


1.Submit merchandise x 5 

2. queryVql(""search?query=(+title:'.$title.'+)&sorting=+user_mtime"");



Expected Result:

1. total x 5

2 assertEquals user_mtime

[[ TC4479 ]]


1. Submit 5 merchandise

request_data->user_update=1

request_data->title=""merchandise""

1. Search  merchandise by title ，and Set sorting=-user_mtime

Expected Result:

1. http response 200

2.Verfiy User Mtime Sort Decreasing

[[ TC4480 ]]


========== 

1.create 2 different products with required parameters(have model)

2. publish the 2 products



[Step]

1. SET request_data = optinal_default

SET request_data->merchandise_data->product_ids is right list

POST /v1/egs/merchandise/submit/?user_update={0，1} 

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

verify Json schema

[[ TC4481 ]]


1. SET request_data = optinal_default



POST /v1/egs/merchandise/submit/?user_update={0，1} 

2. SET mid = result_data->response_data->mid

GET /v1/egs/merchandise/get/${mid}



[Expected Result]

1. assertEquals http 200

 verify response_message()

2. assertEquals http 200

 verify response_message()

verify Json schema

[[ TC4482 ]]


==========

URI Syntax: /v1/egs/merchandise/submit/?user_update={0，1}



Testing Steps:

==========

1. Submit merchandise(Post) with required parameters+

index_cust_field1-5

cust_field1-5

2. Get merchandise detail(Get)



Expected Results ==========

1.Http Response Code is 200

2.Status code is 200

3.Response data->message=""insert ok""

4.Get index_cust_field1-5 = Insert index_cust_field1-5 and cust_field1-5=insert cust_field1-5

5.verify Json schema

[[ TC4483 ]]


==========

URI Syntax: /v1/egs/merchandise/submit/?user_update={0，1}



Testing Steps:

==========

1. Submit merchandise(Post) with required parameters+

index_cust_field1=""iphone 5""

2. Search this merchandise by search require parameters+index_cust_field1=""iphone 5""



Expected Results ==========

verify the merchandise can be searched.

[[ TC4484 ]]


==========

URI Syntax: /v1/egs/merchandise/submit/?user_update={0，1}



Testing Steps:

==========

1. Submit merchandise(Post) with required parameters+

index_cust_field1=????

index_cust_field2=????

index_cust_field3=????

index_cust_field4=????

index_cust_field5=????

cust_field1=????

cust_field2=????

cust_field3=""""""

cust_field5=""""

2. Get merchandise detail(Get)



Expected Results ==========

1.Http Response Code is 200

2.Status code is 200

3.Response data->message=""insert ok""

4.Get index_cust_field1-5= ???? and cust_field1-5=""5.verify Json schema  response_messa

[[ TC4485 ]]


==========

URI Syntax: /v1/egs/merchandise/submit/?user_update={0，1}



Testing Steps:

==========

1. Submit merchandise(Post) with required parameters



Expected Results ==========

1.Http Response Code is 200

2.Status code is 200

3.Response data->message=""insert ok""

4.verify Json schema

[[ TC4486 ]]


==========

URI Syntax: /v1/egs/merchandise/submit/?user_update={0，1}



Testing Steps:

==========

1. Submit merchandise(Post) with required parameters+index_cust_field1

index_cust_field1=??var(1025)??

2. Submit merchandise(Post) with required parameters+index_cust_field2

index_cust_field2=""r(1025)??

3. Submit merchandise(Post) with required parameters+index_cust_field3

index_cust_field3=??var(1025)??

4. Submit merchandise(Post) with required parameters+index_cust_field4

index_cust_field4=??var(1025)??

5. Submit merchandise(Post) with required parameters+index_cust_field5

index_cust_field5=??var(1025)??

6. Submit merchandise(Post) with required parameters+cust_field1

cust_field1=??var(1025)??

7. Submit merchandise(Post) with required parameters+cust_field2

cust_field2=??var(1025)??

8. Submit merchandise(Post) with required parameters+cust_field3

cust_field3=??var(1025)??

9. Submit merchandise(Post) with required parameters+cust_field4

cust_field4="". Submit merchandise(Post) with required parameters+cust_field5

cust_field5=??var(1025)??



Expected Results ==========

1.Verify the 10 times Http Response Code is 400

2.verify Json schema

[[ TC4487 ]]


1. submit merchandise 1 with title="merchandisedistancetest" and latlong="N63;W93"

2. submit merchandise 2 with title="merchandisedistancetest" and latlong="N62;W92"

3. submit merchandise 3 with title="merchandisedistancetest" and latlong="N61;W91"

4. query_by_vql="search?query=(+title:'merchandisedistancetest'+)&pos.ll=N60;W90&pos.radius=300km&ranking.profile=distance_asc"



VERIFY:

1. query result total=2

2. latlong_pos.distance of 1st result is less than of 2nd result， ret["result"][$i]["latlong_pos.distance"] < $ret["result"][$i+1]["latlong_pos.distance"]



[[ TC4488 ]]


1. submit merchandise 1 with title="merchandisedistancetest" and latlong="N63;W93"

2. submit merchandise 2 with title="merchandisedistancetest" and latlong="N62;W92"

3. submit merchandise 3 with title="merchandisedistancetest" and latlong="N61;W91"

4. query_by_vql="search?query=(+title:'merchandisedistancetest'+)&pos.ll=N60;W90&pos.radius=400km&ranking.profile=distance_asc"



VERIFY:

1. query result total=3

2. latlong_pos.distance of 1st result is less than of 2nd result， ret["result"][0]["latlong_pos.distance"] < $ret["result"][1]["latlong_pos.distance"]

3. latlong_pos.distance of 2nd result is less than of 3rd result， ret["result"][1]["latlong_pos.distance"] < $ret["result"][2]["latlong_pos.distance"]



[[ TC4489 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = [""1""，""2""...，""200""]

2. Get Merchandise(Get) by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""success""



2.1 http response code is 200

2.2 check response_data->merchandise_data->cust_category =[""1""，""2""...，""200""]

[[ TC4490 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = [""1""，""2""...，""201""]



Expected Results 

========== 

1. http response code is 400

[[ TC4491 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET Json_encode(request_data->cust_category) length is 3200

2. Get Merchandise(Get) by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""success""



2.1 http response code is 200

2.2 check response_data->merchandise_data->cust_category = insert data

[[ TC4492 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET Json_encode(request_data->cust_category) length is 3201

Expected Results 

========== 

1. http response code is 400

[[ TC4493 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=<span style="">

Get: /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

  SET request_data-&gt;cust_category = []

2. Get Merchandise(Get) by mid



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=400

status-&gt;message=""success""



2.1 http response code is 400

2.2 check response_data-&gt;merchandise_data-&gt;cust_category = null &nbsp;( rule ?????????S???? )





</span>

[[ TC4494 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = '1234'



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=1

status->message='request is not array'



[[ TC4495 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = [1234]



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=1

status->message='request is not array'



[[ TC4496 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = ['0']

2. Get Merchandise(Get) by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""success""



2.1 http response code is 200

2.2 check response_data->merchandise_data->cust_category = ['0']

[[ TC4497 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=

Get:  /v1/egs/merchandise/get/



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

    SET request_data->cust_category = ['-1']

2. Get Merchandise(Get) by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""success""



2.1 http response code is 200

2.2 check response_data->merchandise_data->cust_category = ['-1']

[[ TC4498 ]]


1. POST /v1/egs/merchandise/submit

2. set_merchandise_cust_category_data

3. search_by_vql



Expected Result:

1. http response 200

response json format

2.status->code=200

3.total=1

4.mid=insert Mid

5.cust_category[1]=456

[[ TC4499 ]]


submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}



Step: 

1.  submit a merchandise(POST) and get mid

    set duration_day=""""

    set offshelve_tod=""""

    set  timezone=""""

    set auto_reshelve_allowed ="""" 

Expected Result:

1. response return success 200

[[ TC4500 ]]


submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}



Step: 



1. submit a  merchandise(POST) and get mid

    set duration_day=null

    set offshelve_tod=null

    set  timezone=null

    set auto_reshelve_allowed =null



 

Expected Result:

1. response return success 200

[[ TC4501 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""timespan""

 request_data->merchandise_data->duration_day=600

 request_data->merchandise_data->offshelve_tod=100

 request_data->merchandise_data->timezone=""Asia/Taipei""

 request_data->merchandise_data->auto_reshelve_allowed=10



2. Get Merchandise detail by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""insert ok""



2.1 http response code is 200

2.2 check data is the same as insert

     verify responseData[merchandise_data][auto_shelve_type]=""timespan""

     verify responseData[merchandise_data][duration_data]=600

     verify responseData[merchandise_data][offshelve_tod]=100

     verify responseData[merchandise_data][timezone]=""Asia/Taipei""

     verify responseData[merchandise_data][auto_reshelve_allowed]=10

     verify responseData[merchandise_data][status]=1





[[ TC4502 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_shelve_time=time()+10

 request_data->merchandise_data->auto_offshelve_time=auto_shelve_time + 65 



2. Get Merchandise detail by mid



3. sleep(60) and get Merchandise detail by mid



4. sleep(70) and get Merchandise detail by mid 



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message=""insert ok""



2.1 http response code is 200

2.2 check data is the same as insert

  verify responseData[merchandise_data][auto_shelve_type]=""timespan""

  verify responseData[merchandise_data][auto_shelve_time]=auto_shelve_time

  verify responseData[merchandise_data]auto_offshelve_time]=auto_offshelve_time

  verify responseData[merchandise_data][status]=1



 

3.1 http response code is 200

3.2 check data is the expect 

 verify responseData[merchandise_data][status]=2



4.1 http response code is 200

4.2 check data is the expect 

 verify responseData[merchandise_data][status]=3



[[ TC4503 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""timespan""



request_data->merchandise_data->offshelve_tod=100

request_data->merchandise_data->timezone=""Asia/Taipei""

request_data->merchandise_data->auto_reshelve_allowed=10



2.Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""timespan""

request_data->merchandise_data->duration_day=600

request_data->merchandise_data->timezone=""Asia/Taipei""

request_data->merchandise_data->auto_reshelve_allowed=10



3. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""timespan""

request_data->merchandise_data->duration_day=600



request_data->merchandise_data->offshelve_tod=100

request_data->merchandise_data->auto_reshelve_allowed=10



4. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""timespan""

request_data->merchandise_data->duration_day=600



request_data->merchandise_data->offshelve_tod=100

request_data->merchandise_data->timezone=""Asia/Taipei""



Expected Results 

========== 

1-4. http response code is 400

[[ TC4504 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_offshelve_time=time()+60

 

Expected Results 

========== 

1. http response code is 400

[[ TC4505 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_offshelve_time=time()+60



2.1 Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_shelve_time=time()+30



2.2 Get Merchandise detail by mid

2.3 sleep(60) and get Merchandise detail by mid



Expected Results 

========== 

1. http response code is 400

2.1 http response code is 200

  status->message=""insert ok""

2.2.1 http response code is 200

2.2.2 check data is the same as insert

  verify responseData[merchandise_data][auto_shelve_type]=""timespan""

  verify responseData[merchandise_data][auto_shelve_time]=auto_shelve_time

  verify responseData[merchandise_data]auto_offshelve_time] is NULL 

  verify responseData[merchandise_data][status]=1



2.3.1 http response code is 200

2.3.2 check data is the expect 

  verify responseData[merchandise_data][status]=2



[[ TC4506 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data-&gt;merchandise_data-&gt;auto_shelve_type=""appointment""

 request_data-&gt;merchandise_data-&gt;auto_shelve_time="測"

&nbsp;request_data-&gt;merchandise_data-&gt;auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid 

 request_data-&gt;merchandise_data-&gt;auto_shelve_type=""ppointment""

 request_data-&gt;merchandise_data-&gt;auto_shelve_time=time()+30

 request_data-&gt;merchandise_data-&gt;auto_offshelve_time="測"



Expected Results 

========== 

1-2. http response code is 400

   verify status.code=1000u

[[ TC4507 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_shelve_time="?y"br \/> request_data->merchandise_data->auto_offshelve_time=time()+60



2. Submit merchandise(POST) and get mid 

 request_data->merchandise_data->auto_shelve_type=""ppointment""

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time="?y"br \/>

Expected Results 

========== 

1-2. http response code is 400

    verify status.code=10  a

[[ TC4508 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=""

 request_data->merchandise_data->auto_offshelve_time=time()+60



2.1 Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="pointment"

 request_data->merchandise_data->auto_shelve_time=time()+60

 request_data->merchandise_data->auto_offshelve_time=""



2.2 Get Merchandise detail by mid



2.3 sleep(60) and get Merchandise detail by mid



Expected Results 

========== 

1. http response code is 400

 verify status.code=10



2.1 http resonse code is 200

 status->message="sert ok"

2.2.1 http response code is 200

2.2.2 check data is the same as insert

  verify responseData[merchandise_data][auto_shelve_type]="timespan"

  verify responseData[merchandise_data][auto_shelve_time]=auto_shelve_time

  verify responseData[merchandise_data]auto_offshelve_time] is ""

  verify responseData[merchandise_data][status]=1

2.3.1 http response code is 200

2.3.2 check data is the expect 

  verify responseData[merchandise_data][status]=2

[[ TC4509 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=array(6)

 request_data->merchandise_data->auto_offshelve_time=time()+60



2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time=array(6)



Expected Results 

========== 

1-2. http response code is 400

    verify status.code=10

[[ TC4510 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=array("a"=>1)

 request_data->merchandise_data->auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time=array("a"=>1)



Expected Results 

========== 

1-2. http response code is 400

    verify status.code=10

[[ TC4511 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time="string"

 request_data->merchandise_data->auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time="string"



Expected Results 

========== 

1-2. http response code is 400

  verify status.code=10

[[ TC4512 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=-1

 request_data->merchandise_data->auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time=-1



Expected Results 

========== 

1-2. http response code is 400

  verify status.code=10

[[ TC4513 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_shelve_time=0

 request_data->merchandise_data->auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type=""appointment""

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time=0



Expected Results 

========== 

1. http response code is 400

  verify status.code=10

[[ TC4514 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=null

 request_data->merchandise_data->auto_offshelve_time=time()+60

2.1 Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time=null



2.2 Get Merchandise detail by mid



2.3 sleep(60) and get Merchandise detail by mid



Expected Results 

========== 

1. http response code is 400

  verify status.code=10



2.1 http response code is 200

 status->message="insert ok"

2.2.1 http response code is 200

2.2.2 check data is the same as insert

  verify responseData[merchandise_data][auto_shelve_type]="timespan"

  verify responseData[merchandise_data][auto_shelve_time]=auto_shelve_time

  verify responseData[merchandise_data]auto_offshelve_time] is null

  verify responseData[merchandise_data][status]=1

2.3.1 http response code is 200

2.3.2 check data is the expect 

  verify responseData[merchandise_data][status]=2



[[ TC4515 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time="!@#"

 request_data->merchandise_data->auto_offshelve_time=time()+60

2. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment"

 request_data->merchandise_data->auto_shelve_time=time()+30

 request_data->merchandise_data->auto_offshelve_time="!@#"



Expected Results 

========== 

1-2. http response code is 400

  verify status.code=10

[[ TC4516 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->auto_shelve_type="appointment";

 request_data->merchandise_data->auto_shelve_time=time()+60;

 request_data->merchandise_data->auto_offshelve_time=time+30;





Expected Results 

========== 

1-2. http response code is 400

       verify status.code=10



[[ TC4517 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update] 



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid 

 request_data->merchandise_data->auto_shelve_type="appointment"; 

 request_data->merchandise_data->auto_shelve_time=time()-60; 

 request_data->merchandise_data->auto_offshelve_time=time+60; 





Expected Results 

========== 

1-2. http response code is 400 

  verify status.code=10

[[ TC4518 ]]


1. submit Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

   method:POST

2. get url?? /v1/egs/merchandise/get/?highest_bidders=&max_bidders=

   method: GET



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters(total_quantity，start_price，reserve_price，buynow_price，auto_extension，extension_count，close_early，cust_fields)

2. get bidding merchandise by merchandise_id 

   set highest_bidders true 

   set max_bidders=1

   

Expected Result:

1. http response code 200 

    verify response data

2. http response code 200 

   verify response data format

[[ TC4519 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->total_quantity

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->start_price

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->reserve_price

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->buynow_price

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->auto_extension

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->extension_count

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->close_early 

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   unset request_data->cust_fields

     

Expected Result:

1-2. http response code 400 

    verify response data

3-8  http response code 200

      verify response data



[[ TC4520 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data-&gt;bid with all parameters

   set request_data-&gt;total_quantity='測'

2.create a bid merchandise with default optional parameter 

   set request_data-&gt;bid with all parameters

   set request_data-&gt;start_price='測'

3.create a bid merchandise with default optional parameter 

   set request_data-&gt;bid with all parameters

   set request_data-&gt;reserve_price='測'

4.create a bid merchandise with default optional parameter 

   set request

[[ TC4521 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity length is 2147483648

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price is decimal (13，3)

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price is decimal (13，3)

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price is decimal (13，3)

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=12

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count length is 2147483648

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=12

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields length 257

     

Expected Result:

1-8. http response code 400 

    verify response data

[[ TC4522 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=""

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=""

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=""

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=""

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=""

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=""

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early="" 

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=""

     

Expected Result:

1-7. http response code 400 

    verify response data

8  http response code 200

      verify response data



[[ TC4523 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=array(12)

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=array(12)

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=array(12)

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=array(12)

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=array(12)

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=array(12)

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=array(12)

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=array(12)

     

Expected Result:

1-8. http response code 400 

    verify response data

[[ TC4524 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=array('a'=>1)

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=array('a'=>1)

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=array('a'=>1)

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=array('a'=>1)

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=array('a'=>1)

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=array('a'=>1)

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=array('a'=>1)

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=array('a'=>1)

     

Expected Result:

1-8. http response code 400 

    verify response data

[[ TC4525 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=-1

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=-1

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=-1

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=-1

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=-1

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=-1

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=-1

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=-1

     

Expected Result:

1-7. http response code 200 

    verify response data

8  http response code 400

      verify response data

[[ TC4526 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=0

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=0

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=0

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=0

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=0

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=0

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=0

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=0

     

Expected Result:

1-7. http response code 200 

    verify response data

8  http response code 400

      verify response data

[[ TC4527 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity=null

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price=null

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price=null

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price=null

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension=null

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count=null

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early=null

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields=null

     

Expected Result:

1-4. http response code 400 

    verify response data

5-8  http response code 200

      verify response data

[[ TC4528 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->total_quantity="!@#"

2.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->start_price="!@#"

3.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->reserve_price="!@#"

4.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->buynow_price="!@#"

5.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->auto_extension="!@#"

6.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->extension_count="!@#"

7.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->close_early="!@#"

8.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->cust_fields="!@#"

     

Expected Result:

1-7. http response code 400 

    verify response data

8  http response code 200

      verify response data



[[ TC4529 ]]


1. submit Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

   method:POST

2. get url?? /v1/egs/merchandise/get/

   method: GET



Step:  

1.create a bid merchandise with default optional parameter 

   set request_data->bid with all parameters

   set request_data->mtype=basic

2. get bidding merchandise by merchandise_id but not exist

    

Expected Result:

1  http response code 200

      verify response data

      verify response_data->mtype=basic

      verify response_data->bid is not exist

2. http response code 404

[[ TC4530 ]]


Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

method:POST



Step:  

1.create a bid merchandise with default optional parameter 

   unset request_data->bid with all parameters

   set request_data->mtype=bid

     

Expected Result:

1  http response code 400

      verify response data

[[ TC4531 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

 1.submit a bid merchandise and get mid



Step:  

1.place a bid without required parameters

    unset requestUrl->mid=mid 

    set resquest_data->merchanidse->bid=>array(comments=>""bid merchandise"")



Expected Result:

1. http response code 400 

    verify response data

[[ TC4532 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

 1.submit a bid merchandise and get mid



Step:  

1.place a bid with all required parameters

    set requestUrl->mid=123456 



Expected Result:

1. http response code404

    verify response data

[[ TC4533 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

 1.submit a bid merchandise and get mid



Step:  

1.place a bid with all required parameters

    set requestData->merchanidse_data->bid->bid_type=3



Expected Result:

1. http response code 200 

    verify response data

[[ TC4534 ]]


1. submit Url syntax:/v1/egs/merchandise/submit/?user_update=[user_update]

   method:POST

   

Step:  

1.create a pre-sell merchandise with default optional parameter 

   set request_data->presale_shipping_type->""ondate""

       request_data->presale_shipping_ondate->time()+5*60*1000

    request_data->presale_shipping_afterdays->10

    

    

Expected Result:

1. http response code 400



[[ TC4535 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_place/[mid]

method:POST

(Query detail bid log list)

Url:(Get)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit a bid merchandise and get mid



Step:  

1.place a bid with all required parameters

    set requestUrl->mid=mid 

2. query detail bid log list



Expected Result:

1. http response code 200 

    verify response data=insert data

    verify response_data->merchandise->bid->bid_id

2. http response code 200

    verify response_data->merchandise->bid->bid_logs[0]->log_type=2

[[ TC4536 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?count=[count]&offset=[offset]

method:GET

 1.submit a bid merchandise and get mid and place bid



Step:  

1.query detail bid log list with required parameters

    set requestUrl->mid=mid 

          requestUrl->count=5

          requestUrl->offset=10



Expected Result:

1. http response code 200 

    verify response data->merchandise_data->bid

[[ TC4537 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?count=[count]&offset=[offset]

method:GET





Step: 

1.query detail bid log list with required parameters

  set requestUrl-&gt;mid='12345678'



Expected Result:

1. http response code 404

  verify response data

[[ TC4538 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 1.submit a bid merchandise and get mid and place bid

 2. query detail bid log list by mid



Step:  

1.cancel bid record with all parameters

   (mid，bidder_id，cancel_reason，user_update)

Expected Result:

1. http response code 200 

    verify response data->merchandise_data->bid

2. http response code 200

    verify response data->merchandise_data->bid->continuation=false

    verify response data->merchandise_data->bid->bid_logs[0]->log_type=8

[[ TC4539 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_cancel_bid_record/[mid]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid and place bid



Step:  

1.cancel bid record with required parameters

   set requestUrl->bid->mid=""!@#""

Expected Result:

1. http response code 404

    verify response data

[[ TC4540 ]]


========== 

A.data 

  1. submit a bidding merchandise get mid(POST)

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_query_bid_record_list/{mid}?count=10&offset=0

 2.Request Method: GET

 

Testing Steps: 

==========  

1. get the bidding record with all parameters

   set count=10

   set offset=0

 

Expected Results 

========== 

1 http response code is 200

  verify response_data->merchandise_data->bid->bid_records not null



[[ TC4541 ]]


========== 

A.data 

  1. submit a bidding merchandise get mid(POST)

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

 2.Request Method: GET

 

Testing Steps: 

==========  

1. get the bidding record with mid = 00001234 (not exist)

 

Expected Results 

========== 

1. http response code is 404



[[ TC4542 ]]


========== 

A.data 

  1. submit a bidding merchandise get mid(POST)

B.URI Syntax: 

 1.Request URI: /v1/egs/merchandise/shelve/?user_update=

 2.Request Method: PUT

 

Testing Steps: 

==========  

1. shelve bidding merchandise

 set request_data->auto_shelve_type = 'appointment'

    set request_data->auto_offshelve_time = time()+60



Expected Results 

========== 

1 http response code is 400



[[ TC4543 ]]


Url syntax:

Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]

 1.submit 3 bid merchandise and get mid1，mid2，mid3 and place bid

   

Step:  

1.close merchandise with required parameters

   requestUrl->mid_list=mid1，mid2，mid3

2. query detail bid log list by mid1   

Expected Result:

1. http response code 200 

    verify response data

2. http response code 200

    verify response data->merchandise_data->bid->continuation=true

    verify response data->merchandise_data->bid->bid_logs[0]->log_type=8



[[ TC4544 ]]


Url syntax:

Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

(query detail log list)Request URI

 (GET)/v1/egs/merchandise/bid_query_detail_bid_log_list/[mid]?[param]



 1.submit a bid merchandise and get mid

  2. query detail bid log list by mid 

Step:  

1.close merchandise with required parameters

   requestUrl->mid_list=mid

   requestUlr->update=1

   

Expected Result:

1. http response code 200 

    verify response data

2. http response code 200

    verify response data->merchandise_data->bid->continuation=true

    verify response data->merchandise_data->bid->bid_logs[0]->log_type=8

[[ TC4545 ]]


Url syntax:

Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid

   

Step:  

1.close merchandise with optional parameters

   unset requestUrl->mid_list

   set requestUlr->update=1

   

Expected Result:

1. http response code 404

    verify response data

[[ TC4546 ]]


Url syntax:

Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

 1.submit a bid merchandise and get mid1

 2.submit 2 basic merchandise and get mid2，mid3

   

Step:  

1.close merchandise with required parameters

   requestUrl->mid_list=mid1，mid2，mid3

   

Expected Result:

1. http response code 500

    verify response data

[[ TC4547 ]]


Url syntax:

Request URI: /v1/egs/merchandise/close/[mid_list]?user_update=[user_update]

method:PUT

   

Step:  

1.close merchandise with required parameters

   unset requestUrl->mid_list

   unset requestUrl->user_update

   

Expected Result:

1. http response code 404

    verify response data

[[ TC4548 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql)Request URI: /v1/egs/merchandise/search_by_vql/?vql=search?query=[]

method:GET



1.submit 3 merchandise and get mid1，mid2，mid3

 set request_data=required_default

 set title=D@$&G@

 

Step: 

1.search merchandises by vql

 set vql=search?query=+title:D&G++&search=merchandise



Expected Result:

1. http response code 200

 responseData count=3

 record merchanidseId=mid1，mid2，mid3

 record merchandise-title=D&G



[[ TC4549 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit a merchandise and get mid1

  

Step: 

1.search merchandises by vql

  set vql: set title="test title search byVql2"



Expected Result:



1. http response code 200

  verify response_data.total=1

  verify response_data.result

[[ TC4550 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit 3 merchandise and get mid1，mid2，mid3

  

Step: 

1.search merchandises by vql

  set vql: set &amp;title="test title"



Expected Result:



1. http response code 200

  verify response_data.total=3

  verify response_data.result

[[ TC4551 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



Step: 

1.search merchandises by vql

  set vql: set title=null



Expected Result:



1. http response code 404

  verify status.code=8



[[ TC4552 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



Step: 

1.search merchandises by vql

 set vql: set title="!@#()_+="



Expected Result:

1. http response code 404

 verify status.code=8



[[ TC4553 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&amp;key2=value2

method:GET



1.submit 3 merchandise and get mid1，mid2，mid3

   

Step:  

1.search merchandises by vql

   set vql: search=merchandise&amp;title="測"

&nbsp;

Expected Result:

1. http response code 404

   verify status.code=88

[[ TC4554 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit 3 merchandise and get mid1，mid2，mid3

   

Step:  

1.search merchandises by vql

   set vql: search=merchandise&title=array(12)



Expected Result:

1. http response code 404

   verify status.code=8

[[ TC4555 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit 3 merchandise and get mid1，mid2，mid3

   

Step:  

1.search merchandises by vql

   set vql: search=merchandise&title=array('a'=>12)



Expected Result:



1. http response code 404

   verify status.code=8

[[ TC4556 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql1)Request URI:v1/egs/merchandise/search?query=

method:GET





Step:  

1.search merchandises by vql

   set vql: set title=!@#()_+=



Expected Result:



1. http response code 404

   verify response_data.result

[[ TC4557 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit 2 merchandise and set title=D!@#$ and get mid1，mid2



Step:  

1.search merchandises by vql

set vql:set  title=D!@#$



Expected Result:



1. http response code 200

responseData count=2

record merchanidseId=mid1，mid2

record merchandise-title=D*$#

[[ TC4558 ]]


Url syntax:

(submit)Request URI: /v1/egs/merchandise/submit/?user_update=

method:POST

(search by vql2)Request URI:/v2/egs/merchandise/search_by_vql/?key1=value1&key2=value2

method:GET



1.submit 2 merchandise and set title=DDDDDDP and get mid1



Step:  

1.search merchandises by vql

set vql:set  title=DDDDDDP



Expected Result:



1. http response code 200

responseData count=1

record merchanidseId=mid1

record merchandise-title=DDDDDDP

[[ TC4559 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit a basic merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime-60

 request_data->merchandise_data->duration_day=1

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1-2. http response code is 400

 verify status.code=10

[[ TC4560 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit a basic merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime+60

 request_data->merchandise_data->duration_day=2

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1. http response code is 200

 verify after 1min Merchandise status is shelve

[[ TC4561 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

=========

Step: 

1. Submit a basic merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime+60

 request_data->merchandise_data->duration_day=2

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1. http response code is 200

 verify after 3 days and Merchandise status is offshelve

[[ TC4562 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps

========== 

Step: 

1. Submit a bid merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime-60

 request_data->merchandise_data->duration_day=1

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1-2. http response code is 400

 verify status.code=10



[[ TC4563 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit a bid merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime+60

 request_data->merchandise_data->duration_day=2

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1. http response code is 2

 verify after 1min Merchandise status is shelve



[[ TC4564 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]



Testing Steps: 

========== 

Step: 

1. Submit a bid merchandise(POST) 

 request_data->merchandise_data->auto_shelve_type="timespan"

 request_data->merchandise_data->timespan_shelve_time=nowTime+60

 request_data->merchandise_data->duration_day=2

 request_data->merchandise_data->offshelve_tod=10

 request_data->merchandise_data->timezone="Asia/Taipei"

 request_data->merchandise_data->auto_reshelve_allowed=1



Expected Results 

========== 

1. http response code is 200

 verify after 3 days and Merchandise status is offshelve

[[ TC4568 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step:

1.submit a bid merchandise and get mid1 and shelve merchandise and place bid and get bid_id1

2.query bidder bid record list

set requestUrl->bidder_id='bidder1#abc'

set requestUrl->ccode='tw'

set requestUrl->property='nevec'

set requestUrl->search_type=bid



Expected Result:

2. http response code 400

[[ TC4569 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_highest_winning_list/{bidder_id}?{param}

method:GET



1.submit a bid merchandise and get mid and shelve merchandise and place bid

2.qa_update end time then close the bid merchandise



Step:

1.query bidder bid record list with required parameters

set requestUrl->bidder_id='bidder1#abc'

set requestUrl->ccode='tw'

set requestUrl->property='nevec'



Expected Result:

1. http response code 400



[[ TC4571 ]]


 

=========

Submit Merchandise URL:/v1/egs/merchandise/submit

Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0

1}

 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

Testing Steps:



==========



1.Submit Merchandise(POST) and get mid

2.Update Merchandise(PUT) by mid

    Set $.merchandise_data->sid=null

3

Get Merchandise Detail(GET) by mid

Expected Results



==========



1.Http Response Code 400

[[ TC4572 ]]


 

=========

Submit Merchandise URL:/v1/egs/merchandise/submit

Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0

1}

 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

Testing Steps:



==========

1.Update Merchandise(PUT) by mid

    Set mid=126_900000001

Expected Results



==========



1.Http Response Code 404



[[ TC4573 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->category's length is 13



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 400



[[ TC4574 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:

  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;category = 10 rand special characters

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4575 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;category = 10 rand letters

 +number

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4576 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;category = ""

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4577 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;category = "中文字"

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4578 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;title = 129 rand letters

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4579 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;title = 128 rand letters

 +number

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 200

 2.Verify ResponseData: $..response_data.merchandise_data-&gt;title = submit title

[[ TC4580 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;location = 129 rand letters

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4581 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;location =128 rand letters+number

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4582 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;price =128 rand letters+number

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 400

[[ TC4583 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;price =""0.00""

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 200

 2.Verify ResponseData: $..response_data.merchandise_data-&gt;price =""0.00""

[[ TC4584 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->price =""1000000000.00""



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



2.Verify ResponseData: $..response_data.merchandise_data->price =""1000000000.00""



[[ TC4585 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->price =""-0.01""



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 400



[[ TC4586 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->price =""999999999.99""



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



2.Verify ResponseData: $..response_data.merchandise_data->price =""1000000000.00""



[[ TC4587 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->email = 118 rand letters+@yahoo.com""



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



[[ TC4588 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->phone = 20 rand letters+numbers



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



2.Verify ResponseData: $..response_data.merchandise_data->phone = submit phone



[[ TC4589 ]]




   =========

 Submit Merchandise URL:/v1/egs/merchandise/submit

 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}

  Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}

 Testing Steps:



  ==========



  1.Submit Merchandise(POST) and get mid

 2.Update Merchandise(PUT) by mid

     Set $.merchandise_data-&gt;ym = 128 rand letters

 3，Get Merchandise Detail(GET) by mid

 Expected Results



  ==========



  1.Http Response Code 200

 2.Verify ResponseData: $..response_data.merchandise_data-&gt;ym = submit ym

[[ TC4591 ]]


 request-&gt;image_data = [""http:\/\/l.yimg.com\/f\/i\/tw\/hp\/mh\/09purple.gif""]



  Expected Result:

 1. http response 200

 response json format

 status-&gt;code=200

 status-&gt;message=""success""

[[ TC4592 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->cat_attr = {""ROOM_TYPE"":""65000_ROOM_TYPE_A""，""ROOM_SIZE"":""[""23000_ROOM_SIZE_B""，""23000_ROOM_SIZE_C""]}



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



[[ TC4593 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->cat_attr = ""ROOM_TYPE => 65000_ROOM_TYPE_A""



Expected Results







==========







1.Http Response Code 400



[[ TC4594 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->cat_attr= 999999999



Expected Results







==========







1.Http Response Code 400



[[ TC4595 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->cat_attr->ROOM_SIZE length is 65487



Expected Results







==========







1.Http Response Code 400



[[ TC4596 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->cat_attr->ROOM_SIZE length is 65487



3，Get Merchandise Detail(GET) by mid



Expected Results







==========







1.Http Response Code 200



[[ TC4597 ]]








=========







 Submit Merchandise URL:/v1/egs/merchandise/submit



 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}







Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2，Get Merchandise Detail(GET) by mid，and get ptime from response



3.Update Merchandise(PUT) by mid



    Set $.merchandise_data->category="54321"



4，Get Merchandise Detail(GET) by mid







Expected Results







==========







1.Http Response Code 200



2.Response Data:$..response_data.merchandise_data->ptime=ptime



[[ TC4598 ]]








=========







 Submit Merchandise URL:/v1/egs/merchandise/submit







 Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}







 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}







Testing Steps:







==========







1.Submit Merchandise(POST) and get mid







2.Update Merchandise(PUT) by mid







    Set $.merchandise_data->category="54321"







3，Get Merchandise Detail(GET) by mid









Expected Results







==========







1.Http Response Code 200







2.Response Data:$..response_data.merchandise_data->status=1



[[ TC4599 ]]




request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4600 ]]




request->cust_data = {""key1"": ""value1""， ""key2"": ""value2""}(max length = 65535)







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4602 ]]




request->mass_cust_data = 12345







Expected Result:



1. http response 400



[[ TC4603 ]]




request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4604 ]]




request->price_type=1







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4605 ]]




request->price_type=2







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4606 ]]




request->price_type=3







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4607 ]]




request->price_type=-1







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4608 ]]




request->price_type=1.2







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4609 ]]




request->price_type={key1: value1， key2: value2}







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4610 ]]




request->price_type=[value1， value2]







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4611 ]]




request->price=1000



//request->price_type=0







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4612 ]]




//request->price=1000



request->price_type=0







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4613 ]]




request->price=1000



//request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4614 ]]




//request->price=1000



request->price_type=0







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4615 ]]




request->index_cust_data=[value1， value2]







Expected Result:



1. http response 200



response json format



status->code=200



status->message=""success""



[[ TC4616 ]]




request->index_cust_data=12345







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4617 ]]




request->index_cust_data={""key1， key2"": ""value1""}







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4618 ]]




request->index_cust_data={ ""key1"": ""value1， value2""}



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



merchandise data is correct



[[ TC4619 ]]




request->index_cust_data={ ""key1"": 12345}







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4620 ]]




//request->latlong='N60.123;E90.123'



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



merchandise data is correct



[[ TC4621 ]]




request->latlong='N80.123E80.123'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4622 ]]




request->latlong='80.123;80.123'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4623 ]]




request->latlong='N90;E90.123'



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



merchandise data is correct



[[ TC4624 ]]




request->latlong='N90.000001;E180'







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



[[ TC4625 ]]




request->latlong='N90;E180'



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



merchandise data is correct



[[ TC4626 ]]




request->latlong='N90;E180.000001'







Expected Result:



1.1 http response 400



1.2response json format



status->code=400



status->message=""invalid parameter""



[[ TC4627 ]]




request->latlong='N60.123456;E120.123456'



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



merchandise data is correct



[[ TC4628 ]]




request->latlong='N60.1234567;E120.1234567'







Expected Result:



1.1 http response 400



1.2response json format



status->code=400



status->message=""invalid parameter""



[[ TC4629 ]]




request_data->latlong='A60.123;E90.123'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4630 ]]




request_data->latlong='N60.123;A90.123'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4631 ]]




request_data->latlong='E60.123;N90.123'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4632 ]]




request_data->image_profile='advance'







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4633 ]]




request_data->merchandise_data->duration_day = 1.01







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4634 ]]


 request_data-&gt;merchandise_data-&gt;duration_day = -1



  Expected Result:

 1. http response 400

 response json format

 status-&gt;code=400

 status-&gt;message=""invalid parameter""

[[ TC4635 ]]




request_data->merchandise_data->duration_day = 1







2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4636 ]]




request_data->merchandise_data->duration_day = 2147483646



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4637 ]]




request_data->merchandise_data->offshelve_tod = 0.01







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4638 ]]




request_data->merchandise_data->offshelve_tod = -1







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4639 ]]


 request_data-&gt;merchandise_data-&gt;offshelve_tod = -1



  Expected Result:

 1. http response 400

 response json format

 status-&gt;code=400

 status-&gt;message=""invalid parameter""

[[ TC4640 ]]


 request_data-&gt;merchandise_data-&gt;offshelve_tod = 0

 2. GET /v1/egs/merchandise/get_detail/{mid}



  Expected Result:

 1.1 http response 200

 1.2 response json format

 status-&gt;code=200

 status-&gt;message=""success""

 2.1 http response 200

 2.2 response json format

 status-&gt;code=200

 status-&gt;message=""success""

 data is correct

[[ TC4641 ]]




request_data->merchandise_data->offshelve_tod = 1440



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200

2.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4642 ]]




request_data->merchandise_data->timezone = 13







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4643 ]]




request_data->merchandise_data->timezone = Asia/Taipei1







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4644 ]]




request_data->merchandise_data->timezone = Asia/Tokyo



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4645 ]]




request_data->merchandise_data->timezone = ASIA/TAIPEI







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4646 ]]




request_data->merchandise_data->timezone = asia/taipei







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4647 ]]




request_data->merchandise_data->auto_reshelve_allowed = 1.01







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4648 ]]




request_data->merchandise_data->auto_reshelve_allowed = -1







Expected Result:



1. http response 400



response json format



status->code=400



status->message=""invalid parameter""



[[ TC4649 ]]


 request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 0.1



  Expected Result:

 1. http response 400

 response json format

 status-&gt;code=400

 status-&gt;message=""invalid parameter""

[[ TC4650 ]]


 request_data-&gt;merchandise_data-&gt;auto_reshelve_allowed = 0

 2. GET /v1/egs/merchandise/get_detail/{mid}



  Expected Result:

 1.1 http response 200

 1.2 response json format

 status-&gt;code=200

 status-&gt;message=""success""

 2.1 http response 200

 2.2 response json format

 status-&gt;code=200

 status-&gt;message=""success""

 data is correct

[[ TC4651 ]]




request_data->merchandise_data->auto_reshelve_allowed = 2147483646



2. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4652 ]]




//request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1



2. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



3. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



3.1 http response 200



3.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4653 ]]




//request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1



2. PUT /v1/egs/merchandise/update/{merchandise_id}



//request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 400



2.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4654 ]]




//request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1



2. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 400



2.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4655 ]]




//request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1



2. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 400



2.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4656 ]]




//request_data->merchandise_data->duration_day = 1



//request_data->merchandise_data->offshelve_tod = 1



//request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1



2. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



//request_data->merchandise_data->auto_reshelve_allowed = 1







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 400



2.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4657 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/shelve/{mid}?duration_day={duration_day}&offshelve_tod={offshelve_tod}&timezone={timezone}&auto_reshelve_allowed={auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->duration_day = 1







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



3.1 http response 400



3.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4658 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/shelve/{mid}?duration_day={duration_day}&offshelve_tod={offshelve_tod}&timezone={timezone}&auto_reshelve_allowed={auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->offshelve_tod = 2





Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



3.1 http response 400



3.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4659 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 1



2. GET /v1/egs/merchandise/shelve/{mid}?duration_day={duration_day}&offshelve_tod={offshelve_tod}&timezone={timezone}&auto_reshelve_allowed={auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->timezone = Asia/Tokyo







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



3.1 http response 400



3.2 response json format



status->code=400



status->message=""invalid parameter""



[[ TC4660 ]]




request_data->merchandise_data->duration_day = 1



request_data->merchandise_data->offshelve_tod = 1



request_data->merchandise_data->timezone = Asia/Taipei



request_data->merchandise_data->auto_reshelve_allowed = 5



2. GET /v1/egs/merchandise/shelve/{mid}?duration_day={duration_day}&offshelve_tod={offshelve_tod}&timezone={timezone}&auto_reshelve_allowed={auto_reshelve_allowed}



3. PUT /v1/egs/merchandise/update/{merchandise_id}



request_data->merchandise_data->auto_reshelve_allowed = 7



4. GET /v1/egs/merchandise/get_detail/{mid}







Expected Result:



1.1 http response 200



1.2 response json format



status->code=200



status->message=""success""



2.1 http response 200



2.2 response json format



status->code=200



status->message=""success""



3.1 http response 200



3.2 response json format



status->code=200



status->message=""success""



4.1 http response 200



4.2 response json format



status->code=200



status->message=""success""



data is correct



[[ TC4661 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(null， 10)



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4662 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(''， 10)



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4663 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->title = 'update title'



UNSET request_data->merchandise_data->remind_notify_minute



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4664 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('~!@#$%^&*()_+{}|"":<>?/.，\';][=-`'， 10)



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4665 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(5)



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4666 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array(4)



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4667 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = 10



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4668 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = '10'



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4669 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('10')



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4670 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('key' => 10)



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4671 ]]




1. SET request_data = optional_default()



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = array('key' => '10')



PUT /v1/egs/merchandise/update/${merchandise_id}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4672 ]]




1. SET request_data = optional_default()



SET shelve_time = 1200



SET request_data->merchandise_data->duration_day  = 1



SET request_data->merchandise_data->offshelve_tod  = ${shelve_time}



SET request_data->merchandise_data->timezone  = 'Asia/Taipei'



SET request_data->merchandise_data->auto_reshelve_allowed   = 5



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/shelve/${mid}



wait for auto-reshelved



3. GET /v1/egs/merchandise/get/${mid}



SET offtime = result_data->response_data->merchandise_data->offtime



SET ontime = result_data->response_data->merchandise_data->ontime



4. SET remind_notify_minute = ${offtime} - ${ontime}



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = ${remind_notify_minute}



PUT /v1/egs/merchandise/update/${mid}



5. GET /v1/egs/merchandise/get/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 200



verify response_message()



5. assertEquals http 200



verify response_message()



[[ TC4673 ]]




1. SET request_data = optional_default()



SET shelve_time = 1200



SET request_data->merchandise_data->duration_day  = 1



SET request_data->merchandise_data->offshelve_tod  = ${shelve_time}



SET request_data->merchandise_data->timezone  = 'Asia/Taipei'



SET request_data->merchandise_data->auto_reshelve_allowed   = 5



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



GET /v1/egs/merchandise/shelve/${mid}



wait for auto-reshelved



3. GET /v1/egs/merchandise/get/${mid}



SET offtime = result_data->response_data->merchandise_data->offtime



SET ontime = result_data->response_data->merchandise_data->ontime



4. SET remind_notify_minute = ${offtime} - ${ontime} + 1



SET request_data = optional_default()



SET request_data->merchandise_data->remind_notify_minute = ${remind_notify_minute}



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



4. assertEquals http 400



verify error_message()



[[ TC4674 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->price   = ""5.00""



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->price   = ""1234.ab""



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4675 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = null



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4676 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4677 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4678 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 2147483646



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4679 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 2147483646.01



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4680 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 0



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4681 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = -1



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4682 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 1000.01



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4683 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = 6789



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4684 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = ""6789""



PUT /v1/egs/merchandise/update/${mid}



3. GET /v1/egs/merchandise/get_detail/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



3. assertEquals http 200



verify response_message()



[[ TC4685 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = array(12345， 6789)



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4686 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view   =  12345



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view = array(""key1"" => 12345，  ""key2"" => 6789)



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 400



verify error_message()



[[ TC4687 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->nogroup =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->nogroup = 1， 0， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4688 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->nogroup =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->nogroup = null， ''， -1， 1.1， 0.1， true， false， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4689 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->verified_user =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->verified_user = 0， 1， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4690 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->verified_user =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->verified_user = null， ''， true， false， 2， 0.1， -1， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4691 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4692 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->page_view_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->page_view_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4693 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->watchlist_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->watchlist_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4694 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->watchlist_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->watchlist_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4695 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->watchlist =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->watchlist = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4696 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->watchlist =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->watchlist = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4697 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->qna_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->qna_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4698 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->qna_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->qna_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4699 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->qna =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->qna = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4700 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->qna =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->qna = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4701 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->appointment_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->appointment_weekly = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4702 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->appointment_weekly =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->appointment_weekly = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4703 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->appointment =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->appointment = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4704 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->appointment =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->appointment = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4705 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->popularity =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->popularity = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4706 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->popularity =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->popularity = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}





[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4707 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data1 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data1 = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4708 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data1 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data1 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4709 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data2 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data2 = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4710 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data2 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data2 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4711 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data3 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data3 = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4712 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data3 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data3 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}





[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4713 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data4 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data4 = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4714 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data4 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data4 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4715 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data5 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data5 = 0， 2147483646， '0'， '2147483646'， notincluded



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



verify response_message()



2. assertEquals http 200



verify response_message()



[[ TC4716 ]]




1. SET request_data = optional_default()



SET request_data->merchandise_data->range_data5 =  1



POST /v1/egs/merchandise/submit



2. SET mid = result_data->response_data->mid



SET request_data->merchandise_data->range_data5 = null， ''， 0.1， -1， 2147483647， array(1)， array('key' => 0)， '~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]



1. assertEquals http 200



 assertEquals status->code = '200'



 assertEquals status->message = 'success'



2. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->message = 'invalid format'



[[ TC4717 ]]




1. SET request_data = required_default()

 

encrypt every fields

 

POST /v1/egs/merchandise/submit

 

SET mid = result_data->response_data->mid

 

2. SET request_data->merchandise_data->email = unencrypted(email)

 

PUT /v1/egs/merchandise/update/${mid}

 

3. SET request_data->merchandise_data->phone = unencrypted(phone)

 

PUT /v1/egs/merchandise/update/${mid}

 

4. SET request_data->merchandise_data->ym = unencrypted(ym)

 

PUT /v1/egs/merchandise/update/${mid}



 



[Expected Result]

 

1. assertEquals http 200



verify response_message()

 

2. assertEquals http 400

 

verify error_message()



3. assertEquals http 400

 

verify error_message()

 

4. assertEquals http 400 



verify error_message() 



[[ TC4718 ]]


 

1. SET request_data = required_default()

 

encrypt every fields

 

POST /v1/egs/merchandise/submit



 

SET mid = result_data->response_data->mid

 

2. SET request_data->merchandise_data->email = unencrypted(email)

 

PUT /v1/egs/merchandise/update/${mid}

 

3. SET request_data->merchandise_data->phone = unencrypted(phone)

 

PUT /v1/egs/merchandise/update/${mid}

 

4. SET request_data->merchandise_data->ym = unencrypted(ym)

 

PUT /v1/egs/merchandise/update/${mid}



 



[Expected Result]

 

1. assertEquals http 200

 

verify response_message()

 

2. assertEquals http 200 



verify response_message()



3. assertEquals http 200 



verify response_message()



4. assertEquals http 200 



verify response_message()



[[ TC4719 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit 



SET mid = result_data->response_data->mid

 

2. SET request_data->merchandise_data->email = encrypted(email)

 

PUT /v1/egs/merchandise/update/${mid} 



3. SET request_data->merchandise_data->phone = encrypted(phone) 



PUT /v1/egs/merchandise/update/${mid}



4. SET request_data->merchandise_data->ym = encrypted(ym) 



PUT /v1/egs/merchandise/update/${mid}



 



[Expected Result] 



1. assertEquals http 200 



verify response_message() 



2. assertEquals http 400

 

verify error_message()



3. assertEquals http 400 



verify error_message() 



4. assertEquals http 400 



verify error_message()



[[ TC4720 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. GET /v1/egs/merchandise/get/${mid}

 

3. SET seq_id = response_data->meta_data->seq_id



SET request_data->meta_data->seq_id = ${seq_id}



PUT /v1/egs/merchandise/update/${mid}



4. GET /v1/egs/merchandise/get/${mid}









[Expected Result]

 

1. assertEquals http 200 



verify response_message()

 

2. assertEquals http 200 



verify response_message()



3. assertEquals http 200 



verify response_message()



4. assertEquals http 200 



verify response_message()



[[ TC4721 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. SET request_data->meta_data->seq_id = null



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]

 

1. assertEquals http 200

 

verify response_message()

 

2. assertEquals http 400 



verify error_message()



[[ TC4722 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. SET request_data->meta_data->seq_id = ''



PUT /v1/egs/merchandise/update/${mid}







[Expected Result] 



1. assertEquals http 200 



verify response_message() 



2. assertEquals http 400 



verify error_message()



[[ TC4723 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. SET request_data->meta_data->seq_id = 'notexist'



PUT /v1/egs/merchandise/update/${mid}







[Expected Result]

 

1. assertEquals http 200

 

verify response_message() 



2. assertEquals http 500 



verify error_message()



[[ TC4724 ]]


 

1. SET request_data = required_default() 



POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. GET /v1/egs/merchandise/get/${mid}



3. SET seq_id = response_data->meta_data->seq_id



SET request_data->meta_data->seq_id = ${seq_id}



SET request_data->meta_data->title = 'sequence id test'



PUT /v1/egs/merchandise/update/${mid}



4. GET /v1/egs/merchandise/get/${mid}









[Expected Result]

 

1. assertEquals http 200 



verify response_message() 



2. assertEquals http 200 



verify response_message()



3. assertEquals http 200 



verify response_message()



4. assertEquals http 200 



verify response_message()



make sure sequence id is different



[[ TC4725 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. GET /v1/egs/merchandise/get/${mid}



3. SET seq_id = response_data->meta_data->seq_id



SET request_data->meta_data->seq_id = ${seq_id}



PUT /v1/egs/merchandise/update/${mid}



4. PUT /v1/egs/merchandise/update/${mid}









[Expected Result] 



1. assertEquals http 200



verify response_message() 



2. assertEquals http 200 



verify response_message()



3. assertEquals http 200 



verify response_message()



4. assertEquals http 400 



verify response_message()



[[ TC4726 ]]


 

1. SET request_data = required_default()

 

POST /v1/egs/merchandise/submit



SET mid = result_data->response_data->mid



2. GET /v1/egs/merchandise/get/${mid}



3. SET seq_id = response_data->meta_data->seq_id



SET request_data->meta_data->seq_id = ${seq_id}



PUT /v1/egs/merchandise/update/${mid}



4. PUT /v1/egs/merchandise/shelve/${mid}







[Expected Result] 



1. assertEquals http 200 



verify response_message() 



2. assertEquals http 200 



verify response_message()



3. assertEquals http 200 



verify response_message()



4. assertEquals http 200 



verify response_message()



[[ TC4727 ]]


   

1. POST /v1/egs/merchandise/update/{mid}/?user_update=0



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4728 ]]


  

1. POST /v1/egs/merchandise/update/{mid}/?user_update=1



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=1



[[ TC4729 ]]


   

1. POST /v1/egs/merchandise/update/{mid}/?user_update=



request_data = required data



2.get merchandise









Expected Result:



1.verify submit



http code 200



status->code=200



status->message=""insert ok""



2.verify get merchandise



response data->user_update=0



[[ TC4730 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+



index_cust_field1-5



cust_field1-5



3. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message=""update ok""



4.Get index_cust_field1 = Update index_cust_field1-5 and cust_field1-5



5.verify Json schema



[[ TC4731 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters+



index_cust_field1-5



cust_field1-5



2. Update merchandise(Put) with required parameters



3. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message=""update ok""



4.Get index_cust_field1 = index_cust_field1-5 and cust_field1-5



5.verify Json schema



[[ TC4732 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters+



index_cust_field1-5



cust_field1-5



2. Update merchandise(Put) with required parameters+



index_cust_field1-5=""""



cust_field1-5=""""



3. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message=""update ok""



4.Get index_cust_field1-5 = """" and cust_field1-5=""""



5.verify Json schema



[[ TC4733 ]]


 ==========

 URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}



  Testing Steps:

 ==========

 1. Submit merchandise(Post) with required parameters

 2. Update merchandise(Put) with required parameters+

 index_cust_field1-5=""中國""

 cust_field1-5=""中國""

 3. Get merchandise detail(Get)



  Expected Results ==========

 1.Http Response Code is 200

 2.Status code is 200

 3.Response data-&gt;message=""update ok""

 4.Get index_cust_field1-5 = ""中國"" and cust_field1-5=中國

 5.verify Json schema

[[ TC4734 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+



index_cust_field1-5=""!@#""



cust_field1-5=!@#



3. Get merchandise detail(Get)







Expected Results ==========



1.Http Response Code is 200



2.Status code is 200



3.Response data->message=""update ok""



4.Get index_cust_field1-5 = ""!@#"" and cust_field1-5=""!@#""



5.verify Json schema



[[ TC4735 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+



index_cust_field1=""{""a"":""1""，""b"":""2""}""



3. Update merchandise(Put) with required parameters+



index_cust_field2=""{""a"":""1""，""b"":""2""}""



4. Update merchandise(Put) with required parameters+



index_cust_field3=""{""a"":""1""，""b"":""2""}""



5. Update merchandise(Put) with required parameters+



index_cust_field4=""{""a"":""1""，""b"":""2""}""



6. Update merchandise(Put) with required parameters+



index_cust_field5=""{""a"":""1""，""b"":""2""}""



7. Update merchandise(Put) with required parameters+



cust_field1=""{""a"":""1""，""b"":""2""}""



8. Update merchandise(Put) with required parameters+



cust_field2=""{""a"":""1""，""b"":""2""}""



9. Update merchandise(Put) with required parameters+



cust_field3=""{""a"":""1""，""b"":""2""}""



10. Update merchandise(Put) with required parameters+



cust_field4=""{""a"":""1""，""b"":""2""}""



11. Update merchandise(Put) with required parameters+



cust_field5=""{""a"":""1""，""b"":""2""}""







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC4736 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+



index_cust_field1=""[12]""



3. Update merchandise(Put) with required parameters+



index_cust_field2=""[12]""



4. Update merchandise(Put) with required parameters+



index_cust_field3=""[12]""



5. Update merchandise(Put) with required parameters+



index_cust_field4=""[12]""



6. Update merchandise(Put) with required parameters+



index_cust_field5=""[12]""



7. Update merchandise(Put) with required parameters+



cust_field1=""[12]""



8. Update merchandise(Put) with required parameters+



cust_field2=""[12]""



9. Update merchandise(Put) with required parameters+



cust_field3=""[12]""



10. Update merchandise(Put) with required parameters+



cust_field4=""[12]""



11. Update merchandise(Put) with required parameters+



cust_field5=""[12]""







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC4737 ]]




==========



URI Syntax: /v1/egs/merchandise/update/{mid}/?user_update={0，1}







Testing Steps:



==========



1. Submit merchandise(Post) with required parameters



2. Update merchandise(Put) with required parameters+



index_cust_field1=var(1025)



3. Update merchandise(Put) with required parameters+



index_cust_field2=var(1025)



4. Update merchandise(Put) with required parameters+



index_cust_field3=var(1025)



5. Update merchandise(Put) with required parameters+



index_cust_field4=var(1025)



6. Update merchandise(Put) with required parameters+



index_cust_field5=var(1025)



7. Update merchandise(Put) with required parameters+



cust_field1=var(1025)



8. Update merchandise(Put) with required parameters+



cust_field2=var(1025)



9. Update merchandise(Put) with required parameters+



cust_field3=var(1025)



10. Update merchandise(Put) with required parameters+



cust_field4=var(1025)



11. Update merchandise(Put) with required parameters+



cust_field5=var(1025)







Expected Results ==========



1.Verify the 10 times Http Response Code is 400



2.verify Json schema



[[ TC4738 ]]


2. PUT /v1/egs/merchandise/update/{mid}/?user_update=1

request_data-&gt;merchandise_data-&gt;mtime=012 

request_data-&gt;merchandise_data-&gt;offtime=123 

request_data-&gt;merchandise_data-&gt;ontime=234

request_data-&gt;merchandise_data-&gt;ptime=345

request_data-&gt;merchandise_data-&gt;ctime=456 

request_data-&gt;merchandise_data-&gt;status=10 

request_data-&gt;merchandise_data-&gt;close_scheduler_event=update 

request_data-&gt;merchandise_data-&gt;cust_field1=update11 

3. get detail by mid 



Expected Result: 

1. insert a Merchandise EGS data 

2. update data

a. http response 200 

b. response json format 

status-&gt;code=200 

status-&gt;message="update ok" 

3. 檢查"offtime"， "ontime"， "ptime"， "status"， "close_scheduler_event"， "ctime"=insert時候的值

[[ TC4739 ]]






 

=========



Submit Merchandise URL:/v1/egs/merchandise/submit



Update Merchandise URL:/v1/egs/merchandise/update/{mid}/?user_update={0，1}



 Get Merchandise Detail URL:/v1/egs/merchandise/get_detail/{mid}



Testing Steps:







==========







1.Submit Merchandise(POST) and get mid



2.Update Merchandise(PUT) by mid



    Set $.merchandise_data->category=999999999



Expected Results







==========





1.Http Response Code 400



[[ TC4740 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1} 

Update:/v1/egs/merchandise/update//?user_update=<span style="text-decoration: underline;"> 

Get: /v1/egs/merchandise/get/ 

 

Step:  

1. Update merchandise(PUT) by mid 

 set duration_day="" 

 set offshelve_tod="" 

 set timezone="" 

 set auto_reshelve_allowed =""  

Expected Result: 

1. response return success 200</span>

[[ TC4741 ]]


Create Draft: /v1/egs/merchandise/create_draft/?user_update={0，1} 

Update:/v1/egs/merchandise/update//?user_update=<span style="text-decoration: underline;"> 

Get: /v1/egs/merchandise/get/ 

 

Step:  

 

1. Update merchandise(PUT) by mid 

  set duration_day=null 

  set offshelve_tod=null 

  set timezone=null 

  set auto_reshelve_allowed =null 

 

  

Expected Result: 

1. response return success 200</span>

[[ TC4742 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""timespan""



 request_data[merchandise_data][duration_day]=2



 request_data[merchandise_data][offshelve_tod]=12



 request_data[merchandise_data][timezone]=""Asia/Taipei""



 request_data[merchandise_data][auto_reshelve_allowed]=10



3. get merchandise detail by mid



Expected Result:



2. response code return  200



    verify status.code=200



    verify status.message=""success""



3. reponse http code 200



    verify json schema and responseData equals submit data



    verify responseData[merchandise][status]=3(closed)



[[ TC4743 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""



 request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. get merchandise detail by mid



Expected Result:



2. response code return  200



    verify status.code=200



    verify status.message=""success""



3. reponse http code 200



    verify json schema and responseData equals submit data



when time is 201307101020



verify responseData[merchandise][auto_shelve_time] is null



when time is 201307101020



verify responseData[merchandise][status]=3(closed)

    

responseData[merchandise][auto_offshelve_time] is null



[[ TC4744 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""timespan"" and _tod， timezone， auto_reshelve_allowed



unset request_data[merchandise_data][duration_day]



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""timespan""，duration_day， timezone， auto_reshelve_allowed



unset request_data[merchandise_data][offshelve_tod]



4. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""timespan""，duration_day， offshelve_tod， auto_reshelve_allowed



unset request_data[merchandise_data][timezone]



5. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""timespan""，duration_day， offshelve_tod， timezone



unset request_data[merchandise_data][auto_reshelve_allowed]









Expected Result:



2.1-5.1. response code return  400



    verify status.code=10



[[ TC4745 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. shelve the merchandise



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment"" request_data[merchandise_data][auto_offshelve_time]=201307101021



4. get merchandise detail by mid



Expected Result:



3. response code return  200



    verify status.code=200



    verify status.message=""success""



4. reponse http code 200



    verify json schema and responseData equals submit data



when time is 201307101021



    verify responseData[merchandise][status]=3(closed)



 verify responseData[merchandise][auto_shelve_time] is null



            responseData[merchandise][auto_offshelve_time] is null



[[ TC4746 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. shelve the merchandise



3. close the merchandise



4. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=201307101021



5 get merchandise detail by mid



Expected Result:



4. response code return  200



    verify status.code=200



    verify status.message=""success""



5. reponse http code 200



    verify json schema and responseData equals submit data



when time is 201307101020



verify responseData[merchandise][auto_shelve_time] is null



when time is 201307101020



verify responseData[merchandise][status]=3(closed)

    

responseData[merchandise][auto_offshelve_time] is null



[[ TC4747 ]]




create draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. create draft merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment"" 



3 get merchandise detail by mid



Expected Result:



2. response code return  200



    verify status.code=200



    verify status.message=""success""



3. reponse http code 200



    verify json schema and responseData equals submit data



    verify responseData[merchandise][status]=0(draft)



    verify responseData[merchandise][auto_shelve_time] is not exist



            responseData[merchandise][auto_offshelve_time] is not exist



[[ TC4748 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



case 1:

1. Submit merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment"" 

      request_data[merchandise_data][auto_offshelve_time]=time()+60

      unset(request_data[merchandise_data][auto_shelve_time])

case 2:

1. Submit merchandise and get mid



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment"" 

      request_data[merchandise_data][auto_shelve_time]=time()+60

      unset(request_data[merchandise_data][auto_offshelve_time])





Expected Result:



case 1. response code return 200

case 2 response code return 400



 verify status.code=10



[[ TC4749 ]]


  submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}

 Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

 Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]



  Step: 

 1. Submit merchandise and get mid

 2. Update merchandise by mid

 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=""測""

 request_data[merchandise_data][auto_offshelve_time]=201307101021

 3. Update merchandise by mid

  set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020

 request_data[merchandise_data][auto_offshelve_time]=""測""

 Expected Result:

 2-3. response code return  400

     verify status.code=10

[[ TC4750 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=""123456789012345678790""



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=""123456789012345678790""



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4751 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=""""



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=""""



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4752 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=array(12)



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=array(12)



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4753 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]





Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=array(""a""=>1)



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=array(""a""=>1)



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4754 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=""string""

request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=""string""



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4755 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=-1



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=-1



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4756 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=0



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=0



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4757 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step:

 

1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=null



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=null



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4758 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=""!@#""



request_data[merchandise_data][auto_offshelve_time]=201307101021



3. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""  request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=""!@#""



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4759 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step: 



1. Submit merchandise and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""



 request_data[merchandise_data][auto_shelve_time]=201307101020



request_data[merchandise_data][auto_offshelve_time]=201307101019



3. get merchandise detail by mid



Expected Result:



2. response code return  400



[[ TC4760 ]]


 

submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step:

 

1. Submit merchandise set auto_shelve_type=timespan and get mid



2. Update merchandise by mid



 set request_data[merchandise_data][auto_shelve_type]=""appointment""



        request_data[merchandise_data][auto_shelve_time]=time()



        request_data[merchandise_data][auto_offshelve_time]=time()+60



3. get merchandise detail by mid



Expected Result:



2. response code return  400



[[ TC4761 ]]




submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1}



Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]



Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]







Step:

 

1. Submit merchandise  set auto_shelve_type=appointment and get mid



2. Update merchandise by mid



set request_data[auto_shelve_type]=""timespan""



     request_data[duration_day]=1



     request_dataoffshelve_tod]=2



     request_data[timezone]=Asia/Taipei



     request_data[auto_reshelve_allowed]=10



Expected Result:



2-3. response code return  400



    verify status.code=10



[[ TC4762 ]]


submit merchandise: (POST)/v1/egs/merchandise/submit/?user_update={0，1} 

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update] 

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid] 



Step: 

1. Submit merchandise set auto_shelve_type=appointment and get mid 

2. Update merchandise by mid 

set request_data[auto_shelve_type]="appointment"  

   request_data[auto_shelve_time]=time()-60 

   request_data[auto_offshelve_titme]=time()+60

   

Expected Result: 

2-3. response code return 400 

  verify status.code=10

[[ TC4790 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Get: (GET)/v1/egs/merchandise/get/[mid]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Get Details of Multiple:(Get)/v1/egs/merchandise/get_details?ids=[mid]

1.create a product，specName，specValue，model and get productId



Testing Steps: 

========== 

Step: 

1. Create Draft merchandise and get mid

  SET request_data->inventory??>product_id=productId

      request_data->inventory??>type=1

2. Get Merchandise by mid

3. Get Merchandise detail by mid

4. Get details of multiple merchandise，set ids=[mid]

Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->mess"='create draft ok'

2.1 http response code is 200

2.2 check response_data->merchandise_data->inventory->product_id=productId

response_data

[[ TC4791 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Get: (GET)/v1/egs/merchandise/get/[mid]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

1.create a product，specName，specValue，model and get productId



Testing Steps: 

========== 

Step: 

1. Create Draft merchandise and get mid

 SET request_data->inventory??>product_id=productId

   request_data->inventory??>type=1

   request_data->inventory??>price=129

2. Get Merchandise by mid

3. Get Merchandise detail by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200message='create draft ok'

2.1 http response code is 200

2.2 check response_data->merchandise_data->inventory->product_id=productId

response_data->merchandise_data->inventory->type=1

response_data-

[[ TC4792 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory=[{

   }，

2. Create Draft merchandise with required parameters

  set inventory=[{

     "type":1

   }，

3. Create Draft merchandise with required parameters

  set inventory=[{

     "product_id":$productId

   }，





Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=1

[[ TC4793 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory-&gt;product_id='測'

2. Create Draft merchandise with required parameters

  set inventory-&gt;type="測"

3. Create Draft merchandise with required parameters

  set inventory-&gt;price='測'





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=20

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=11

[[ TC4794 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id='12345678901234567890'

2. Create Draft merchandise with required parameters

  set inventory->type="1234567890"

3. Create Draft merchandise with required parameters

  set inventory->price=123456789012.11





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=1

[[ TC4795 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

 set inventory->product_id=''

2. Create Draft merchandise with required parameters

 set inventory->type=""

3. Create Draft merchandise with required parameters

 set inventory->price=''





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=1

[[ TC4796 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id=array(12)

2. Create Draft merchandise with required parameters

  set inventory->type=array(12)

3. Create Draft merchandise with required parameters

  set inventory->price=array(12)

4. Create Draft merchandise with required parameters

  set inventory=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=1

[[ TC4797 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id=array(12=>'a')

2. Create Draft merchandise with required parameters

  set inventory->type=array(12=>'a')

3. Create Draft merchandise with required parameters

  set inventory->price=array(12=>'a')

4. Create Draft merchandise with required parameters

  set inventory=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=1



[[ TC4798 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id=-1

2. Create Draft merchandise with required parameters

  set inventory->type=-1

3. Create Draft merchandise with required parameters

  set inventory->price=-1

4. Create Draft merchandise with required parameters

  set inventory=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=1

[[ TC4799 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

 set inventory->product_id=0

2. Create Draft merchandise with required parameters

 set inventory->type=0

3. Create Draft merchandise with required parameters

 set inventory->price=0

4. Create Draft merchandise with required parameters

 set inventory=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 200

4.1 http response code is 400

4.2 check status code and correct

status->code=1

[[ TC4800 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id=null

2. Create Draft merchandise with required parameters

  set inventory->type=null

3. Create Draft merchandise with required parameters

  set inventory->price=null

4. Create Draft merchandise with required parameters

  set inventory=null





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=1

[[ TC4801 ]]


========== 

URI Syntax: 

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. Create Draft merchandise with required parameters

  set inventory->product_id="!@#"

2. Create Draft merchandise with required parameters

  set inventory->type="!@#"

3. Create Draft merchandise with required parameters

  set inventory->price="!@#"

4. Create Draft merchandise with required parameters

  set inventory="!@#"





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=1

[[ TC4802 ]]


========== 

URI Syntax:  

Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，model and get productId1

Testing Steps: 

========== 

Step:  

1. Create Draft merchandise with required parameters

    set inventory=[{

      "product_id": "productId1"，

      "type": 1

     }，

     {

      "product_id": "productId1"，

      "type":2，

      "price": 123

     }]，





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

[[ TC4803 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}



Testing Steps: 

========== 

Step:  

1. mass submit merchandise

    SET request_data->mass_data->merchandise_data->inventory??>product_id=productId

           request_data->mass_data->merchandise_data->inventory??>type=1

Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=100

status->message='success'

1.3 verify response_data->batch_id

[[ TC4804 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}



Testing Steps: 

========== 

Step:  

1. mass submit merchandise

    SET request_data->mass_data->merchandise_data->inventory??>product_id=productId

           request_data->mass_data->merchandise_data->inventory??>type=1

           request_data->mass_data->merchandise_data->inventory??>price=129





Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=100

status->message='success'

1.3 verify response_data->batch_id

[[ TC4805 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory=[{

     }

2.mass submmit merchandise with required parameters

    set inventory=[{

         ""type"":1

     }

3.mass submmit merchandise with required parameters

    set inventory=[{

         ""product_id"":$productId

     }





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4806 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory-&gt;product_id='測'

2.mass submmit merchandise with required parameters

    set inventory-&gt;type=""

3.mass submmit merchandise with required parameters

    set inventory-&gt;price="測"



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=10

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=1

[[ TC4807 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id='12345678901234567890'

2.mass submmit merchandise with required parameters

    set inventory->type="1234567890"

3.mass submmit merchandise with required parameters

    set inventory->price=123456789012.11





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4808 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id=''

2.mass submmit merchandise with required parameters

    set inventory->type=""

3.mass submmit merchandise with required parameters

    set inventory->price=""

4.mass submmit merchandise with required parameters

    set inventory=""





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4809 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id=array(12)

2.mass submmit merchandise with required parameters

    set inventory->type=array(12)

3.mass submmit merchandise with required parameters

    set inventory->price=array(12)

4.mass submmit merchandise with required parameters

    set inventory=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4810 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id=array(12=>'a')

2.mass submmit merchandise with required parameters

    set inventory->type=array(12=>'a')

3.mass submmit merchandise with required parameters

    set inventory->price=array(12=>'a')

4.mass submmit merchandise with required parameters

    set inventory=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4811 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id=-1

2.mass submmit merchandise with required parameters

    set inventory->type=-1

3.mass submmit merchandise with required parameters

    set inventory->price=-1

4.mass submmit merchandise with required parameters

    set inventory=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4812 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory->product_id=0

2.mass submmit merchandise with required parameters

    set inventory->type=0

3.mass submmit merchandise with required parameters

    set inventory->price=0

4.mass submmit merchandise with required parameters

    set inventory=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4813 ]]


========== 

URI Syntax: 

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1} 

1.create a product，specName，specValue，model and get productId 

Testing Steps: 

========== 

Step: 

1. mass submit merchandise with required parameters 

set inventory->product_id=null 

2.mass submmit merchandise with required parameters 

set inventory->type=null 

3.mass submmit merchandise with required parameters 

set inventory->price=null 

4.mass submmit merchandise with required parameters 

set inventory=null 





Expected Results 

========== 

1.1 http response code is 400 

1.2 check status code and correct 

status->code=20

2.1 http response code is 400 

2.2 check status code and correct 

status->code=10 

3.1 http response code is 400 

3.2 check status code and correct 

status->code=10 

4.1 http response code is 400 

4.2 check status code and correct 

status->code=10

[[ TC4814 ]]


========== 

URI Syntax: 

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1} 

1.create a product，specName，specValue，model and get productId 

Testing Steps: 

========== 

Step: 

1. mass submit merchandise with required parameters 

set inventory->product_id="!@#" 

2.mass submmit merchandise with required parameters 

set inventory->type="!@#" 

3.mass submmit merchandise with required parameters 

set inventory->price="!@#" 

4.mass submmit merchandise with required parameters 

set inventory="!@#" 





Expected Results 

========== 

1.1 http response code is 400 

1.2 check status code and correct 

status->code=20

2.1 http response code is 400 

2.2 check status code and correct 

status->code=10 

3.1 http response code is 400 

3.2 check status code and correct 

status->code=10 

4.1 http response code is 400 

4.2 check status code and correct 

status->code=10

[[ TC4815 ]]


========== 

URI Syntax:  

mass submit: (POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId1

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters

    set inventory=[{

      "product_id": "productId1"，

      "type": 1

     }，

     {

      "product_id": "productId1"，

      "type":2，

      "price": 123

     }]





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10



[[ TC4816 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，model and get productId1

Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

 request_data->_data->merchandise_data->inventory??>product_id=productId

           request_data->_data->merchandise_data->inventory??>type=1

2. Get Merchandise by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message="sert ok"



2.1 http response code is 200

2.2 check data is the same as insertt1

[[ TC4817 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1} 

Get: /v1/egs/merchandise/get/[mid] 

1.create a product，specName，specValue，model and get productId1 



Testing Steps: 

========== 

Step: 

1. submit merchandise and get mid 

SET request_data->_data->merchandise_data->inventory??>product_id=productId 

request_data->_data->merchandise_data->inventory??>type=1 

request_data->_data->merchandise_data->inventory??>price=129 

2. get merchandise by mid 





Expected Results 

========== 

1.1 http response code is 200 

1.2 check status code and correct 

status->code=200 

status->message="ert ok" 



2.1 http response code is 200 

2.2 check data is the same as insert\\/

[[ TC4818 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory=[{

     }

2.submmit merchandise with required parameters

    set inventory=[{

         "type":1

     }

3.submmit merchandise with required parameters

    set inventory=[{

         "product_id":$productId

     }





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4819 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory-&gt;product_id='測'

2.submmit merchandise with required parameters

    set inventory-&gt;type=""

3.submmit merchandise with required parameters

    set inventory-&gt;price="測"

4.submmit merchandise with required parameters

    set inventory="測"

Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=20

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=10

4.1 http response code is 400

4.2 check status code and correct

status-&gt;code=10

[[ TC4820 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->product_id='12345678901234567890'

2.submmit merchandise with required parameters

    set inventory->type="1234567890"

3.submmit merchandise with required parameters

    set inventory->price=123456789012.11





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=20

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10



[[ TC4821 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

 set inventory->product_id=''

2.submmit merchandise with required parameters

 set inventory->type=""

3.submmit merchandise with required parameters

 set inventory->price=""

4.submmit merchandise with required parameters

 set inventory=""





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 200

[[ TC4822 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

  set inventory->product_id=array(12)

2.submmit merchandise with required parameters

  set inventory->type=array(12)

3.submmit merchandise with required parameters

  set inventory->price=array(12)

4.submmit merchandise with required parameters

  set inventory=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4823 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

  set inventory->product_id=array(12=>'a')

2.submmit merchandise with required parameters

  set inventory->type=array(12=>'a')

3.submmit merchandise with required parameters

  set inventory->price=array(12=>'a')

4.submmit merchandise with required parameters

  set inventory=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4824 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

  set inventory->product_id=-1

2.submmit merchandise with required parameters

  set inventory->type=-1

3.submmit merchandise with required parameters

  set inventory->price=-1

4.submmit merchandise with required parameters

  set inventory=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 400

4.2 check status code and correct

status->code=10

[[ TC4825 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

  set inventory->product_id=0

2.submmit merchandise with required parameters

  set inventory->type=0

3.submmit merchandise with required parameters

  set inventory->price=0

4.submmit merchandise with required parameters

  set inventory=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

4.1 http response code is 200

[[ TC4826 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1} 

1.create a product，specName，specValue，model and get productId 

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters 

set inventory->product_id=null 

2.submmit merchandise with required parameters 

set inventory->type=null 

3.submmit merchandise with required parameters 

set inventory->price=null 

4.submmit merchandise with required parameters 

set inventory=null 





Expected Results 

========== 

1.1 http response code is 400 

1.2 check status code and correct 

status->code=10

2.1 http response code is 400 

2.2 check status code and correct 

status->code=10 

3.1 http response code is 400 

3.2 check status code and correct 

status->code=10 

4.1 http response code is 200

[[ TC4827 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1} 

1.create a product，specName，specValue，model and get productId 

Testing Steps: 

========== 

Step: 

1.  submit merchandise with required parameters 

set inventory->product_id="!@#" 

2.submmit merchandise with required parameters 

set inventory->type="!@#" 

3.submmit merchandise with required parameters 

set inventory->price="!@#" 

4.submmit merchandise with required parameters 

set inventory="!@#" 





Expected Results 

========== 

1.1 http response code is 400 

1.2 check status code and correct 

status->code=20

2.1 http response code is 400 

2.2 check status code and correct 

status->code=10 

3.1 http response code is 400 

3.2 check status code and correct 

status->code=10 

4.1 http response code is 400 

4.2 check status code and correct 

status->code=10

[[ TC4828 ]]


========== 

URI Syntax: 

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，model and get productId1

Testing Steps: 

========== 

Step: 

1. submit merchandise with required parameters

  set inventory=[{

   "product_id": "productId1"，

   "type": 1

   }，

   {

   "product_id": "productId1"，

   "type":1，

   }]





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

[[ TC4829 ]]


========== 

URI Syntax:  

create draft: /v1/egs/merchandise/create_draft/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. create draft merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1



 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2



 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3



2. Get Merchandise by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message="t ok"



2.1 http response code is 200

2.2 check data is the same as insert1100a

[[ TC4830 ]]


========== 

URI Syntax:  

create draft: /v1/egs/merchandise/create_draft/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. create draft merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[0]->saleQuantity=1

 request_data->merchandise_data->inventory??>models[0]->notifyQuantity=1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

merchandise_data->inventory??>models[1]->saleQuantity=2

 request_data->merchandise

[[ TC4831 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  create draft merchandise with required parameters and  with a model

     unset inventory.models[0].modelId

2. create draft merchandise with required parameters and  with a model

    unset inventory.models[0].saleQuantity

3.create draft merchandise with required parameters and  with a model

    unset inventory.models[0].notifyQuantity



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct

[[ TC4832 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters and a model

    set inventory-&gt;models[0].modelId='測'

2.create draft merchandise with required parameters and a model

    set inventory-&gt;models[0].saleQuantity="測"

3.create draft merchandise with required parameters and a model

    set inventory-&gt;models[0].notifyQuantity=‘測’



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=10

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=10

[[ TC4833 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId='9123456789123'

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=""9123456789123""

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=??9123456789123??





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4834 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=''

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=""""

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=????





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4835 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=array(12)

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12)

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4836 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=array(12=>'a')

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12=>'a')

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4837 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4838 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct



[[ TC4839 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=0

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=0

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct



[[ TC4840 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=null

2.create draft merchandise with required parameters

    set inventory->models[0].saleQuantity=null

3.create draft merchandise with required parameters

    set inventory->models[0].notifyQuantity=null





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct

[[ TC4841 ]]


========== 

URI Syntax:  

create draft:(POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  create merchandise with required parameters and a model

    set inventory->models[0].modelId="!@#"

2.create draft merchandise with required parameters and a model

    set inventory->models[0].saleQuantity="!@#"

3.create draft merchandise with required parameters and a model

    set inventory->models[0].notifyQuantity="!@#"





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4842 ]]


========== 

URI Syntax:  

create draft: /v1/egs/merchandise/create_draft/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. create draft merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[0]->saleQuantity=1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

 request_data->merchandise_data->inventory??>models[1]->saleQuantity=2

 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3

 request_data->merchandise_data->inventory??>models[2]->saleQuantity="\/>



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

qquest_d

[[ TC4843 ]]


========== 

URI Syntax:  

create draft: /v1/egs/merchandise/create_draft/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，2 models and get productId1，3 model ids modelId1，modelId2

Testing Steps: 

========== 

Step:  

1. create draft merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->me

[[ TC4844 ]]


========== 

URI Syntax:  

create draft: /v1/egs/merchandise/create_draft/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，a model and get productId1，model id modelId1

Testing Steps: 

========== 

Step:  

1. create draft merchandise(POST) and get mid

 request_data->merchandise_data->inventory[0]??>product_id=productId1

 request_data->merchandise_data->inventory[0]??>type=

[[ TC4845 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get: (GET)/v1/egs/merchandise/get/[mid]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Get Details of Multiple:(Get)/v1/egs/merchandise/get_details?ids=[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

request_data->merchandise_data->inventory??>models[2]->modelId=modelId3

2. Get Merchandise by mid

3. Get Merchandise detail by mid

4. Get details of multiple merchandise，set ids=[mid]

Expected Results 

========== 

1." response code is 200

1.2 check status code and correct

status->code=200

[[ TC4846 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get: (GET)/v1/egs/merchandise/get/[mid]

Get detail:(GET)/v1/egs/merchandise/get_detail/[mid]

Get Details of Multiple:(Get)/v1/egs/merchandise/get_details?ids=[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3



Testing Steps: 

========== 

Step: 

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory >product_id=productId

 request_data->merchandise_data->inventory >type=1

 request_data->merchandise_data->inventory >models[0]->modelId=modelId1

 request_data->merchandise_data->inventory >models[0]->saleQuantity=1

 request_data->merchandise_data->inventory >models[0]->notifyQuantity=1

 request_data->merchandise_data->inventory >models[1]->modelId=modelId2

 request_data->merchandise_data->inventory >models[1]->saleQuantity=2

 request_data->merchandise_data->inventory >models[1]->notifyQuantity=2

 request_data->merchandise_data->inventory >models[2]->modelId=modelId3

 request_data->merchandise_data->inventory >models[2]->saleQuantity=3

 request_data->merchandise_data->inventory >models[2]->notifyQuantity=3

2. Get Merchandise by mid

3. Get Merchandise detail by mid

4. Get details of multiple merchandise，set ids=[mid]



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message='create draft ok'

2.1 http response code is 200

2.2 check response_data->merchandise_data->inventory->product_id=productId

response_data->merchandise_data->inventory->type=1

response_data->merchandise_data->inventory->price=129

3.1 http response code is 200

3.2 check response_data->merchandise_data->in"entory->product_id=productId

response_data->merchandise_data->inventory->price

[[ TC4847 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. mass Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3

2. Get Merchandise by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message="t ok"



2.1 http response code is 200

2.2 check data is the same as inserttdata

[[ TC4848 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1.mass Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[0]->saleQuantity=1

 request_data->merchandise_data->inventory??>models[0]->notifyQuantity=1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId"> request_data->merchandise_data->inventory??>models[1]->saleQuantity=2

 request_data->merc

[[ TC4849 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1. mass submit merchandise with required parameters and  with a model

     unset inventory.models[0].modelId

2.mass submit merchandise with required parameters and  with a model

    unset inventory.models[0].saleQuantity

3.mass submit merchandise with required parameters and  with a model

    unset inventory.models[0].notifyQuantity



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct



[[ TC4850 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters and a model

    set inventory-&gt;models[0].modelId='測'

2.mass submit merchandise with required parameters and a model

    set inventory-&gt;models[0].saleQuantity="測"

3.mass submit merchandise with required parameters and a model

    set inventory-&gt;models[0].notifyQuantity='測'



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=10

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=10y

[[ TC4851 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId='9123456789123'

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=??9123456789123??

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=??9123456789123??





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10



[[ TC4852 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=''

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=""

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=????





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4853 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=array(12)

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12)

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4854 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=array(12=>'a')

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12=>'a')

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10



[[ TC4855 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4856 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 200

3.2 check status code and correct



[[ TC4857 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=0

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=0

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 200

3.2 check status code and correct



[[ TC4858 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId=null

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity=null

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=null





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct

[[ TC4859 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.mass submit merchandise with required parameters

    set inventory->models[0].modelId="!@#"

2.mass submit merchandise with required parameters

    set inventory->models[0].saleQuantity="!@#"

3.mass submit merchandise with required parameters

    set inventory->models[0].notifyQuantity="!@#"





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4860 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1.mass Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[0]->saleQuantity=1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

 request_data->merchandise_data->inventory??>models[1]->saleQuantity=2

 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3

 request_data->merchandise_data->inventory??>models[2]->saleQuantity="r \/>



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=100> reque

[[ TC4861 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，2 models and get productId1，2 model ids modelId1，modelId2

Testing Steps: 

========== 

Step:  

1.mass Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->me

[[ TC4862 ]]


========== 

URI Syntax:  

mass Submit:(POST)/v1/egs/merchandise/mass_submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，a model and get productId1，model id modelId1

Testing Steps: 

========== 

Step:  

1.mass Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory[0]??>product_id=productId1

 request_data->merchandise_data->invent

[[ TC4863 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2



 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3



2. Get Merchandise by mid



Expected Results 

========== 

1.1 http response code is 200

1.2 check status code and correct

status->code=200

status->message="rt ok""



2.1 http response code is 200

2.2 check data is the same as insert22 ch

[[ TC4864 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. Submit merchandise(POST) and get mid

 request_data-&gt;merchandise_data-&gt;inventory??&gt;product_id=productId

 request_data-&gt;merchandise_data-&gt;inventory??&gt;type=1

 request_data-&gt;merchandise_data-&gt;inventory??&gt;models[0]-&gt;modelId=modelId1

 request_data-&gt;merchandise_data-&gt;inventory??&gt;models[0]-&gt;saleQuantity=1

 request_data-&gt;merchandise_data-&gt;inventory??&gt;models[0]-&gt;notifyQuantity=1

 request_data-&gt;merchandise_data-&gt;inventory??&gt;models[1]-&gt;mode"elId2

 request_data-&gt;merchandise_data-&gt;inventory??&gt;models[1]-&gt;saleQuantity=2

 request

[[ TC4865 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters and  with a model

     unset inventory.models[0].modelId

2. submit merchandise with required parameters and  with a model

    unset inventory.models[0].saleQuantity

3.submit merchandise with required parameters and  with a model

    unset inventory.models[0].notifyQuantity



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct



[[ TC4866 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters and a model

    set inventory-&gt;models[0].modelId='測'

2.submit merchandise with required parameters and a model

    set inventory-&gt;models[0].saleQuantity="測"

3.submit merchandise with required parameters and a model

    set inventory-&gt;models[0].notifyQuantity='測'



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status-&gt;code=10

2.1 http response code is 400

2.2 check status code and correct

status-&gt;code=10

3.1 http response code is 400

3.2 check status code and correct

status-&gt;code=100

[[ TC4867 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=??9123456789123??

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=??9123456789123??

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=??9123456789123??





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4868 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=''

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=""

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=????





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4869 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=array(12)

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12)

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12)





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10



[[ TC4870 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=array(12=>'a')

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=array(12=>'a')

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=array(12=>'a')





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4871 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4872 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=-1

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=-1

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=-1





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 200

3.2 check status code and correct

[[ TC4873 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=0

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=0

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=0





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 200

2.2 check status code and correct

3.1 http response code is 200

3.2 check status code and correct

[[ TC4874 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId=null

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity=null

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity=null





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4875 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

1.create a product，specName，specValue，a model and get productId1，modelId1

Testing Steps: 

========== 

Step:  

1.  submit merchandise with required parameters

    set inventory->models[0].modelId="!@#"

2.submit merchandise with required parameters

    set inventory->models[0].saleQuantity="!@#"

3.submit merchandise with required parameters

    set inventory->models[0].notifyQuantity="!@#"





Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10

2.1 http response code is 400

2.2 check status code and correct

status->code=10

3.1 http response code is 400

3.2 check status code and correct

status->code=10

[[ TC4876 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，3 models and get productId1，3 model ids modelId1，modelId2，modelId3

Testing Steps: 

========== 

Step:  

1. submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

 request_data->merchandise_data->inventory??>models[0]->modelId=modelId1

 request_data->merchandise_data->inventory??>models[0]->saleQuantity=1

 request_data->merchandise_data->inventory??>models[1]->modelId=modelId2

 request_data->merchandise_data->inventory??>models[1]->saleQuantity=2

 request_data->merchandise_data->inventory??>models[2]->modelId=modelId3

 request_data->merchandise_data->inventory??>models[2]->saleQuantity="\/>



Expected Results 

========== 

1.1 http response code is 400

1.2 check status code and correct

status->code=10<



[[ TC4877 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，2 models and get productId1，2 model ids modelId1，modelId2

Testing Steps: 

========== 

Step:  

1. submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory??>product_id=productId

 request_data->merchandise_data->inventory??>type=1

[[ TC4878 ]]


========== 

URI Syntax:  

submit:(POST)/v1/egs/merchandise/submit/?user_update={0，1}

Get:  /v1/egs/merchandise/get/[mid]

1.create a product，specName，specValue，a model and get productId1，model id modelId1

Testing Steps: 

========== 

Step:  

1. submit merchandise(POST) and get mid

 request_data->merchandise_data->inventory[0]??>product_id=productId1

 request_data->merchandise_data

[[ TC4879 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)

2. Update merchandise by mid with full inventory data

 

Expected Result:

1. response return success 200

[[ TC4880 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1.create a product，model.specName，specValue and get productId，modelID



Step: 

1. Submit merchandise with inventory and get mid

2. Update merchandise by mid with full inventory data

 set inventory.productId=productId

 set inventory.models[0].modelId=modelId

 set inventory.models[0].notifyQuantity=12

 set inventory.price=12.12

 set inventory.type=1

3.get merchanse by mid

Expected Result:

2. response return success 200

3.verify responseData=update Data

[[ TC4881 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product，models)

2. Update merchandise by mid with full inventory data

  unset inventory.models

3.get merchanse by mid

Expected Result:

2. response return success 200

3.verify responseData=update Data

  verify the stock is not exist

[[ TC4882 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product，models)



2. Update merchandise by mid with full inventory data

 set inventory=[{

   ""product_id"": ProductId，

    ""price"":12，

     ""type"":1

}]

3.get merchanse by mid

4. Update merchandise by mid with full inventory data

 set inventory=[{

   models[

     {""modelid"":modelId，""notifyQuantity"":12}

   ]

}]

5.get merchanse by mid

Expected Result:

2/4. response return success 200

3/5.verify responseData=update Data

[[ TC4883 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1.create 2 products and productId1，product2，

2 crate specNames，2 specValues

3 models and get modelId1，mdoelId2



Step: 

1. Submit merchandise with inventory and get mid(include inventory product，models)

2. Update merchandise by mid with full inventory data

 set inventory=[

   {

   "product_id": ProductId，

    "price":12，

     "type":1}

     {

   "product_id": ProductI2，

    "price":12，

     "type":1}

]

3.get merchanse by mid

4. Update merchandise by mid with full inventory data

 set inventory=[{

   models[

     {"modelid":modelId1，"notifyQuantity":12}

     {"modelid":modelId2，"notifyQuantity":12}

   ]

}]

5.get merchanse by mid

Expected Result:

2/4. response return success 200

3/5.verify responseData=update Data

[[ TC4884 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product)

2. Update merchandise by mid

    set inventory[0].productId=productId

    set inventory[0].type=2

    set  inventory[0].price=20.12

          

 

Expected Result:

2. response return success 200

[[ TC4885 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product)

2. Update merchandise by mid with default data

    set inventory[0].models[0].notifyQuantity=-1

          

 

Expected Result:

2. response return success 200

    verify response data not have notifyQuantity data

[[ TC4886 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include product，3models.specName，specValue)

   set saleQuantity=10

2. adjust merchandise by mid with required parameters   

   set delta=2

 

Expected Result:

1. response return  200

    currentQuantity=12

    originalQuantity=10

[[ TC4887 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)

   set saleQuantity=10

2. adjust merchandise by mid with all parameters   

   set delta=-2

 

Expected Result:

1. response return  200

    currentQuantity=8

   originalQuantity=10

[[ TC4888 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid without mid

2. adjust merchandise by mid without inventory

3. adjust merchandise by mid without product

4. adjust merchandise by mid without type

5. adjust merchandise by mid without models

6. adjust merchandise by mid without modelId

7. adjust merchandise by mid without delta

8. adjust merchandise by mid without note

 

Expected Result:

1-8. response return  400

      status code is 10

[[ TC4889 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid="測"urlencode)

2. adjust merchandise by mid 

 set inventory="測"

3. adjust merchandise by mid 

set product="測"

4. adjust merchandise by mid 

set type="測"

5. adjust merchandise by mid 

set models="測"

6. adjust merchandise by mid 

set modelId="測"

7. adjust merchandise by mid 

set delta="測"

8. adjust merchandise by mid 

set note="測"

&nbsp;

Expected Result:

1.respoonse http code is 404

    status code is 8

2-7. response http code 400

  stutus code=10

8. resposne http code 200

[[ TC4890 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid is char(21)

2. adjust merchandise by mid 

set productId=9999999999999

3. adjust merchandise by mid 

set type=1234567890.1234

4. adjust merchandise by mid 

set modelId=9999999999999

5. adjust merchandise by mid 

set delta=10000 00000

6. adjust merchandise by mid 

set delta=-10000 00000

7. adjust merchandise by mid 

set note is varchar(513)

 

Expected Result:

1-4.7. response return  400

  stutus code=10

5/6 response http code is 400

  status code is 21

[[ TC4891 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=""

2. adjust merchandise by mid 

 set inventory=""

3. adjust merchandise by mid 

set product=""

4. adjust merchandise by mid 

set type=""

5. adjust merchandise by mid 

set models=""

6. adjust merchandise by mid 

set modelId=""

7. adjust merchandise by mid 

set delta=""

8. adjust merchandise by mid 

set note=""

 

Expected Result:

1.response http code is 404

 status code is 8

2-8. response return  400

  stutus code=10



[[ TC4892 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=array(12)

2. adjust merchandise by mid 

 set inventory=array(12)

3. adjust merchandise by mid 

set product=array(12)

4. adjust merchandise by mid 

set type=array(12)

5. adjust merchandise by mid 

set models=array(12)

6. adjust merchandise by mid 

set modelId=array(12)

7. adjust merchandise by mid 

set delta=array(12)

8. adjust merchandise by mid 

set note=array(12)

 

Expected Result:

1-8. response return  400

  stutus code=10

[[ TC4893 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=array(a=>12)

2. adjust merchandise by mid 

 set inventory=array(a=>12)

3. adjust merchandise by mid 

set product=array(a=>12)

4. adjust merchandise by mid 

set type=array(a=>12)

5. adjust merchandise by mid 

set models=array(a=>12)

6. adjust merchandise by mid 

set modelId=array(a=>12)

7. adjust merchandise by mid 

set delta=array(a=>12)

8. adjust merchandise by mid 

set note=array(a=>12)

 

Expected Result:

1-8. response return  400

  stutus code=10

[[ TC4894 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid='abc'

2. adjust merchandise by mid 

 set inventory='abc'

3. adjust merchandise by mid 

set product='abc'

4. adjust merchandise by mid 

set type='abc'

5. adjust merchandise by mid 

set models='abc'

6. adjust merchandise by mid 

set modelId='abc'

7. adjust merchandise by mid 

set delta='abc'

8. adjust merchandise by mid 

set note='abc'

 

Expected Result:

1. response http code is 404

    status code is 8

2-7. response return  400

  stutus code=10

8. response http code is 200

[[ TC4895 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=-1

2. adjust merchandise by mid 

 set inventory=-1

3. adjust merchandise by mid 

set product=-1

4. adjust merchandise by mid 

set type=-1

5. adjust merchandise by mid 

set models=-1

6. adjust merchandise by mid 

set modelId=-1

7. adjust merchandise by mid 

set delta=-1

8. adjust merchandise by mid 

set note=-1

 

Expected Result:

1.response http code is 404

 status code is 8

2-6. response return  400

  stutus code=10

7-8. response http code is 200

[[ TC4896 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=0

2. adjust merchandise by mid 

 set inventory=0

3. adjust merchandise by mid 

set product=0

4. adjust merchandise by mid 

set type=0

5. adjust merchandise by mid 

set models=0

6. adjust merchandise by mid 

set modelId=0

7. adjust merchandise by mid 

set delta=0

8. adjust merchandise by mid 

set note=0

 

Expected Result:

1.response http code is 404

 status code is 8

2-6. response return  400

  stutus code=10

7-8. response http code is 200

[[ TC4897 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid=null

2. adjust merchandise by mid 

 set inventory=null

3. adjust merchandise by mid 

set product=null

4. adjust merchandise by mid 

set type=null

5. adjust merchandise by mid 

set models=null

6. adjust merchandise by mid 

set modelId=null

7. adjust merchandise by mid 

set delta=null

8. adjust merchandise by mid 

set note=null

 

Expected Result:

1-8. response return  4nullnull

  stutus code=10



[[ TC4898 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise with inventory and get mid(include product，model.specName，specValue)



Step: 

1. adjust merchandise by mid 

   set mid='!@#'

2. adjust merchandise by mid 

 set inventory='!@#'

3. adjust merchandise by mid 

set product='!@#'

4. adjust merchandise by mid 

set type='!@#'

5. adjust merchandise by mid 

set models='!@#'

6. adjust merchandise by mid 

set modelId='!@#'

7. adjust merchandise by mid 

set delta='!@#'

8. adjust merchandise by mid 

set note='!@#'

 

Expected Result:

1. response http code is 404

  status code is 8

2-7. response return  400

  stutus code=10

8. response http code is 200"

[[ TC4899 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1 .create product，model.specName，specValue and get productId，modelId1

2. Submit merchandise with inventory and get mid





Step: 

1. adjust merchandise by mid 

set inventory[0].models[0].modelId=modelId1 

set inventory[0].models[1].modelId=modelId1 



Expected Result:

1. response http code is 400

[[ TC4900 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1 .create product，model.specName，specValue and get productId，modelId1

2. Submit merchandise with inventory and get mid





Step: 

1. adjust merchandise by mid 

set mid=99999999999

Expected Result:

1. response http code is 404

   status code is 8

[[ TC4901 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include product，3 models.specName，specValue)

2. adjust merchandise by mid with required parameters   

 

Expected Result:

1. response return  200



[[ TC4902 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include product，3 models.specName，specValue)

2. adjust merchandise by mid with all parameters   

 

Expected Result:

1. response return  200

[[ TC4903 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1. Submit merchandise without inventory and get mid

2. create product，specName，specValue，model and get modelId，productId



Step: 

1. adjust merchandise by mid 

set inventory[0].productId=productId

set inventory[0].models[0]，modelId=modelId

set inventory[0].type=1

set inventory[0].models[0]，delta=10

set inventory[0].models[0].note=add



Expected Result:

1. response http code is 400

[[ TC4904 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

adjust stocks:(PUT)    /v1/egs/merchandise/adjust_stocks//?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



1 create product，specName，specValue，model and get modelId，productId

2. Submit merchandise without inventory and get mid

    set saleQuantity=10





Step: 

1. adjust merchandise by mid 

set inventory[0].productId=productId

set inventory[0].models[0]，modelId=modelId

set inventory[0].type=1

set inventory[0].models[0]，delta=-12

set inventory[0].models[0].note=add



Expected Result:

1. response http code is 400

[[ TC4905 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product，models)

2. Update merchandise by mid with full inventory data

 set inventory.models[0].saleQuantity=null

  set inventory.models[0].notifyQuantity=null

Expected Result:

2. response return  400

[[ TC4906 ]]


Create Draft: (POST)/v1/egs/merchandise/create_draft/?user_update={0，1}

Update:(PUT)/v1/egs/merchandise/update/[mid]/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. Submit merchandise with inventory and get mid(include inventory product，models，saleQuantity，notifyQuantity)

2. Update merchandise by mid with full inventory data

 set inventory.models[0].saleQuantity=12

Expected Result:

2. response return  400

[[ TC4907 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update] 

batch adjust stocks:(PUT) /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update] 

Get: /v1/egs/merchandise/get/[mid] 



Step: 

1. create 3 products，and corresponding 3 models set saleQuantity=20，28，26 and get productId1，productId2，productId3，modelId1，modelId2，mdoelId3 and publish the 3 products 

2. Submit 3 merchandise with inventory set saleQuantity=10，8，6 and get mid1，mid2，mid3 and shevele 

3. batch adjust stocks merchandise by mids，productIds，modelIds 

 set delta=0，2，-1 

4.get merchandise detail by mid

5. get product detail by productIds 



Expected Result: 

3.1. response http code 200 

    status.code=200

    statis.message=""success""

3.2. verify responseData[response_data] is not exist

4.1 response http code 200

 verify saleQuantity=10，10，5

5.1 response http code 200 

 verify saleQuantity=20，20，25

[[ TC4908 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 200 models and get productId，modelId1，modelId2...mdoelId200 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2...modelId200



Expected Result:

3.1. response http code  200

3，2  verify status.code is 200

      verify status.message="success"

[[ TC4909 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['mid']

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['productId']

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['type']

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['modelId']

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['delta']

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set without request_data['batch_adjust_data'][1]['note']



Expected Result:

3.1-8.1. response http code  400

3，2  verify status.code is 10

[[ TC4910 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']="測"

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']="測"

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']="測"

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']="測"

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']="測"

 8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']="測"

Expected Result:

3.1-7.1. response http code  400

3，2-7.2  verify status.code is 10

8.1 resposne http code 200

      verify status code 200

[[ TC4911 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid'] is char(12)

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=""9999999999999""

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=1234567890.1234

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=""9999999999999""

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=10000 00000

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=-10000 00000

9. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note'] varchar(513)



Expected Result:

3.1-8.1. response http code  400

3.2-8.2  verify status.code is 10

[[ TC4912 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=""

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=""

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=""

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=""

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=""

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=""



Expected Result:

3.1-7.1. response http code  400

3，2-7.2  verify status.code is 10

8.1 response http code 200

      verify status.ocde is 200



[[ TC4913 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=array(12)

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=array(12)

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=array(12)

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=array(12)

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=array(12)

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=array(12)



Expected Result:

3.1-7.1. response http code  400

3，2-7.2  verify status.code is 10

8 response http code 200

[[ TC4914 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=array(""a""=>12)

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=array(""a""=>12)

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=array(""a""=>12)

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=array(""a""=>12)

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=array(""a""=>12)

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=array(""a""=>12)



Expected Result:

3.1-7.1. response http code  400

3，2-7.2  verify status.code is 10

8 response http code 200

[[ TC4915 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=""string""

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=""string""

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=""string""

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=""string""

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=""string""

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=""string""



Expected Result:

3.1-8.1. response http code  400

3，2-8.2  verify status.code is 10

[[ TC4916 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=-1

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=-1

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=-1

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=-1

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=-1

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=-1



Expected Result:

3.1-6.1，8，1 response http code  400

3，2-6.2，8.2  verify status.code is 10

7.1 http response code 200

7.2 status code is 200

[[ TC4917 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=0

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=0

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=0

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=0

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=0

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=0



Expected Result:

3.1-6.1，8，1 response http code  400

3，2-6.2，8.2  verify status.code is 10

7.1 http response code 200

7.2 status code is 200

[[ TC4918 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=null

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=null

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=null

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=null

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=null

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=null



Expected Result:

3.1-8.1. response http code  400

3，2-8.2  verify status.code is 10

[[ TC4919 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['mid']=""!@#""

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['productId']=""!@#""

5. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['type']=""!@#""

6. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['modelId']=""!@#""

7. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['delta']=""!@#""

8. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set  request_data['batch_adjust_data'][1]['note']=""!@#""



Expected Result:

3.1-7.1. response http code  400

3，2-7.2  verify status.code is 10

8.1 response http code 200

8.2 response http code 200

[[ TC4920 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create 3 products，and corresponding 3 models and get productId1，productId2，productId3，modelId1，modelId2.mdoelId3 and publish the product1，product2，product3

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. unpublish product2

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

5.reshelve the merchandise

6.batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3





Expected Result:

4.1. response http code  400

4，2  verify status.code is 10

      verify error_list message=""product status error""

6.1. response http code  400

6，2  verify status.code is 10

      verify error_list message=""merchandise status error""

[[ TC4921 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 2 models and get productId，modelId1，modelId2 and publish the product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2

    set batch_adjust_data[0][mid]=mid1

          batch_adjust_data[0][product_id]=productId1

          batch_adjust_data[0][modelId]=modelId1

          batch_adjust_data[1][mid]=mid1

          batch_adjust_data[1][product_id]=productId1

          batch_adjust_data[1][modelId]=modelId2

          batch_adjust_data[2][mid]=mid1

          batch_adjust_data[2][product_id]=productId1

          batch_adjust_data[2][modelId]=modelId2    



Expected Result:

3.1. response http code  400

3，2  verify status.code is 10

      verify error_list

[[ TC4922 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory set saleQuantity=10 and get mid1

and shevele the merchandise

3. Submit a merchandise without inventory and get mid2

and shevele the merchandise

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set batch_adjust_data[0][mid]=mid2

          batch_adjust_data[0][product_id]=productId1

          batch_adjust_data[0][modelId]=modelId1

          batch_adjust_data[1][mid]=mid1

          batch_adjust_data[1][product_id]=productId1

          batch_adjust_data[1][modelId]=modelId2

          batch_adjust_data[2][mid]=mid1

          batch_adjust_data[2][product_id]=productId1

          batch_adjust_data[2][modelId]=modelId3



Expected Result:

4.1. response http code  400

4，2  verify status.code is 10



[[ TC4923 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1(saleQuantity=7)，modelId2(saleQuantity=7).mdoelId(3saleQuantity=7) and publish the  product

2. Submit a merchandise with inventory set saleQuantity=7，7 and get mid1

and shevele the merchandise

    unset inventory[0][models][2]['saleQuantity']

    unset inventory[0][models][2]['notifyQuantity']

3. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set batch_adjust_data[0][delta]=-10

    set batch_adjust_data[1][delta]=999999999

    set batch_adjust_data[2][delta]=2    



Expected Result:

3.1. response http code  400

3，2  verify status.code is 21

       verify status.message=""inventory error""

       verify error_list[merchandise_error_list][0/1].code=21-1

       verify error_list[merchandise_error_list][2].code=21-2

       verify error_list[merchandise_error_list][0/1/2].mid=create data mid

       verify error_list[merchandise_error_list][0/1/2].product_id=create data product_Id

       verify error_list[merchandise_error_list][0/1/2].modelId=create data modelId

       verify error_list[merchandise_error_list][0/1/2].type=create data type

3.3  verify error_list[product_error_list][0/1].code=21-1

       verify error_list[product_error_list][2].code=21-2

       verify error_list[product_error_list][0/1/2].mid=create data mid

       verify error_list[product_error_list][0/1/2].product_id=create data product_Id

       verify error_list[product_error_list][0/1/2].modelId=create data modelId

       verify error_list[product_error_list][0/1/2].type=create data type

[[ TC4924 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update]

batch adjust stocks:(PUT)        /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update]

Get: /v1/egs/merchandise/get/[mid]



Step: 

1. create a products，and corresponding 3 models and get productId，modelId1，modelId2.mdoelId3 and publish the  product

2. Submit a merchandise with inventory and get mid1

3. shevele the merchandise

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3

    set batch_adjust_data[0][mid]=99999

          batch_adjust_data[0][product_id]=productId1

          batch_adjust_data[0][modelId]=modelId1

          batch_adjust_data[1][mid]=mid1

          batch_adjust_data[1][product_id]=9999

          batch_adjust_data[1][modelId]=modelId2

          batch_adjust_data[2][mid]=mid1

          batch_adjust_data[2][product_id]=productId1

          batch_adjust_data[2][modelId]=999



Expected Result:

4.1. response http code  400

4，2  verify status.code is 10

       verify error_list[0][message]='merchandise not found'

       verify error_list[1][message]='product not found'

       verify error_list[2][message]='model not found'

[[ TC4925 ]]


submit merchandise:(POST) /v1/egs/merchandise/submit/?user_update=[user_update] 

batch adjust stocks:(PUT)    /v1/egs/merchandise/adjust_multi_mp_sale_quantity/?user_update=[user_update] 

Get: /v1/egs/merchandise/get/[mid] 



Step: 

1. create a products，and corresponding 3 models(saleQuantity=5，5，0) and get productId，modelId1，modelId2.mdoelId3 and publish the product 

2. Submit a merchandise with inventory(saleQuantiy=5，5，0) and get mid1 

3. shevele the merchandise 

4. batch adjust stocks merchandise by mids，productIds，modelId1，mdoelId2，modelId3 

  set batch_adjust_data[0][mid]=mid1

   adjust_data[0][product_id]=productId1

   adjust_data[0][modelId]=modelId1

   adjust_data[0][delta]=-10

   



Expected Result: 

4.1. response http code 400 

4，2 verify status.code is 10 

    verify status.messge='inventory error'  

verify error_list

[[ TC4926 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create 3 products，3 specNames，3 specValues，3 models and get product ids prod1，prod2，prod3，and model ids model1，model2，model3 and publish the products

2.submit 3 merchandise with inventory(include productId，models) and get mid1，mid2，mid3

3.Get Multiple Merchandise Product Model  by corresponding mid1，mid2，mid3，prod1，prod2，prod3，model1，model2，model3



Expected Results 

========== 

3.1 http response code is 200

      status.code=code

3.2 check data is the same as insert and json schema

     verify responseData count=3

     verify 3 responseData[merchandise_data][inventory]=create inventory data



[[ TC4927 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal:(PUT)  /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，2 models and get product ids prod1，and model ids model1，model2 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by corresponding mid1，prod1，model1，model2，model2

   set request_data['query_data'][0]['mid']=mid1

        request_data['query_data'][0]['product_id']=prod1

       request_data['query_data'][0]['type']=1

        request_data['query_data'][0]['modelId']=model1

       request_data['query_data'][1]['mid']=mid1

        request_data['query_data'][1]['product_id']=prod1

        request_data['query_data'][1]['type']=1

        request_data['query_data'][1]['modelId']=model2

       request_data['query_data'][2]['mid']=mid1

        request_data['query_data'][2]['product_id']=prod1

        request_data['query_data'][2]['type']=1

        request_data['query_data'][2]['modelId']=model2



Expected Results 

========== 

3.1 http response code is 400

      status.code=10

[[ TC4928 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal:(PUT)  /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，200 models and get product ids prod1，and model ids model1，model2..model200 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by corresponding mid1，prod1，model1，model2...model200

 



Expected Results 

========== 

3.1 http response code is 200

      status.code=200

3.2 verify response data count=200

[[ TC4929 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal:(PUT)  /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，200 models and get product ids prod1，and model ids model1，model2..model201 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by corresponding mid1，prod1，model1，model2...model201

 



Expected Results 

========== 

3.1 http response code is 400

      status.code=10

[[ TC4930 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal:(PUT)  /v1/egs/merchandise/get_multi_mpm/

Testing Steps: 

========== 

Step:  

1.create 3 product，3 specName，3 specValue，3 models and get product ids prod1，prod2，prod3，and model ids model1，model2..model3 and publish the product

2.submit 3 merchandise with inventory(include productId，models) and get mid1，mid2，mid3

3.unpublish the product by prod3

4.Get Multiple Merchandise Product Model  by corresponding mid1，mid2，mid3，prod1，prod2，prod3，model1，model2，model3

   set request_data['query_data'][0]['mid']=mid1

        request_data['query_data'][0]['product_id']=prod1

       request_data['query_data'][0]['type']=1

        request_data['query_data'][0]['modelId']=model1

       request_data['query_data'][1]['mid']=mid2

        request_data['query_data'][1]['product_id']=prod2

        request_data['query_data'][1]['type']=1

        request_data['query_data'][1]['modelId']=model2

       request_data['query_data'][2]['mid']=mid3

        request_data['query_data'][2]['product_id']=prod3

        request_data['query_data'][2]['type']=1

        request_data['query_data'][2]['modelId']=model3

Expected Results 

========== 

3.1 http response code is 200

      status.code=200

3.2 verify response_data[0/1] data=create data

     verify response_data[2]['mid']=mid2

     verify response_data[2]['code']=10

    verify response_data[2]['message']='product status error'



[[ TC4931 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           unset(request_data['query_data'][0]['modelId'])

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           unset(request_data['query_data'][0]['product_id'])

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           unset(request_data['query_data'][0]['type'])

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           unset(request_data['query_data'][0]['modelId'])



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4932 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/

Testing Steps: 

========== 

Step: 

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model by MPTM ids

verify mid.length &gt;10

   set request_data['query_data'][0]['mid']="測"

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']=model1

4.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']="測"

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']="測"

      request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']="測"

Expected Results 

========== 

4，6 http response code is 200

   status.code=200

   verify response_data['code']=10

3.1  verify response_data['message']="merchandise not found"

4.1  verify response_data['message']="product not found"

6.1  verify response_data['message']="model not found"

3.5.http response code is 400

   status.code=100

[[ TC4933 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']="123456789012345"

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']="123456789012345"

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']="123456789012345"

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']="123456789012345"



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4934 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=""

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=""

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=""

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=""



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4935 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=array(12)

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=array(12)

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=array(12)

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=array(12)



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4936 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=array('a'=>12)

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=array('a'=>12)

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=array('a'=>12)

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']array('a'=>12)



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4937 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=-1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=-1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=-1

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=-1



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4938 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=0

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=0

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=0

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=0



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4939 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=null

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=null

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=null

           request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=null



Expected Results 

========== 

3-6 http response code is 400

      status.code=10

[[ TC4940 ]]


========== 

URI Syntax: 

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step: 

1.create a product，a specName，a specValue，a models and get product id prod1，and model id model1 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']="!@#$%^&*()~"

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']=modelId

4.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']="!@#"

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']=model1

5.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']="!@#"

      request_data['query_data'][0]['modelId']=model1

6.Get Multiple Merchandise Product Model by MPTM ids

   set request_data['query_data'][0]['mid']=mid1

      request_data['query_data'][0]['product_id']=prod1

      request_data['query_data'][0]['type']=1

      request_data['query_data'][0]['modelId']="!@#"



Expected Results 

========== 

3，4，6 http response code is 200

   status.code=200

   verify response_data['code']=10

3.1  verify response_data['message']="merchandise not found"

4.1  verify response_data['message']="product not found"

6.1  verify response_data['message']="model not found"

5.http response code is 400

   status.code=10

[[ TC4941 ]]


========== 

URI Syntax:  

Submit: /v1/egs/merchandise/submit/?user_update=[user_update]

Get MPM detal: (PUT) /v1/egs/merchandise/get_multi_mpm/



Testing Steps: 

========== 

Step:  

1.create a product，a specName，a specValue，3 models(saleQuantity=7，7，7) and get product id prod1，and model id model1，model2，model3，and stockId1，stockId2，stockId3 and publish the product

2.submit a merchandise with inventory(include productId，models) and get mid1

3.adjust stock set delta=2，0，-3 by stockId1，stockId2，stock3

4.Get Multiple Merchandise Product Model  by MPTM ids

      set request_data['query_data'][0]['mid']=mid1

           request_data['query_data'][0]['product_id']=prod1

           request_data['query_data'][0]['type']=1

           request_data['query_data'][0]['modelId']=model1

           request_data['query_data'][1]['mid']=mid1

           request_data['query_data'][1]['product_id']=prod1

           request_data['query_data'][1]['type']=1

           request_data['query_data'][1]['modelId']=model2

           request_data['query_data'][2]['mid']=mid1

           request_data['query_data'][2]['product_id']=prod1

           request_data['query_data'][2]['type']=1

           request_data['query_data'][2]['modelId']=model3







Expected Results 

========== 

4.1.respose http code 200

4.2 verify response_data[merchandise_data][inventory][0][products][0][models][0][saleQuantity]=9

              response_data[merchandise_data][inventory][0][products][0][models][1][saleQuantity].saleQuantity=7

              response_data[merchandise_data][inventory][0][products][0][models][2][saleQuantity].saleQuantity=4

[[ TC4945 ]]


 URI syntax: /v2/egs/merchandise/search_by_vql/?key1=value1&amp;key2=value2

 Request Method:GET



  1. submit a merchandise with required field+optional field

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set&nbsp; merchandise category='00000400134"(at six level)

 3. search merchandise by mid



  [Expected Result]

 1. assertEquals http 200

 2. verify search result merchandise category is at six level

[[ TC4946 ]]


==========  

A.  

URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=

method: GET 

   

Testing Steps: 

==========

1. insert a tree and get  tree_id

2. insert nodes (have seven level)

3. get_all_nodes with tree_id



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify response_data.length=7

    verify response_data not include seventh level node





[[ TC4947 ]]


==========  

A.  

URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=

method: GET 

   

Testing Steps: 

==========

1. insert a tree and get  tree_id

2. insert nodes (have six level: node0，node1，node2，node3，node4，node5)

3. get node5 path



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify response_data.count = 7 

    





[[ TC4948 ]]


==========  

A.  

URI Syntax: /v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=

method: GET 

   

Testing Steps: 

==========

1. insert a user tree and get  tree_id

2. insert nodes (have seven level)

3. get_all_nodes with tree_id



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify response_data.length=7

    verify response_data not include seventh level node





[[ TC4949 ]]


==========  

A.  

URI Syntax: /v1/egs/category/user_node/get_path//

method: GET 

   

Testing Steps: 

==========

1. insert a user tree and get  tree_id

2. insert nodes (have six level: node0，node1，node2，node3，node4，node5)

3. get node5 path



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify response_data.count = 7 

    





[[ TC4950 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree with six level 

2. insert price at root node

3. query leaf node at the sixth level price 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify price is inherit root node





[[ TC4951 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)



URI Syntax: /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree with six level 

2. insert price at root node

3. batch query price leaf node at the sixth level price 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify price is inherit root node





[[ TC4952 ]]




Request URI: v1/egs/bid/query_cancel_bidder_list/{bid_id}



method:GET







1.submit a bid merchandise and get mid and place bid



2.cancel bid record for bid_id



3.query bidder bid record list







Expected Result:



1. assertEquals http 200



2. http response code 200



[[ TC4956 ]]


<span>Url</span><span>&nbsp;syntax:</span></div><div><span><strong>Request URI:</strong></span><span>&nbsp;</span><span>/v1/egs/merchandise/shelve/</span><em>&lt;mid&gt;</em><span>?user_update=</span><em>&lt;user_update&gt;</em><ul><li></li></ul><span>method:PUT</span>



<span>Step:&nbsp;</span>

<span>1.submit a bid merchandise and get mid1 and shelve merchandise</span>

<span>2. get_detail and retrieve offtime&nbsp;</span>



<span>Expected Result:</span>

1. verify offtime is calculated within&nbsp;</div><div>a. current timestamp &nbsp;+ &nbsp;duration_day * 86400 - 12 * 3600</div><div>and&nbsp;</div><div>b. current timestamp &nbsp;+ duration_day * 86400 + 12 * 3600</div><div>

</div><div>2. verify abs (offtime - calculated expected timestamp) &lt; 15</div><div>abs = absolute value</div><div>calculated expected timestamp refers to ticket 6840632</div>

[[ TC4959 ]]


<span>Url</span><span>&nbsp;syntax:</span></div><div><span><b>Request URI:</b></span>&nbsp;<span>/v1/egs/merchandise/shelve/</span><i>&lt;mid&gt;</i><span>?user_update=</span><i>&lt;user_update&gt;</i><ul><li>

</li></ul><span>method:PUT</span>



<span>Step:&nbsp;</span>

<span>1.submit a bid merchandise and get mid1 and shelve merchandise</span>

&nbsp;&nbsp;&nbsp; set&nbsp; offshelve_tod = currentHour*60 + 59

<span>2. get_detail and retrieve offtime&nbsp;</span>



<span>Expected Result:</span>

1. verify offtime is calculated within&nbsp;</div><div>a. current timestamp &nbsp;+ &nbsp;duration_day * 86400 - 12 * 3600</div><div>and&nbsp;</div><div>b. current timestamp &nbsp;+ duration_day * 86400 + 12 * 3600</div><div>

</div><div>2. verify abs (offtime - calculated expected timestamp) &lt; 15</div><div>abs = absolute value



</div><div>calculated expected timestamp refers to ticket 6840632</div>

[[ TC4960 ]]


<span>Url</span><span>&nbsp;syntax:</span></div><div><span><b>Request URI:</b></span>&nbsp;<span>/v1/egs/merchandise/shelve/</span><i>&lt;mid&gt;</i><span>?user_update=</span><i>&lt;user_update&gt;</i><ul><li>

</li></ul><span>method:PUT</span>



<span>Step:&nbsp;</span>

<span>1.submit a bid merchandise and get mid1 and shelve merchandise</span>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set&nbsp; offshelve_tod = (currentHour + 12) * 60 + 59

<span>2. get_detail and retrieve offtime&nbsp;</span>



<span>Expected Result:</span>

1. verify offtime is calculated within&nbsp;</div><div>a. current timestamp &nbsp;+ &nbsp;duration_day * 86400 - 12 * 3600</div><div>and&nbsp;</div><div>b. current timestamp &nbsp;+ duration_day * 86400 + 12 * 3600</div><div>

</div><div>2. verify abs (offtime - calculated expected timestamp) &lt; 15</div><div>abs = absolute value</div><div>calculated expected timestamp refers to ticket 6840632</div>

[[ TC4961 ]]


<span>Url</span><span>&nbsp;syntax:</span></div><div><span><b>Request URI:</b></span>&nbsp;<span>/v1/egs/merchandise/shelve/</span><i>&lt;mid&gt;</i><span>?user_update=</span><i>&lt;user_update&gt;</i><ul><li>

</li></ul><span>method:PUT</span>



<span>Step:&nbsp;</span>

<span>1.submit a bid merchandise and get mid1 and shelve merchandise</span>

&nbsp;&nbsp;&nbsp; set timezone ='Asia/Taipei' 

<span>2. get_detail and retrieve offtime&nbsp;</span>



<span>Expected Result:</span>

1. verify offtime is calculated within&nbsp;</div><div>a. current timestamp &nbsp;+ &nbsp;duration_day * 86400 - 12 * 3600</div><div>and&nbsp;</div><div>b. current timestamp &nbsp;+ duration_day * 86400 + 12 * 3600</div><div>

</div><div>2. verify abs (offtime - calculated expected timestamp) &lt; 15</div><div>abs = absolute value



</div><div>calculated expected timestamp refers to ticket 6840632</div>

[[ TC4968 ]]


request-&gt;sid=null



Expected Result:

1. http response 400

response json format

status-&gt;code=400

status-&gt;message=""invalid parameter""

[[ TC4969 ]]


$this-&gt;merchandise_data['language'] = "zh-hant";



Expected Result: 

verify 200

[[ TC4970 ]]


$this-&gt;merchandise_data['language'] = "en";



Expected Result:

verify 200

[[ TC4971 ]]


$this-&gt;merchandise_data['language'] = "123456789012345";



Expected Result:

verify 400

[[ TC4972 ]]


$this-&gt;merchandise_data['language'] = "";



Expected Result:

verify 200





[[ TC4973 ]]


$this-&gt;merchandise_data['language'] = "en";



Expected Result:

verify 200

[[ TC4974 ]]


$this-&gt;merchandise_data['language'] = "zh-hant";



Expected Result:

verify 200

[[ TC4975 ]]


step:

$this-&gt;merchandise_data['language'] = "123456789012345";



Expected Result:

verify 200

[[ TC4976 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. close_data

5.delete

6. massCancelBysid



[Expected Result]

assertEquals cancel status

[[ TC4977 ]]


1. SET merchandise data

2. createDraft

3. submitMerchandise

4. shelveMerchandise

5. cancel_data

6. massCancelBySid



[Expected Result]

assertTrue cancel message

[[ TC4981 ]]


(Place bid)Request URI: /v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

method:GET





Step:

1. submit a bidding merchandise ，get mid

2. shelve merchandise 

3. bidderA place bid 

4. bidderB place bid 

5. cancel bidderA bid record

6. query bid record list 

&nbsp;&nbsp;&nbsp; set param.record_type='all'

7. query bid record list 

&nbsp;&nbsp;&nbsp; set param.record_type='normal'

8. query bid record list 

&nbsp;&nbsp;&nbsp; set param.record_type='cancel'

&nbsp;&nbsp;&nbsp; 

Expected Result:

1.1-8.1 http response code 200

6.2 verify response_data.bid_records count 2 

7.2 verify response_data.bid_records count 1

&nbsp;&nbsp;&nbsp; response_data.bid_records[0].bidder_id ='bidderB'

8.2 verify response_data.bid_records count 1

&nbsp;&nbsp; response_data.bid_records[0].bidder_id ='bidderA'

[[ TC5006 ]]




1. SET request_data = required_default



SET request_data->ccode = ''



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5007 ]]




1. SET request_data = required_default



UNSET request_data->ccode 



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5008 ]]




1. SET request_data = required_default



SET request_data->ccode='notexistvalue'



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5009 ]]




1. SET request_data = required_default



SET request_data->ccode=12



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5010 ]]




1. SET request_data = required_default



SET request_data->ccode=array('tw')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5011 ]]




1. SET request_data = required_default



SET request_data->ccode=array('ccode1' => 'tw')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5012 ]]




1. SET request_data = required_default



SET request_data->property = ''



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5013 ]]




1. SET request_data = required_default



UNSET request_data->property



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5014 ]]




1. SET request_data = required_default



SET request_data->property='notexistvalue'



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5015 ]]




1. SET request_data = required_default



SET request_data->property='~!@#$%^&*()_+{}|\"":<>?/.，\';][=-`'



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5016 ]]




1. SET request_data = required_default



SET request_data->property=1234



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5017 ]]




1. SET request_data = required_default



SET request_data->property=array('auction')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5018 ]]




1. SET request_data = required_default



SET request_data->property=array('property' => 'auction')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5019 ]]




1. SET request_data = required_default



SET request_data->mtype = ''



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5020 ]]




1. SET request_data = required_default



UNSET request_data->mtype 



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5021 ]]




1. SET request_data = required_default



SET request_data->mtype='notexistvalue'



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5022 ]]




1. SET request_data = required_default



SET request_data->mtype=1234



PUT /v1/egs/merchandise/mass_cancel_by_aid





[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5023 ]]




1. SET request_data = required_default



SET request_data->mtype=array('basic')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5024 ]]




1. SET request_data = required_default



SET request_data->mtype=array('mytype' => 'basic')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5025 ]]




1. SET request_data = required_default



SET request_data->aid = ''



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5026 ]]




1. SET request_data = required_default



UNSET request_data->aid 



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5027 ]]




1. SET request_data = required_default



SET request_data->aid='notexistvalue'



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5028 ]]




1. SET request_data = required_default



SET request_data->aid=1234



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5029 ]]




1. SET request_data = required_default



SET request_data->aid=array('XXXXXXXX')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5030 ]]




1. SET request_data = required_default



SET request_data->aid=array('aid1' => 'XXXXXXXXXXX')



PUT /v1/egs/merchandise/mass_cancel_by_aid







[Expected Result]



1. assertEquals http 400



 assertEquals status->code = '10'



 assertEquals status->system = 'batch'



 assertEquals status->message='mass cancel by aid failed'



[[ TC5031 ]]




1. SET merchandise data



2. createDraft







[Expected Result]



1. createDraft with assertEquals http 200 



2. After mass_cancel_by_aid with assertEquals http 400



[[ TC5032 ]]


1. SET merchandise data

2. submit Merchandise







<span style=""><span style=""><span style=""><span>[Expected Result] 

1. </span></span></span></span>submit Merchandise<span style=""><span style=""><span style=""><span> with assertEquals http 200 

</span></span></span></span><div style=""><span style=""><span>2. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200 </span></span></div>

[[ TC5033 ]]


<span style=""><span style=""><span>[Step] 

1. SET merchandise data

2. submit Merchandise



 3. shelve Merchandise



[Expected Result] 

1. </span></span></span></span>submit Merchandise

 <span style="">

 <span style=""><span style=""><span> with assertEquals http 200

2. </span>

 </span></span></span>shelve Merchandise with assertEquals http 200<span style=""><span style=""><span style=""><span>

</span></span></span></span><div style=""><span style=""><span>3. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200 </span></span></div>

[[ TC5034 ]]


1. SET merchandise data

2. submit Merchandise

3. shelve Merchandise

4. close data



[Expected Result] 

</span></span></span></span>1. submit Merchandise with assertEquals http 200 

2. shelve Merchandise with assertEquals http 200 <span style=""><span style=""><span style=""><span>

</span></span></span></span><div style=""><span style=""><span>3. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200</span></span></div>

[[ TC5035 ]]


1. SET merchandise data

2. submit Merchandise

3. shelve Merchandise

4. delete



[Expected Result] 

1. </span></span></span></span><span style="">submit </span>Merchandise <span style=""><span style=""><span style=""><span>with assertEquals http 200 

2. </span></span></span></span>shelve Merchandise <span style=""><span style=""><span style=""><span>with assertEquals http 200 

</span></span></span></span><span style=""><span style=""><span style=""><span>3. </span></span></span></span>delete with assertEquals http 200 <span style=""><span style=""><span style=""><span>

</span></span></span></span><div style=""><span style=""><span>4. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200</span></span></div>

[[ TC5036 ]]


1. SET merchandise data

2. createDraft

3. </span></span></span></span>mass_cancel_by_aid<span style=""><span style=""><span style=""><span>



[Expected Result] 

1. createDraft with assertEquals http 200 

</span></span></span></span><div style=""><span style=""><span>2. </span></span><span style=""><span>assertTrue message != null</span></span></div>

[[ TC5037 ]]


1. SET merchandise data

2. submitMerchandise

3. massCancelByAid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

</span></span></span></span><div style=""><span style=""><span>2. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200 

3. assertEquals cancel status</span></span></div>

[[ TC5038 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. shelveMerchandise </span></span></span></span>with assertEquals http 200<span style=""><span style=""><span style=""><span>

</span></span></span></span><div style=""><span style=""><span>3. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200 

4. assertEquals cancel status</span></span></div>

[[ TC5039 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. close_data



[Expected Result] 

1. </span></span></span></span>submitMerchandise<span style=""><span style=""><span style=""><span> with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise<span style=""><span style=""><span style=""><span> with assertEquals http 200 

</span></span></span></span><span style=""><span style=""><span style=""><span>3. close_data </span></span></span></span>with assertEquals http 200 <span style=""><span style=""><span style=""><span>

</span></span></span></span><div style=""><span style=""><span>4. </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200

5. assertEquals cancel status </span></span></div>

[[ TC5040 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. delete

5. massCancelByAid



[Expected Result] 

1. </span></span></span></span>submitMerchandise<span style=""><span style=""><span style=""><span> with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise with assertEquals http 200

<span style=""><span style=""><span style=""><span>3. </span></span></span></span><span style=""><span style=""><span style=""><span>delete </span></span></span></span>with assertEquals http 200

<span style=""><span style=""><span style=""><span>4</span></span></span></span><span style=""><span style=""><span> .</span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 200 

5. assertEquals cancel status = 4</span></span></span>

[[ TC5041 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. cancel_data

5. massCancelByAid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise  with assertEquals http 200 <span style=""><span style=""><span style=""><span>

3. </span></span></span></span>cancel_data  with assertEquals http 200 <span style=""><span style=""><span style=""><span>

4. </span></span></span></span><span style=""><span style=""><span> </span></span><span style="">After mass_cancel_by_aid  with </span><span style=""><span>assertEquals http 400 </span></span></span>

[[ TC5042 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. cancel_data

5. massCancelByAid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

3. </span></span></span></span>cancel_data  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

4. </span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_aid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 400 

5. assertTrue message != null</span></span></span>

[[ TC5043 ]]


 

1. SET merchandise data



2. submitMerchandise



3. shelveMerchandise



4. close_data



5. delete

6. massCancelByAid







[Expected Result] 



</span>assertEquals cancel status <span> 



</span>

[[ TC5044 ]]




1. SET merchandise data



2. createDraft



3. submitMerchandise



4. shelveMerchandise



5. cancel_data



6. massCancelByAid







[Expected Result] 



assertTrue cancel message



[[ TC5045 ]]


1. SET merchandise data

2. createDraft



[Expected Result] 

1. createDraft with assertEquals http 200 

2. </span>After mass_cancel_by_sid with <span>assertEquals http 400 </span>

[[ TC5046 ]]


1. SET merchandise data

2. submit Merchandise







<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>[Expected Result] 

1. </span></span></span></span>submit Merchandise<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> with assertEquals http 200 

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>2. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200 </span></span></div>

[[ TC5047 ]]


1. SET merchandise data

2. submit Merchandise

3. shelve Merchandise



[Expected Result] 

1. </span></span></span></span>submit Merchandise<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> with assertEquals http 200

2. </span></span></span></span>shelve Merchandise with assertEquals http 200<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200 </span></span></div>

[[ TC5048 ]]


1. SET merchandise data

2. submit Merchandise

3. shelve Merchandise

4. close data



[Expected Result] 

</span></span></span></span>1. submit Merchandise with assertEquals http 200 

2. shelve Merchandise with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200</span></span></div>

[[ TC5049 ]]


1. SET merchandise data

2. submit Merchandise

3. shelve Merchandise

4. delete



[Expected Result] 

1. </span></span></span></span><span style="orphans: 2; text-align: -webkit-auto; text-indent: 0px; widows: 2; -webkit-text-decorations-in-effect: none;">submit </span>Merchandise <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>with assertEquals http 200 

2. </span></span></span></span>shelve Merchandise <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>with assertEquals http 200 

</span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. </span></span></span></span>delete with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>4. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200</span></span></div>

[[ TC5050 ]]


1. SET merchandise data

2. createDraft

3. </span></span></span></span>mass_cancel_by_sid<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>



[Expected Result] 

1. createDraft with assertEquals http 200 

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>2. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertTrue message != null</span></span></div>

[[ TC5051 ]]


1. SET merchandise data

2. submitMerchandise

3. massCancelBysid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>2. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200 

3. assertEquals cancel status</span></span></div>

[[ TC5052 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. shelveMerchandise </span></span></span></span>with assertEquals http 200<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200 

4. assertEquals cancel status</span></span></div>

[[ TC5053 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. delete

5. massCancelByAid



[Expected Result] 

1. </span></span></span></span>submitMerchandise<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise with assertEquals http 200

<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. </span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>delete </span></span></span></span>with assertEquals http 200

<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>4</span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> .</span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200 

5. assertEquals cancel status = 4</span></span></span>

[[ TC5054 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. cancel_data

5. massCancelBySid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

3. </span></span></span></span>cancel_data  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

4. </span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 400 </span></span></span>

[[ TC5055 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. cancel_data

5. massCancelBySid



[Expected Result] 

1. submitMerchandise with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

3. </span></span></span></span>cancel_data  with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

4. </span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 400 

5. assertTrue message != null</span></span></span></div>

[[ TC5056 ]]


1. SET merchandise data 

2. submitMerchandise 

3. shelveMerchandise 

4. close_data 

5. delete

6. massCancelBysid 



[Expected Result] 

</span>assertEquals cancel status <span> 

</span></div>

[[ TC5057 ]]


1. SET merchandise data 

2. createDraft 

3. submitMerchandise 

4. shelveMerchandise 

5. cancel_data 

6. massCancelBySid 



[Expected Result] 

assertTrue cancel message</div>

[[ TC5058 ]]


1. SET merchandise data

2. submitMerchandise

3. shelveMerchandise

4. close_data



[Expected Result] 

1. </span></span></span></span>submitMerchandise<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> with assertEquals http 200 

2. </span></span></span></span>shelveMerchandise<span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span> with assertEquals http 200 

</span></span></span></span><span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>3. close_data </span></span></span></span>with assertEquals http 200 <span style="font-family: Arial; line-height: normal; font-size: medium;"><span style="border-collapse: separate; color: #000000; font-family: Times; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>

</span></span></span></span><div style="font-family: Arial; line-height: normal; font-size: medium;"><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>4. </span></span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;">After mass_cancel_by_sid  with </span><span style="font-family: arial， helvetica， clean， sans-serif; font-size: 13px; line-height: 15px;"><span>assertEquals http 200

5. assertEquals cancel status </span></span></div>

[[ TC5059 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5060 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5061 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5062 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5063 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5064 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5065 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5066 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]







                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5067 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5068 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5069 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5070 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5071 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5072 ]]




2.Get mid from response_data->detail_response_data->mid



3.PUT */v1/egs/merchandise/mass_extend



request_data->ccode=""tw""



request_data->property=""auction""



request_data->mtype=""basic""



request_data->mass_data=[



         {



           ""merchandise_data"": {



             ""mid"": {$mid}，



             ""extend_mins"": 30



           }



         }



      ]









                                                                                                                                                         

Expected Result:



1. http response 200



2. response json format



status->code=200



status->message=""extend merchandises ok""



[[ TC5073 ]]


  1.submit merchandise

2.purge merchandise



  Expected Result: 

 1.http response code is 200 

 2.Verify bid status 1 is 200

[[ TC5074 ]]


1.submit merchandise

2.get merchandise

 3.purge merchandise



  Expected Result: 

 1.http response code is 200 

 2.Verify bid status 2 is 500

[[ TC5075 ]]


1.submit merchandise

2.set cancel bid item data

3.cancel merchandise

4.get merchandise

 5.purge merchandise



  Expected Result: 

 1.http response code is 200 

 2.Verify bid status 3 is 200

[[ TC5076 ]]


1.submit merchandise

2.close merchandise

3.get merchandise

 4.purge merchandise 

 

  Expected Result: 

 1.http response code is 200 

 2.Verify bid status 4 is 200

[[ TC5077 ]]


 1.submit merchandise

2.close merchandise

3.get merchandise

 4.purge merchandise 



  Expected Result: 

 1.http response code is 200 

 2.Verify bid status 5 is 200

[[ TC5120 ]]


 ==========

 A.Data

 1. Create a product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters，set saleQuanity=10

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1. add model stock of the a models

 set quantity = 13 for all



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify beforeQuantity=10，aftrQuantity=13 for all

[[ TC5121 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for specName with required



4. Create a models for product with required parameters，set saleQuanity=10



5. publish the product 



parameters



B:syntax

URI:/v1/product_egs/batch_adjust_stock



Method:PUT







Testing Steps:



==========



1. subtract model stock of the a models



set quantity = 7 for all







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify beforeQuantity=10，aftrQuantity=7 for all



[[ TC5122 ]]


 ==========

 A.Data

 1. Create a product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 set product status is not publish 



  Expected Results

 ========== 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4.Verify product status

[[ TC5123 ]]


 ==========

 A.Data

 1. Create a product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters，set saleQuanity=10

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ========== 

set quantity = 0 for all



  Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=<span>40001</span>

 3. verify description="<span>Input Validation Failed</span>"



[[ TC5124 ]]


 ==========

 A.Data

 1. Create a product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create multi models for product with required parameters，set saleQuanity=10

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1. add model stock of the multi models

2.subtract model stock of the multi models



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify <span>beforeQuantity and </span><span>afterQuantity is 200

</span><span></span>

[[ TC5126 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters，set saleQuanity=10

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1. add model stock of the multi models

 set quantity = 13 for all



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify beforeQuantity=10，aftrQuantity=13 for all

[[ TC5128 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 set product status delete 



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify product status delete

[[ TC5129 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

  input models max limitation = 200



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify input models max limitation 200

[[ TC5130 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 set same two model id for models



  Expected Results

 ==========

 1. http Response Code is 200

 2. status-&gt;code=20000

 3. verify description="OK"

 4. verify same two model id 200

[[ TC5131 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1.for all the parameters only set models is without

 2.for all the parameters only set models list productId is without

 3.for all the parameters only set models list modelId is without

 4.for all the parameters only set models list quantity is without

 5.for all the parameters only set note is without



  Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=40001

 3. verify description="<span style="font-size:13px;font-family:Consolas;color:#000000;background-color:#fcfbfa;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Input Validation Failed</span>"



[[ TC5132 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1.for all the parameters only set models = ''

 2.for all the parameters only set models list productId = ''

 3.for all the parameters only set models list modelId =''

 4.for all the parameters only set models list quantity = ''



   Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=40001

 3. verify description="<span style="font-size:13px;font-family:Consolas;color:#000000;background-color:#fcfbfa;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Input Validation Failed</span>"

[[ TC5133 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT  Testing Steps:

 ==========

 1.for all the parameters set models = "1234567890123456789011"

 2.for all the parameters set models list productId = "1234567890123456789011"

 3.for all the parameters set models list modelId ="1234567890123456789011"

 4.for all the parameters set models list quantity = "1234567890123456789011"



   Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=40001

 3. verify description="<span style="font-size:13px;font-family:Consolas;color:#000000;background-color:#fcfbfa;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Input Validation Failed</span>"

[[ TC5134 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1.for all the parameters set models = "!@#$"

 2.for all the parameters set models list productId = "!@#$"

 3.for all the parameters set models list modelId ="!@#$"

 4.for all the parameters set models list quantity = "!@#$"



   Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=40001

 3. verify description="<span style="font-size:13px;font-family:Consolas;color:#000000;background-color:#fcfbfa;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Input Validation Failed</span>"

[[ TC5135 ]]


 ==========

 A.Data

 1. Create multi product with required parameters

 2. Create a specName for product with required parameters

 3. Create a specValue for specName with required

 4. Create a models for product with required parameters

 5. publish the product 

 parameters

 B:syntax

 URI:/v1/product_egs/batch_adjust_stock

 Method:PUT



  Testing Steps:

 ==========

 1.for all the parameters set models = "測"

 2.for all the parameters set models list productId = "測"

 3.for all the parameters set models list modelId ="測"

 4.for all the parameters set models list quantity = "測"



   Expected Results

 ==========

 1. http Response Code is 400

 2. status-&gt;code=40001

 3. verify description="<span style="font-size:13px;font-family:Consolas;color:#000000;background-color:#fcfbfa;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">Input Validation Failed</span>"

[[ TC5195 ]]


Step:  1. submit merchandise with image_url : http://l.yimg.com/f/i/tw/hp/mh/09purple.gif

2. get merchandise detail， and get&nbsp; image_data.image_url&nbsp; set&nbsp; $imageUrl 

3.&nbsp; update merchandise set 

 request-&gt;image_data = {[$imageUrl  ]}

4. get merchandise detail



  Expected Result:

 1.1-4.1 http response 200

 3.2&nbsp; update is success

4.2 veirfy&nbsp; image_data[0].image_url = $ImageUrl

[[ TC5216 ]]


==========  

A.  

(insert price) POST /v1/egs/category_pricing/insert (tree_id， timeframe， cat_id is exist in category system)



(get)URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 



(get all)URI Syntax: /v1/egs/category_pricing/get_all/?timeframe=

method: GET 



Testing Steps: 

==========

1. prepare tree and node

2. insert price set fixed_price='500.00' and fee_code='lf10'

3. insert price set fixed_price=null and fee_code='fee_onshelve30'

4. get price 

5. get all price



Expected Results 

========== 

1.1-4.1 http response code is 200

4.2 verify fee_code is 'lf10' and fixed_price equal to '500.00'

    fee_code is 'fee_onshelve30' and fixed_price is null

5.2 verify fee_code is 'lf10' and fixed_price equal to '500.00'

    fee_code is 'fee_onshelve30' and fixed_price is null



[[ TC5217 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters and set fixed_price='500.00' and fee_code='lf10'

3. import price with all parameters and set fixed_price=null and fee_code='fee_onshelve30'

4. get price 

 

Expected Results 

========== 

1.1-4.1 http response code is 200

4.2 verify fee_code is 'lf10' and fixed_price equal to '500.00'

    fee_code is 'fee_onshelve30' and fixed_price is null





[[ TC5218 ]]


URI syntax:/v1/egs/category/tree/copy_snapshot/&lt;tree_id&gt;?from=&lt;timeframe_from&gt;&amp;to=&lt;timeframe_to&gt;

Request Method:GET



1 . create tree data

2. request_data-&gt;purchase_over_price='0.00'

request_data-&gt;purchase_over='0.00'

request_data-&gt;fee_code='lf10'

request_data-&gt;price='0.00'

3 . set&nbsp; request_data-&gt;fixed_price=null

4 . insert pricing

5 . Copy Snapshot 

6 . 2 get pricing 

7 . 2 delete tree



Expected Result:

1.1-7.1 http response code is 200 

2.2 check status code and correct

&nbsp; status-&gt;code=200

7.2 verify fixed_price value

[[ TC5219 ]]


URI syntax:/v1/egs/category/tree/copy_snapshot/&lt;tree_id&gt;?from=&lt;timeframe_from&gt;&amp;to=&lt;timeframe_to&gt;

Request Method:GET



1 . create tree data

2. request_data-&gt;purchase_over_price='0.00'

request_data-&gt;purchase_over='0.00'

request_data-&gt;fee_code='lf10'

request_data-&gt;price='0.00'

3 . set&nbsp; request_data-&gt;fixed_price='500.00'

4 . insert pricing

5 . Copy Snapshot 

6 . 2 get pricing 

7 . 2 delete tree



Expected Result:

1.1-7.1 http response code is 200 

2.2 check status code and correct

&nbsp; status-&gt;code=200

7.2 verify fixed_price value

[[ TC5220 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price=null 

 set purchase_over_price='0.00'

 set purchase_over='0.00'

 set price='0.00'

3. get price 

 

Expected Results 

========== 

1.1-3.1 http response code is 200



[[ TC5221 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price='123.ab' 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1 http response code is 200

[[ TC5222 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&amp;qty=&amp;user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price='測' 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1 http response code is 400

[[ TC5223 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price='1234567890123.123' 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1 http response code is 400

[[ TC5224 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price='string' 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1 http response code is 400

[[ TC5225 ]]


==========  

A.  

 POST /v1/egs/category_pricing/import/?timeframe=



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

method: GET 

   

Testing Steps: 

==========

1. prepare tree and node

2. import price with all parameters 

 set fixed_price='!@#' 

 

Expected Results 

========== 

1.1-3.1 http response code is 200

4.1 http response code is 400

[[ TC5294 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/18124841059" refObjectUUID="81f1bb93-5cfc-40d9-aa9c-d2ff37a76bc9" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124841058/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124841058/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!+^6~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124841058/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124841058/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17096595697" refObjectUUID="6000c04f-65e2-4239-864c-cdb73115014a" refObjectName="price  smoke test" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124841058/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/18124944372" refObjectUUID="edfeecc8-4328-463f-83dc-ef9184526bbf" objectVersion="1" refObjectName="[category_pricing][batch_query_price]batch query pricing with decimal number" CreatedAt="Apr 7">

      <CreationDate>2014-04-07T09:45:31.444Z</CreationDate>

      <ObjectID>18124944372</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124944372/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124944372/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC5295</FormattedID>

      <LastUpdateDate>2014-04-07T09:45:31.635Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/18124944372/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[category_pricing][batch_query_price]batch query pricing with decimal number</Name>

      <Notes>1.query price with qty set to 0.5&nbsp;<div>2.expect response code 200</div>

[[ TC5375 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method: GET







Testing Steps:



==========



1. insert a tree and get tree_id



2. delete tree_id







Expected Results



==========



1.1-2.1 http response code is 200



2.2 verify Well-formed is JSON



[[ TC5376 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/insert

 method: POST



  Testing Steps:

 ==========

 1. insert a tree and copy tree

 2. 2 get tree id

 3. 2 delete tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 200



[[ TC5377 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/delete/{tree_id}?timeframe=

 method: DELETE



  Testing Steps:

 ==========

 1. prepare Tree data

 2. delete tree when tree_id is null

 3. delete tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 200

[[ TC5378 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/insert/?timeframe=&amp;next_sibling_cat_id=

 method: POST



  Testing Steps:

 ==========

 1. prepare node data

 2. insert data

 3. delete tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 200



[[ TC5379 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/delete//?timeframe=

 method: DELETE



  Testing Steps:

 ==========

 1. insert node

 2. delete node

 3. delete tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 200



[[ TC5380 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/update//?timeframe=

 method: PUT



  Testing Steps:

 ==========

 1. set test data and insert node with parent data

 2. update data

 3. compare updated date

 4. insert a  children node

 5. update node with cluster_id and taxonomy_node_id

 6. get node and get node path

 7. search node and get children node

 8. delete tree_id



  Expected Results

 ==========

 1.1-8.1 http response code is 200



[[ TC5381 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method: GET







Testing Steps:



==========



1. insert data



2. move data



3. get data

 

4. delete data







Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify move node is ok



[[ TC5382 ]]




==========



A.



URI Syntax: /v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method: POST







Testing Steps:



==========



1. insert alias node



2. get data

 

3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify compare result is ok



3.3 verify  insert alias node is ok



[[ TC5383 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method: GET







Testing Steps:



==========



1. insert tree id and get tree_id



2. get node data

 

3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify get node is ok



[[ TC5384 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method: GET







Testing Steps:



==========



1. insert tree id and get tree_id



2. get Children data

 

3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify get Children node is ok



[[ TC5385 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method: GET







Testing Steps:



==========



1. insert tree id and get tree_id



2. validate nodes



 



Expected Results



==========



1.1-2.1 http response code is 200



2.2 verify tree get all nodes data is ok



[[ TC5386 ]]




==========



A.



URI Syntax:/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



method: GET







Testing Steps:



==========



1. prepare node



2. insert data



3. search node data



4. compare  search result



 



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify search nodes data is ok



[[ TC5387 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/insert



method: POST







Testing Steps:



==========



1. set tree datat



2. insert tree



3. get tree



4. delete tree_id



 



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify create user tree data is ok



[[ TC5388 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/user_tree/delete/

 method: DELETE



  Testing Steps:

 ==========

 1. insert tree

 2. delete tree_id

 3. get tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 200

[[ TC5389 ]]




==========



A.



URI Syntax: /v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method: GET







Testing Steps:



==========



1. insert tree_id



2. get tree 

 

3. check data

 

4. delete tree_id



 



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify get all nodes data is ok



[[ TC5390 ]]




==========



A.



URI Syntax: /v1/egs/category/user_tree/get/



method: GET







Testing Steps:



==========



1. insert tree_id



2. get tree 

 

3. delete tree_id



 



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify get user tree data is ok



[[ TC5391 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_tree/update/



method: PUT







Testing Steps:



==========



1. insert tree_id



2. update tree 

 

3. get tree



4. delete tree_id



 



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify update user tree data is ok



[[ TC5392 ]]




==========



A.



URI Syntax: /v1/egs/category/user_tree/insert



method: POST







Testing Steps:



==========



1. insert tree_id



2. create tree 

 

3. get tree



4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify create user tree data is ok



[[ TC5393 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/user_tree/insert

 method: POST



  Testing Steps:

 ==========

 1. insert tree_id

 2. create tree 

  3. get tree

 4. delete tree

 5. get tree

 6. delete tree_id



    Expected Results

 ==========

 1.1-6.1 http response code is 200

[[ TC5394 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method: GET







Testing Steps:



==========



1. insert tree_id



2. create cat_id

 

3. get tree



4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify delete user tree data is ok



[[ TC5395 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/insert_alias/



method: POST







Testing Steps:



==========



1. insert tree_id



2. create cat_id

 

3. set alias data



4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify insert user alias node data is ok



[[ TC5396 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/move//?parent_cat_id=



method: GET







Testing Steps:



==========



1. insert tree



2. create tree

 

3. move user node



4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify move user node data is ok



[[ TC5397 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method: PUT







Testing Steps:



==========



1. insert tree



2. create tree



3. get user node

 

4. update user node



5. delete tree_id



  



Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify update user node data is ok



[[ TC5398 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method: GET







Testing Steps:



==========



1. insert tree_id



2. create user node



3. get path user node

 

4. update user node



5. delete tree_id



  



Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify get node path data is ok



[[ TC5399 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_node//



method: GET







Testing Steps:



==========



1. insert tree_id



2. create user node



3. get user node

 

4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify get user node data is ok



[[ TC5400 ]]




==========



A.



URI Syntax: /v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



method: POST







Testing Steps:



==========



1. insert data



2. get node



3. get node path

 

4. search  node



5. get children node



6. delete tree_id



  



Expected Results



==========



1.1-6.1 http response code is 200



6.2 verify create node data is ok



[[ TC5401 ]]




==========



A.



URI Syntax:  /v1/egs/category/validate/batch_validate_attributes/?timeframe=



method: POST







Testing Steps:



==========



1. insert tree_id



2. batch validate data



3. delete tree_id



  



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify batch validate data is ok



[[ TC5402 ]]




==========



A.



URI Syntax: /v1/egs/category/validate/validate_attributes//?timeframe=



method: POST







Testing Steps:



==========



1. insert node



2. set attributes date



3. validate data



4. delete tree_id



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify validate data is ok



[[ TC5403 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method: GET







Testing Steps:



==========



1. insert tree_id



2. get all nodes of user tree test



3. delete tree_id



  



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify get all nodes tree data is ok



[[ TC5404 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



method: POST







Testing Steps:



==========



1. prepare node



2. insert node



3. get children node



4. get path v2



  



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify insert node data is ok



[[ TC5405 ]]




==========



A.



URI Syntax:/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



method: GET







Testing Steps:



==========



1. insert data



2. get children node v2



3. delete tree_id



  



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify order node data is ok



[[ TC5406 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method: POST







Testing Steps:



==========



1. set node data



2. insert alias data



3. get  node



4. delete tree_id



 



Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify insert alias data is ok



[[ TC5407 ]]




==========



A.



URI Syntax:/v1/egs/category/node/delete//?timeframe=



method: DELETE







Testing Steps:



==========



1. prepare node data



2. delete node



3. delete tree_id



 



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify delete node data is ok



[[ TC5408 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method: GET







Testing Steps:



==========



1. prepare node data



2. move node



3. delete tree_id



 



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify move node data is ok



[[ TC5409 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



method: GET







Testing Steps:



==========



1. prepare node sequence



2. insert data and insert node



3. search node



 



Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify search node data is ok



[[ TC5410 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method: GET







Testing Steps:



==========



1. insert data and insert node



2. move node



3. get children node v2



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify last node sequence



[[ TC5411 ]]




==========



A.



URI Syntax: /v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



method: GET







Testing Steps:



==========



1. insert data



2. order node



3. get children node v2



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify order node to LAST case id



[[ TC5412 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/insert/



method: POST







Testing Steps:



==========



1. insert tree_id



2. create user node



3. get children node v2



4. order user node



5. get children node v2



6. delete tree_id







Expected Results



==========



1.1-6.1 http response code is 200



6.2 verify node sequence



[[ TC5413 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/insert/



method: POST







Testing Steps:



==========



1. insert tree_id



2. create user node



3. get children node v2



4. order user node



5. get path user node v2



6. delete tree_id







Expected Results



==========



1.1-6.1 http response code is 200



6.2 verify node sequence



[[ TC5414 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/insert_alias/



method: POST







Testing Steps:



==========



1. insert tree_id



2. create user node



3. insert Aalias user node



4. get children node v2



5. delete tree_id







Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify node sequence



[[ TC5415 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/move//?parent_cat_id=



method: GET







Testing Steps:



==========



1. insert tree_id



2. create user node



3. move user node



4. get children node v2



5. delete tree_id







Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify node sequence



[[ TC5416 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id



2. create user node



3. delete user node



4. get children node v2



5. delete tree_id







Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify node sequence



[[ TC5417 ]]




==========



A.



URI Syntax: /v2/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. prepare activated tree



2. insert node



3. get path v2





Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify node sequence



[[ TC5418 ]]




==========



A.



URI Syntax: /v2/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert node



2. get children node v2







Expected Results



==========



1.1-3.1 http response code is 200



3.2 verify node sequence



[[ TC5419 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/activate/{tree_id}?timeframe=



method:GET







Testing Steps:



==========



1. insert tree_id and insert nodes



2. get all nodes



3. import



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



4.2 verify node sequence



[[ TC5420 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/update//



method:PUT







Testing Steps:



==========



1. insert tree_id



2. prepare user node



3. set update node data



4. update user node



5. delete tree_id







Expected Results



==========



1.1-5.1 http response code is 200



5.2 verify node sequence



[[ TC5421 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree with all parameters

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify get tree date



[[ TC5422 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree without all parameters 



Expected Results 

========== 

1.1 http response code is 400





[[ TC5423 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree without set name



Expected Results 

========== 

1.1 http response code is 400





[[ TC5424 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree  set name=null



Expected Results 

========== 

1.1 http response code is 400





[[ TC5425 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree  set name=""



Expected Results 

========== 

1.1 http response code is 400





[[ TC5426 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree  set name="!@#$"



Expected Results 

========== 

1.1 http response code is 200





[[ TC5427 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree  set name="abdc..."(64)

2. get tree



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify get tree data





[[ TC5428 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree  set name="abcd..."(65)



Expected Results 

========== 

1.1 http response code is 400





[[ TC5429 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree without set timeframe



Expected Results 

========== 

1.1 http response code is 400





[[ TC5430 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=null



Expected Results 

========== 

1.1 http response code is 400





[[ TC5431 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=""



Expected Results 

========== 

1.1 http response code is 400





[[ TC5432 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe="!@#"



Expected Results 

========== 

1.1 http response code is 400





[[ TC5433 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe="1234567890"



Expected Results 

========== 

1.1 http response code is 200





[[ TC5434 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe="????"r \/>

Expected Results 

========== 

1.1 http response code is 400



><

[[ TC5435 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=2147483647(out scope)



Expected Results 

========== 

1.1 http response code is 400





[[ TC5436 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=214748360.9



Expected Results 

========== 

1.1 http response code is 400





[[ TC5437 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=-2147483640



Expected Results 

========== 

1.1 http response code is 400





[[ TC5438 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=0



Expected Results 

========== 

1.1 http response code is 400





[[ TC5439 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=2147483646(max)



Expected Results 

========== 

1.1 http response code is 200





[[ TC5440 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=time()+3600



Expected Results 

========== 

1.1 http response code is 200





[[ TC5441 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree without set ccode



Expected Results 

========== 

1.1 http response code is 400





[[ TC5442 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set ccode=null



Expected Results 

========== 

1.1 http response code is 400





[[ TC5443 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set ccode=""



Expected Results 

========== 

1.1 http response code is 400





[[ TC5444 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set ccode="!@#"



Expected Results 

========== 

1.1 http response code is 400





[[ TC5445 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set ccode="tww"



Expected Results 

========== 

1.1 http response code is 400





[[ TC5446 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree without set property 



Expected Results 

========== 

1.1 http response code is 400





[[ TC5447 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set property=null 



Expected Results 

========== 

1.1 http response code is 400





[[ TC5448 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set property="" 



Expected Results 

========== 

1.1 http response code is 400





[[ TC5449 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set property="!@#" 



Expected Results 

========== 

1.1 http response code is 200





[[ TC5450 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set property="??????"r \/>

Expected Results 

========== 

1.1 http response code is 400



>>\

[[ TC5451 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set property="abdc.."(21) 



Expected Results 

========== 

1.1 http response code is 400





[[ TC5452 ]]


========== 

URI Syntax:  

Create Tree: (POST)/v1/egs/category/tree/insert



Testing Steps: 

========== 

Step:  

1. insert tree set timeframe=time()-1000



Expected Results 

========== 

1.1 http response code is 200





[[ TC5454 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree without set tree_id



Expected Results 

========== 

1.1 http response code is 400







[[ TC5455 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set tree_id=""



Expected Results 

========== 

1.1 http response code is 400







[[ TC5456 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set tree_id=null



Expected Results 

========== 

1.1 http response code is 400







[[ TC5457 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set tree_id='notexist'



Expected Results 

========== 

1.1 http response code is 400







[[ TC5458 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=null



Expected Results 

========== 

1.1 http response code is 400







[[ TC5459 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=""



Expected Results 

========== 

1.1 http response code is 400







[[ TC5460 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe="notexist"



Expected Results 

========== 

1.1 http response code is 400







[[ TC5461 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe="abcdefghij"



Expected Results 

========== 

1.1 http response code is 400







[[ TC5462 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=2147483646



Expected Results 

========== 

1.1 http response code is 200







[[ TC5463 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=2147483640.99



Expected Results 

========== 

1.1 http response code is 400







[[ TC5464 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=-214748367



Expected Results 

========== 

1.1 http response code is 400







[[ TC5465 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=0



Expected Results 

========== 

1.1 http response code is 400







[[ TC5466 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get tree set timeframe=2147483648



Expected Results 

========== 

1.1 http response code is 400







[[ TC5467 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not activated tree set activated_only=0 



Expected Results 

========== 

1.1 http response code is 200







[[ TC5468 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get  activated tree set activated_only=0 



Expected Results 

========== 

1.1 http response code is 200







[[ TC5469 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get  activated tree set activated_only=1 



Expected Results 

========== 

1.1 http response code is 200







[[ TC5470 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not activated tree set activated_only=1 



Expected Results 

========== 

1.1 http response code is 404







[[ TC5471 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not activated tree set activated_only=true 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5472 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get  activated tree set activated_only=true 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5473 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get  activated tree unset activated_only 



Expected Results 

========== 

1.1 http response code is 200







[[ TC5474 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not  activated tree unset activated_only 



Expected Results 

========== 

1.1 http response code is 404







[[ TC5475 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not activated tree set activated_only=false 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5476 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get  activated tree set activated_only=false 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5477 ]]


========== 

URI Syntax:  

Get Tree: /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



Data:

 A: insert tree and get tree_id

Testing Steps: 

========== 

Step:  

1. get not activated tree set activated_only=10 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5478 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree set tree_id null 



Expected Results 

========== 

1.1 http response code is 400







[[ TC5479 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree not set tree_id  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5480 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set tree_id=000000000  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5481 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  unset from  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5482 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  unset to  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5483 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from null  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5484 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to null  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5485 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from ""  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5486 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to ""  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5487 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from "abdcddddd"  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5488 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to "abdcddddd"  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5489 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from ????  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5490 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to ????  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5491 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from -1  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5492 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to -1  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5493 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from 0  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5494 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set to 0  



Expected Results 

========== 

1.1 http response code is 400







[[ TC5495 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from 1  



Expected Results 

========== 

1.1 http response code is 404







[[ TC5497 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set from max value 2147483646  



Expected Results 

========== 

1.1 http response code is 200







[[ TC5498 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree  set  to  max value 2147483646  



Expected Results 

========== 

1.1 http response code is 200







[[ TC5499 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. activated tree 

2. copy tree with all parameters 



Expected Results 

========== 

1.1-2.1 http response code is 200







[[ TC5500 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree set from=time()， to=time()+60



Expected Results 

========== 

1.1 http response code is 200







[[ TC5501 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. copy tree set to=time()， from=time()+60



Expected Results 

========== 

1.1 http response code is 200







[[ TC5502 ]]


========== 

URI Syntax:  

Copy Tree: /v1/egs/category/tree/copy_snapshot/?from=&to=



Data:

 A: insert tree and get tree_id

 

Testing Steps: 

========== 

Step:  

1. activated tree

2. copy tree set from=time()， to=time()+60



Expected Results 

========== 

1.1-2.1 http response code is 200







[[ TC5503 ]]


     ==========

     A.

     URI   Syntax:/v1/egs/category/user_node/move/&lt;tree_id&gt;/&lt;cat_id&gt;?parent_cat_id=&lt;parent_cat_id&gt;

     method: GET

     

     Testing Steps:

     ==========

     1. insert tree_id

     2. create user node

     3. move user node

     4. delete tree_id

     

     Expected Results

     ==========

     1.1-4.1 http response code is 200

     4.2 verify move user node data is ok

</td> </tr></tbody></table>

[[ TC5519 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， timeframe

 set requestData.name = 'update tree name for test'

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5520 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe not set tree_id

 set requestData.name = 'update tree name for test'    



Expected Results 

========== 

1.1 http response code is 400



[[ TC5521 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， tree_id

   unset requestData



Expected Results 

========== 

1.1 http response code is 400



[[ TC5522 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， set tree_id=null

 set requestData.name = 'update tree name for test'    



Expected Results 

========== 

1.1 http response code is 400



[[ TC5523 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， set tree_id="

 set requestData.name = 'update tree name for test'    



Expected Results 

========== 

1.1 http response code is 400

>

[[ TC5524 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， set tree_id=not_exist_id

 set requestData.name = 'update tree name for test'    



Expected Results 

========== 

1.1 http response code is 400



[[ TC5525 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， tree_id

 set requestData.name = null   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5526 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set timeframe ， tree_id

 set requestData.name = "   



Expected Results 

========== 

1.1 http response code is 4000

[[ TC5527 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， timeframe

 set requestData.name = '!@#$%^&'

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5528 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， timeframe

 set requestData.name = 'abcd...'(length=64)

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5529 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， timeframe

 set requestData.name = '????'

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5530 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， timeframe

 set requestData.name = 'abcd...'(length=65)

2. get tree     



Expected Results 

========== 

1.1 http response code is 400



[[ TC5531 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id??unset timeframe

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5532 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=null

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5533 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=' '

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5534 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=abcdedddddd

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5535 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=2147483646

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 200

[[ TC5536 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=0

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 400

[[ TC5537 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with set tree_id， set timeframe=12233

 set requestData.name = 'test name for update'   



Expected Results 

========== 

1.1 http response code is 404

[[ TC5538 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activated tree

2. update tree with tree_id， set timeframe=time() - 3600

 set requestData.name = 'test update'

3. get tree     



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify tree name is updated





[[ TC5539 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activated tree

2. update tree with tree_id， set timeframe=time() + 3600

 set requestData.name = 'test update'

3. get tree     



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify tree name is updated





[[ TC5540 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， set timeframe=time() - 3600

 set requestData.name = 'test update'

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5541 ]]


========== 

URI Syntax:  

Update Tree: (PUT)/v1/egs/category/tree/update/?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. update tree with tree_id， set timeframe=time() + 3600

 set requestData.name = 'test update'

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree name is updated





[[ TC5542 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree with tree_id， timeframe

2. get tree     



Expected Results 

========== 

1.1-2.1 http response code is 200

2.2 verify tree status is 1





[[ TC5543 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree unset tree_id

     

Expected Results 

========== 

1. http response code is 400



[[ TC5544 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set tree_id=not-exist

     

Expected Results 

========== 

1. http response code is 404



[[ TC5545 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set tree_id=null

     

Expected Results 

========== 

1. http response code is 400



[[ TC5546 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=$currentData.timeframe - 3600

     

Expected Results 

========== 

1. http response code is 404



[[ TC5547 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree unset timeframe

     

Expected Results 

========== 

1. http response code is 400



[[ TC5548 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=null 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5549 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=' ' 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5550 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe='aaaaaaaaaa' 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5551 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=2147483646 

     

Expected Results 

========== 

1. http response code is 404



[[ TC5552 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=214748360.6 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5553 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=-2147483606 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5554 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=0 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5555 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=2147483648 

     

Expected Results 

========== 

1. http response code is 400



[[ TC5556 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree set timeframe=12345 

     

Expected Results 

========== 

1. http response code is 404



[[ TC5557 ]]


========== 

URI Syntax:  

Activate Tree: (GET)/v1/egs/category/tree/activate/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activate tree with tree_id， timeframe

2. activate tree again

3. get tree     



Expected Results 

========== 

1.1-3.1 http response code is 200

3.2 verify tree status is 1





[[ TC5559 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set tree_id =null



Expected Results 

========== 

1.1 http response code is 404



[[ TC5560 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set tree_id =' ' 



Expected Results 

========== 

1.1 http response code is 404



[[ TC5561 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set tree_id =12345 



Expected Results 

========== 

1.1 http response code is 404



[[ TC5562 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. insert node on the tree

2. delete tree with tree_id， timeframe

3. get node



Expected Results 

========== 

1.1-2.1 http response code is 200

3.1 http code 404

[[ TC5563 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. activated tree

2. delete tree with tree_id， timeframe



Expected Results 

========== 

1-2 http response code is 200







[[ TC5564 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. sleep 3s delete tree with tree_id， timeframe



Expected Results 

========== 

1. http response code is 200







[[ TC5565 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree without timeframe 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5566 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=123456789012 



Expected Results 

========== 

1.1 http response code is 404



[[ TC5567 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=null2 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5568 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=' ' 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5569 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe='AAAA ' 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5570 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=1234567.12 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5571 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree set timeframe=2147483646  and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=2147483646 



Expected Results 

========== 

1.1 http response code is 200



[[ TC5572 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=-1234567123 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5573 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=0 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5574 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set timeframe=2147483648 



Expected Results 

========== 

1.1 http response code is 400



[[ TC5575 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. activated tree 

1. delete tree with tree_id， timeframe 



Expected Results 

========== 

1 -2 . http response code is 200







[[ TC5576 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. activated tree 

1. delete tree with tree_id， timeframe= time()+3600 



Expected Results 

========== 

1 - 2. http response code is 200







[[ TC5577 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but unset tree_id

2. insert node with all parameters but unset parent_cat_id

3. insert node with all parameters but unset name

4. insert node with all parameters but unset attributes

5. insert node with all parameters but unset attributes[attri_name][type]

6.

[[ TC5578 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but set tree_id=null

2. insert node with all par

[[ TC5579 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but set tree_id=' '

2. insert node wi

[[ TC5580 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node  set parent_cat_id='1234567890123'



Expected Results 

========== 

1. http response code is 400



[[ TC5581 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node  set parent_cat_id='??'



Expected Results 

========== 

1. http response code is 400

[[ TC5582 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node  set parent_cat_id='this_id'



Expected Results 

========== 

1. http response code is 400

[[ TC5583 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node  set parent_cat_id=0



Expected Results 

========== 

1. http response code is 200

[[ TC5584 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but set tree_id='!@#$%'

2. insert node with all parameters but set parent_cat_id=

[[ TC5585 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but set tree_id=12345

[[ TC5586 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters but set tree_id='abcde'

2. insert node with all parameters but set attributes[attri_name][type]='abcde'

3. insert node with all parameters but set attributes[attri_name][value]='abcde'

4. insert node with all parameters but set attributes[attri_name][required]='abcde'

5. insert node with all parameters but set nodeData['attributes']['xxx']['searchable']='abcde'



Expected Results 

========== 

1~5 http response code is 400









[[ TC5587 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters，and get cat_id

2. insert node set parent_cat_id = cat_id



Expected Results 

========== 

1~2 http response code is 200









[[ TC5588 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set attributes.attri_name.type = 'text'



Expected Results 

========== 

1. http response code is 200









[[ TC5589 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = 'aaaaabbbbb'



Expected Results 

========== 

1. http response code is 400









[[ TC5590 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = 2147483646



Expected Results 

========== 

1. http response code is 404









[[ TC5591 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = 21474836.86



Expected Results 

========== 

1. http response code is 400









[[ TC5592 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = -2147483633



Expected Results 

========== 

1. http response code is 400









[[ TC5593 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = -2147483633



Expected Results 

========== 

1. http response code is 400









[[ TC5594 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = 2147483648



Expected Results 

========== 

1. http response code is 400









[[ TC5595 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set timeframe = $timeframe - 1024



Expected Results 

========== 

1. http response code is 400









[[ TC5596 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. activated tree 

2. insert node with parameters



Expected Results 

========== 

1~2. http response code is 200









[[ TC5597 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with parameters get node1

2. insert alias node get node2

3. insert node set nodeData['cat_id'] = node2



Expected Results 

========== 

1~2. http response code is 200

3. http response code is 400



[[ TC5598 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set taxonomy_node_id='?y'

2. insert node set cluster_id='?y'





Expected Results 

========== 

1~2 http response code is 200









[[ TC5599 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set taxonomy_node_id='111111111111111111111111111111111111111'

2. insert node set cluster_id='111111111111111111111111111111111111111'





Expected Results 

========== 

1~2 http response code is 400









[[ TC5600 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set taxonomy_node_id，cluster_id，and attributes



Expected Results 

========== 

1. http response code is 400









[[ TC5601 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set cluster_id but not set taxonomy_node_id

2. insert node set taxonomy_node_id but not set cluster_id



Expected Results 

========== 

1. http response code is 400

2. http response code is 200



[[ TC5602 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node without set next_sibling_cat_id



Expected Results 

========== 

1. http response code is 200



[[ TC5603 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id='??'



Expected Results 

========== 

1. http response code is 400



[[ TC5604 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id='1234567890123'



Expected Results 

========== 

1. http response code is 400



[[ TC5605 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC5606 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id='-1



Expected Results 

========== 

1. http response code is 404



[[ TC5607 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id=0



Expected Results 

========== 

1. http response code is 400



[[ TC5608 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id='!@#$'



Expected Results 

========== 

1. http response code is 400



[[ TC5609 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node set next_sibling_cat_id='123456ab'



Expected Results 

========== 

1. http response code is 400



[[ TC5610 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date??

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert root node get rootNodeId

2. insert node set next_sibling_cat_id=rootNodeId



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC5611 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set tree_id=''



   insert tree set cat_id=''

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5612 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set cat_id=''

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5613 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set tree_id=null

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5614 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set tree_id=urlencode(' ')

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5615 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set tree_id=''

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5616 ]]


 

==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. 2 insert tree_id

 

2. delete node first  tree_id



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5617 ]]


 

==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. 2  insert tree_id

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5618 ]]


 

==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. 2 insert tree_id

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5619 ]]


 

==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. 2 insert tree_id

 

2. nly delete type=normal



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5620 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set tree_id is not exist

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5621 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set cat_id is not exist

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5622 ]]


 ==========

 A.

 URI Syntax:  /v1/egs/category/node/delete//?timeframe=

 method:DELETE



  Testing Steps:

 ==========

 1. insert tree set timeframe is not exist

  2. delete node

 3. delete tree_id



  Expected Results

 ==========

 1.1-3.1 http response code is 400

[[ TC5623 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is null

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5624 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is empty

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5625 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is ten letters

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5626 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. 2 insert tree set timeframe is max

 

2. delete node



3.  2 delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5627 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is 21474836.7

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5628 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is minus

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5629 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is zero

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5630 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is max

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5631 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree set timeframe is not exist

 

2. delete node timeframe is now time



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5632 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree and activate tree

 

2. delete node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5633 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree tree_id is not exist

 

   update Data



   delete tree_id



2. insert tree set without name



   update Data



   delete tree_id



3. insert tree set without attributes



   update Data



   delete tree_id



4. insert tree set without type



   update Data



   delete tree_id



5. insert tree set without value



   update Data



   delete tree_id



6. insert tree set without required



    update Data



    delete tree_id



7. insert tree set timeframe is not exist



   update Data



   delete tree_id



8. insert tree set timeframe is database not exist



   update Data



   delete tree_id



9. insert tree set attributes searchable is miss



    update Data



   delete tree_id



10. insert tree



   update node  without attribute

   update Data



   delete tree_id



11. insert tree set without cluster_is 



    update Data



    delete tree_id



12. insert tree set without taxonomy_node_id 



    update Data



    delete tree_id





Expected Results



==========



1. http response code is 404



2.1-7.1 http response code is 400



8. http response code is 404



9. http response code is 200



10.1-12.1 http response code is 400



[[ TC5634 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree tree_id is null

 

   update Data



   delete tree_id



2. insert tree set name is null



   update Data



   delete tree_id



3. insert tree set attributes is null



   update Data



   delete tree_id



4. insert tree set type is null



   update Data



   delete tree_id



5. insert tree set value is null



   update Data



   delete tree_id



6. insert tree set required is null



    update Data



    delete tree_id



7. insert tree set timeframe is null



   update Data



   delete tree_id



8. insert tree set attributes searchable is null



    update Data



   delete tree_id



9. insert tree set cluster_id is null



    update Data



    delete tree_id



10. insert tree set taxonomy_node_id is null



    update Data



    delete tree_id





 

Expected Results



==========



1.1-10.1. http response code is 400



[[ TC5635 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree tree_id is ''

 

   update Data



   delete tree_id



2. insert tree set name is ''



   update Data



   delete tree_id



3. insert tree set attributes is ''



   update Data



   delete tree_id



4. insert tree set type is ''



   update Data



   delete tree_id



5. insert tree set value is ''



   update Data



   delete tree_id



6. insert tree set required is ''



    update Data



    delete tree_id



7. insert tree set timeframe is''



   update Data



   delete tree_id



8. insert tree set attributes searchable is ''



    update Data



   delete tree_id



9. insert tree set cluster_id is ''



    update Data



    delete tree_id



10. insert tree set taxonomy_node_id is ''l



    update Data



    delete tree_id





 

Expected Results



==========



1.1-10.1. http response code is 400



[[ TC5636 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set name is special



   update Data



   delete tree_id



2. insert tree set attributes is special



   update Data



   delete tree_id



3. insert tree set type is special



   update Data



   delete tree_id



4. insert tree set value is special



   update Data



   delete tree_id



5. insert tree set required is special



    update Data



    delete tree_id



6. insert tree type checkBox value is special



   update Data



   delete tree_id



7. insert tree type radioBox value is special



    update Data



   delete tree_id



8. insert tree set cluster_id is special



    update Data



    get node path



 search node 



 get children node 



9. insert tree set taxonomy_node_id is special



    update Data



 get node path



 search node 



 get children node 



    delete tree_id





 

Expected Results



==========



7.1-7.1. http response code is 400



8.1-9.1. http response code is 500



[[ TC5637 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set name is integer



   update Data



   delete tree_id



2. insert tree set attributes is integer



   update Data



   delete tree_id



3. insert tree set type is integer



   update Data



   delete tree_id



4. insert tree set value is integer



   update Data



   delete tree_id



5. insert tree set required is integer



    update Data



    delete tree_id



6. insert tree type checkBOX value is integer



   update Data



   delete tree_id



7. insert tree type radioBOX value is integer



    update Data



   delete tree_id



8. insert tree set cluster_id is integer



    update Data



    get node path



 search node 



 get children node 



9. insert tree set taxonomy_node_id is integer



    update Data



 get node path



 search node 



 get children node 



    delete tree_id





 

Expected Results



==========



1.1-9.1. http response code is 400



[[ TC5638 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attributes is string



   update Data



   delete tree_id



2. insert tree set type is string



   update Data



   delete tree_id



3. insert tree set value is string



   update Data



   delete tree_id



4. insert tree set required is string



    update Data



    delete tree_id



5. insert tree type checkBOX value is string



   update Data



   delete tree_id



6. insert tree type radioBOX value is string



    update Data



   delete tree_id



7. insert tree set cluster_id is string



    update Data



    delete tree_id



8. insert tree set taxonomy_node_id is integer



    update Data



    delete tree_id





 

Expected Results



==========



1.1-8.1. http response code is 400



[[ TC5639 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree



2. update data



3. compare updated data



4. update node data name='twice name'



5. update data



6. compare updated data



7.delete tree_id







Expected Results



==========



1.1-7.1. http response code is 200



[[ TC5640 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. 2 insert tree



2. 2 update data



3. 2 compare updated data



4.delete tree_id







Expected Results



==========



1.1-4.1. http response code is 200



[[ TC5641 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. set alias test data



2. compose update url



3. insert alias



4. update data



5. compare updated data



6.delete tree_id







Expected Results



==========



1.1-6.1. http response code is 200



[[ TC5642 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attributes type is text



2. update data



3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5643 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attributes type is text and max miss



2. update data



3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5644 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attributes type is text and min miss



2. update data



3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5645 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attributes type is checkbox



   update data



   delete tree_id



2. insert tree set attributes type is radioBox



   update data



   delete tree_id



3. insert tree set searchable is list



   update data



   delete tree_id



4. insert tree set cluster_id is list



   update data



   delete tree_id



5. insert tree set taxonomy_node_id is list



   update data



   delete tree_id







Expected Results



==========



1.1-2.1. http response code is 200



3.1-5.1. http response code is 400



[[ TC5646 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframe is 10 character



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5647 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframe maxlength is 2147483646 



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 404



[[ TC5648 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframe is float number



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 404



[[ TC5649 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframe is negative



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 404



[[ TC5650 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframe min is 0



    update data< br \/>

2. insert tree set searchable min is 0



    update data< br \/>

    delete tree_id

           

3. insert tree set cluster_id min is 0



    update data< br \/>

4. insert tree set taxonomy_node_id min is 0



    update data< br \/>

    delete tree_id

           



Expected Results



==========



1.1-4.1. http response code is 400



[[ TC5651 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set timeframemax is 2147483648 



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5652 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and activate tree and timeframe is past time



2. update data



3. delete tree_id





  

Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5653 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is text and have undefined key-value pair 



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5654 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is checkbox and have undefined key-value pair 



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5655 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is radiobox，and have undefined key-value pair 



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5656 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is text，and have undefined key-value pair  and value type is integer



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5657 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is checkbox，and have undefined key-value pair  and value type is integer



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5658 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is radiobox，and have undefined key-value pair  and value type is integer



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5659 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree setattributes type is radiobox，and have undefined key-value pair  and insert special character



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5660 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5661 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree andinsert special character to cust-data key-value pair



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5662 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair， value is integer



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5663 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair， value is array



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5664 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair， value is list



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5665 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attribute max length is 8000



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5666 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set attribute max length is 8001



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5667 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair and max length = 4000



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5668 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and have cust-data key-value pair and max length = 4001



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5669 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and attributes searchable is true



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5670 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and attributes searchable is false



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 200



[[ TC5671 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and attributes searchable is 1



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5672 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and attributes searchable is array



2. update data< br \/>

3. delete tree_id







Expected Results



==========



1.1-3.1. http response code is 400



[[ TC5673 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree and attribute insert max length is 5000



2. create String length is 2000



3. update data



4. delete tree_id





  

Expected Results



==========



1.1-4.1. http response code is 200



[[ TC5674 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set cluster_id is -1



   update data



   delete tree_id



2. insert tree set taxonomy_node_id is -1



   update data



   delete tree_id



  

Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5675 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set cluster_id is double



   update data



   delete tree_id



2. insert tree set taxonomy_node_id is double



   update data



   delete tree_id



  

Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5676 ]]


 

==========



A.



URI Syntax:   /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree set cluster_id is scope



   update data



   delete tree_id



2. insert tree set taxonomy_node_id is scope



   update data



   delete tree_id



  

Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5677 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'text'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('test' => 'undefined value') 



2. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'checkbox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('test' => 'undefined value') 



3. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'radiobox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('test' => 'undefined value')  

 

Expected Results 

========== 

1~3. http response code is 200











[[ TC5678 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'text'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('test' => 123) 



2. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'checkbox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('a' => '1'， 'b' => array('test'=>'2')) 



3. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'radiobox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('1'， '2'， array('test'=>'2')) 

 

Expected Results 

========== 

1~3. http response code is 400











[[ TC5679 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'text'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('~!@#$%^&*()_+{}|":<>?/.，\';][=-' => '~!@#$%^&*()_+{}|":<>?/.，\';][=-')



2. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'checkbox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('~!@#$%^&*()_+{}|":<>?/.，\';][=-' => '~!@#$%^&*()_+{}|":<>?/.，\';][=-') 



3. insert node with all parameters 

 set nodeData['attributes']['attributes name']['type'] = 'radiobox'

    set nodeData['attributes']['attributes name']['cust_tag'] = array('~!@#$%^&*()_+{}|":<>?/.，\';][=-' => '~!@#$%^&*()_+{}|":<>?/.，\';][=-')

 

Expected Results 

========== 

1~3. http response code is 200











[[ TC5680 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

 set nodeData['cust_data'] = array('key'=>'undefined data')

    

Expected Results 

========== 

1. http response code is 200











[[ TC5681 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

 set nodeData['cust_data'] = array('key'=>'~!@#$%^&*()_+{}|":<>?/.，\';][=-')

    

Expected Results 

========== 

1. http response code is 200











[[ TC5682 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes']['xxx']['searchable'] = true 





Expected Results 

========== 

1. http response code is 200











[[ TC5683 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes']['xxx']['searchable'] = false 





Expected Results 

========== 

1. http response code is 200











[[ TC5684 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes']['xxx']['searchable'] = 0 





Expected Results 

========== 

1. http response code is 400











[[ TC5685 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes']['xxx']['searchable'] = 1 





Expected Results 

========== 

1. http response code is 400











[[ TC5686 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes']['xxx']['searchable'] = array('key' => 'value') 





Expected Results 

========== 

1. http response code is 400











[[ TC5689 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set tree_id is not exist



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5690 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set tree_id=''



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5691 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set cat_id is not exist



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5692 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set cat_id = ''



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5693 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set parent cat_id = ''



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5694 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set parent cat_id  is null



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5695 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree set parent cat_id  is ''



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5696 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree and  parent  is leaf



2. move data



3. get node data



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



[[ TC5697 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert node and insert alias node and insert normal node



2. move data



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5698 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert node and insert alias node and insert normal node



2. move data and parent is normal



3. get node data



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



[[ TC5699 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert parent node and insert child node and insert normal node



2. move data



3. get node data



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 200



[[ TC5700 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. set timeframe is past



2. insert tree_id



3. activate tree



4. move data



5. get node data



6. 2 delete tree_id







Expected Results



==========



1.1-6.1 http response code is 200



[[ TC5701 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. set timeframe is future



2. insert tree_id



3. activate tree



4. move data



5. get node data



6. 2 delete tree_id







Expected Results



==========



1.1-6.1 http response code is 200



[[ TC5702 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set tree_id is not exist



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5703 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set tree_id is null



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5704 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set tree_id is ''



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5705 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is not exist



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5706 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is null



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5707 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is ''



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5708 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is int type



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5709 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is special



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5710 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is max length



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5711 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is chinese



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5712 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is not exist



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5713 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set parent_cat_id is zero



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5714 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias parent node



2. insert alias node which parent node is alias node



3. get node



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 400



[[ TC5715 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set name is not exist



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5716 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set name is null



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5717 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set name is ''



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5718 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set name is special



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5719 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set name is int type



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5720 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is not exist



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5721 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is null



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5722 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is ''



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5723 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is int type



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5724 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is special



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5725 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is chinese



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5726 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is max length



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5727 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is not exist tree



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5728 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set alias_cat_id is zero



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5729 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1.  insert an alias node



2. nsert an alias node which alias_cat_id is an alias node



3. get node



4. delete tree_id







Expected Results



==========



1.1-4.1 http response code is 400



[[ TC5730 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node without set next_sibling_cat_id



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5731 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set next_sibling_cat_id is double



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 404



[[ TC5732 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set next_sibling_cat_id is scope



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 400



[[ TC5733 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



 insert alias node set next_sibling_cat_id = ''







Expected Results



==========



1. http response code is 400



[[ TC5734 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



 insert alias node set next_sibling_cat_id is negative







Expected Results



==========



1. http response code is 404



[[ TC5735 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



 insert alias node set next_sibling_cat_id is zero







Expected Results



==========



1. http response code is 400



[[ TC5736 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert alias node set next_sibling_cat_id is null



2. get node



3. delete tree_id







Expected Results



==========



1.1-3.1 http response code is 200



[[ TC5737 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



 insert alias node set next_sibling_cat_id is special







Expected Results



==========



1. http response code is 404



[[ TC5738 ]]




==========



A.



URI Syntax:/v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



 insert alias node set next_sibling_cat_id is not exist







Expected Results



==========



1. http response code is 404



[[ TC5749 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get node path set tree_id is not exist









Expected Results



==========



1. http response code is 404



[[ TC5750 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get node path set tree_id is null









Expected Results



==========



1. http response code is 404



[[ TC5751 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get node path set tree_id is ''









Expected Results



==========



1. http response code is 400



[[ TC5752 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2. get node path set cat_id is not exist







Expected Results



==========



1.1-2.1. http response code is 404



[[ TC5753 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2. get node path set cat_id is null







Expected Results



==========



1.1-2.1. http response code is 404



[[ TC5754 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2. get node path set cat_id is ''







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5755 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2. get node path set cat_id is zero







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5756 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2. insert node as catid(2)'s child this node's catid will be "4" and links to catid(3)



3. get node path



4. verify all node







Expected Results



==========



1.1-4.1 http response code is 200



[[ TC5757 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is not exist in database







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5758 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is not input







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5759 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is null







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5760 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is ''







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5761 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is ten char







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5762 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is maximum







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5763 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is float







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5764 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is negative







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5765 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1.handle tree



2.  get node path and  timeframe is zero







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5766 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2. get node path and no  activated_only is zero







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5767 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2. get node path set  activated_only is zero







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5768 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2. get node path and  no  activated_only is 1







Expected Results



==========



1.1-2.1. http response code is 404



[[ TC5769 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path set   activated_only is 1







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5770 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path and   no   activated_only is true







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5771 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path set  activated_only is true







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5772 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path and   no   activated_only is false







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5773 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path set  activated_only is false







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5774 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path and  activated_only is not include







Expected Results



==========



1.1-2.1. http response code is 200



[[ TC5775 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path and  no  activated_only is not include







Expected Results



==========



1.1-2.1. http response code is 404



[[ TC5776 ]]




==========



A.



URI Syntax:/v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. handle tree



2.  get node path and  no  activated_only is 10







Expected Results



==========



1.1-2.1. http response code is 400



[[ TC5777 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodes and no tree_id







==========



1. http response code is 400



[[ TC5778 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodes and tree_id is ' '







==========



1. http response code is 400



[[ TC5779 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes



3. validate nodes



4. delete tree_id





==========



1.1-4.1. http response code is 200



[[ TC5780 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&amp;activated_only=&amp;show_detail=&amp;inherit=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes and tree_id is null



  ==========

 1. http response code is 404

[[ TC5781 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodes and tree_id is empty







==========



1. http response code is 400



[[ TC5782 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&amp;activated_only=&amp;show_detail=&amp;inherit=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes and tree_id is not exist



  ==========

 1. http response code is 404

[[ TC5783 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is null



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5784 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is empty



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5785 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&amp;activated_only=&amp;show_detail=&amp;inherit=

 method:GET



  Testing Steps:

 ==========

 1. prepare tree and timeframe is not exist

 2. get all nodes

 3. validate nodes

 4. delete tree_id



  ==========

 1.1-4.1. http response code is 404

[[ TC5786 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is ten chars



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5787 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is max length



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC5788 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is float



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5789 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is negetive



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5790 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is min



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5791 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and timeframe is more than max



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5792 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=0 which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC5793 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=0 which tree_id is activated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC5794 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=1 which tree_id is activated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC5795 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=1 which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC5796 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=true which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5797 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=true which tree_id is activated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5798 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=false which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5799 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only=false which tree_id is activated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC5800 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only is not include inURL which tree_id is activated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC5801 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only is not include inURL which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC5802 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activated_only is 10 inURL which tree_id is inactivated



2. get all nodes



3. validate nodes



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC5803 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while activated_only = 1，show_detail = 0，inherit = null



2. get all nodes









==========



1.1-2.1. http response code is 200



[[ TC5804 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while activated_only = 1，show_detail = null，inherit = 0



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5805 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while activated_only = 1，show_detail = null，inherit = 1



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5806 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while show_detail = 1



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5807 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while show_detail = null



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5808 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  inherit = 1



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5809 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  inherit = null



2. get all nodes







==========



1.1-2.1. http response code is 200



[[ TC5810 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = 1 and inherit = 1



2. get all nodes



3. check data







==========



1.1-3.1. http response code is 200



[[ TC5811 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = 0 and inherit = null



2. get all nodes



3. check data







==========



1.1-3.1. http response code is 200



[[ TC5812 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = 1 and inherit = null



2. get all nodes



3.  check data







==========



1.1-3.1. http response code is 200



[[ TC5813 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = null  and inherit = 0



2. get all nodes



3.  check data







==========



1.1-3.1. http response code is 200



[[ TC5814 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = null  and inherit = 1



2. get all nodes



3.  check data







==========



1.1-3.1. http response code is 200



[[ TC5815 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = 0  and inherit = 1



2. get all nodes



3.  check data







==========



1.1-3.1. http response code is 200



[[ TC5816 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/get_all_nodes/?timeframe=&activated_only=&show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree and activate tree and set while  show_detail = 1  and inherit = 0



2. get all nodes



3.  check data







==========



1.1-3.1. http response code is 200



[[ TC5824 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5825 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set tree_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5826 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set tree_id=''



Expected Results 

========== 

1. http response code is 400



[[ TC5827 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set cat_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5828 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set cat_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5829 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set cat_id=''



Expected Results 

========== 

1. http response code is 400



[[ TC5830 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set cat_id=0



Expected Results 

========== 

1. http response code is 200



[[ TC5831 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. insert leaf node1

1. get node set cat_id='node1'



Expected Results 

========== 

1. http response code is 200



[[ TC5832 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. insert alias node1

1. get node set cat_id='node1'



Expected Results 

========== 

1. http response code is 200



[[ TC5833 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=time()+4000



Expected Results 

========== 

1. http response code is 200



[[ TC5834 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=time()+4000



Expected Results 

========== 

1. http response code is 200



[[ TC5835 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=null



Expected Results 

========== 

1. http response code is 400



[[ TC5836 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=''



Expected Results 

========== 

1. http response code is 400



[[ TC5837 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=abdcdejo''



Expected Results 

========== 

1. http response code is 400



[[ TC5838 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200



[[ TC5839 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=(int)123456789.1



Expected Results 

========== 

1. http response code is 200



[[ TC5840 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=-1234567890



Expected Results 

========== 

1. http response code is 400



[[ TC5841 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=0



Expected Results 

========== 

1. http response code is 400



[[ TC5842 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set timeframe=2147483647



Expected Results 

========== 

1. http response code is 400



[[ TC5843 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set activated_only=0



Expected Results 

========== 

1. http response code is 200



[[ TC5844 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node set activated_only=0



Expected Results 

========== 

1~2. http response code is 200



[[ TC5845 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set activated_only=1



Expected Results 

========== 

1. http response code is 404



[[ TC5846 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node set activated_only=1



Expected Results 

========== 

1~2. http response code is 200



[[ TC5847 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set activated_only=true



Expected Results 

========== 

1. http response code is 400



[[ TC5848 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node set activated_only=true



Expected Results 

========== 

2. http response code is 400



[[ TC5849 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set activated_only=false



Expected Results 

========== 

1. http response code is 400



[[ TC5850 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node set activated_only=false



Expected Results 

========== 

2. http response code is 400



[[ TC5851 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node unset activated_only



Expected Results 

========== 

1~2. http response code is 200



[[ TC5852 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node unset activated_only



Expected Results 

========== 

1. http response code is 404



[[ TC5853 ]]


========== 

URI Syntax:  

Get Node: (GET)/v1/egs/category/node/get_node//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node set activated_only=10



Expected Results 

========== 

1. http response code is 400



[[ TC5854 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5855 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set tree_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5856 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set tree_id=''



Expected Results 

========== 

1. http response code is 400



[[ TC5857 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set cat_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5858 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set cat_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5859 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set cat_id=''



Expected Results 

========== 

1. http response code is 400



[[ TC5860 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set cat_id=0



Expected Results 

========== 

1. http response code is 200



[[ TC5861 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get leaf node childrenNode 



Expected Results 

========== 

1. http response code is 404



[[ TC5862 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get alias node childrenNode 



Expected Results 

========== 

1. http response code is 404



[[ TC5863 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=time()+4000



Expected Results 

========== 

1. http response code is 200



[[ TC5864 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=time()+4000



Expected Results 

========== 

1. http response code is 200



[[ TC5865 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=null



Expected Results 

========== 

1. http response code is 400



[[ TC5866 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=''



Expected Results 

========== 

1. http response code is 400



[[ TC5867 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe='abcdemfidje'



Expected Results 

========== 

1. http response code is 400



[[ TC5868 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200



[[ TC5869 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=(int)2147483646.23



Expected Results 

========== 

1. http response code is 200



[[ TC5870 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=-1147483646



Expected Results 

========== 

1. http response code is 400



[[ TC5871 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=0



Expected Results 

========== 

1. http response code is 400



[[ TC5872 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200



[[ TC5873 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set activated_only=0



Expected Results 

========== 

1. http response code is 200



[[ TC5874 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node cat_id childrenNode set activated_only=0



Expected Results 

========== 

1~2. http response code is 200



[[ TC5875 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set activated_only=1



Expected Results 

========== 

1. http response code is 404



[[ TC5876 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node cat_id childrenNode set activated_only=1



Expected Results 

========== 

1~2. http response code is 200



[[ TC5877 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set activated_only=true



Expected Results 

========== 

1. http response code is 400



[[ TC5878 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node cat_id childrenNode set activated_only=true



Expected Results 

========== 

2. http response code is 400



[[ TC5879 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set activated_only=false



Expected Results 

========== 

1. http response code is 400



[[ TC5880 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node cat_id childrenNode set activated_only=false



Expected Results 

========== 

2. http response code is 400



[[ TC5881 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. activate tree

2. get node cat_id childrenNode unset activated_only



Expected Results 

========== 

1~2. http response code is 200



[[ TC5882 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode unset activated_only 



Expected Results 

========== 

1. http response code is 404



[[ TC5883 ]]


========== 

URI Syntax:  

Get Children of Node: (GET)/v1/egs/category/node/get_children//?timeframe=&activated_only=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node and get cat_id

Testing Steps: 

========== 

1. get node cat_id childrenNode set activated_only=10 



Expected Results 

========== 

1. http response code is 400



[[ TC5884 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5885 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set tree_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5886 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set tree_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC5887 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set cat_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC5888 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set cat_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC5889 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set cat_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC5890 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set cat_id=0



Expected Results 

========== 

1. http response code is 200



[[ TC5891 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='three bedrooms'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5892 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=1234567890



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5893 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=array('three bedrooms'，'three bedrooms');



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5894 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='adddddvcc...'(length=21);



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5895 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='addd...'(length=9);



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5896 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE1='addddfevccc';



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5897 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='111'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5898 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='444'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5899 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=111



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5900 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=array('111'，'333')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5901 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE1='333'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5902 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='111'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5903 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='444'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5904 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=111



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5905 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=array('111'，'333')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5906 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE1='333'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5907 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=null



Expected Results 

========== 

1. http response code is 200



[[ TC5908 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=null



Expected Results 

========== 

1. http response code is 200



[[ TC5909 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=''



Expected Results 

========== 

1. http response code is 400



[[ TC5910 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe='string1234'



Expected Results 

========== 

1. http response code is 400



[[ TC5911 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200



[[ TC5912 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=2147483646.65



Expected Results 

========== 

1. http response code is 400



[[ TC5913 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=-2147483646



Expected Results 

========== 

1. http response code is 400



[[ TC5914 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=0



Expected Results 

========== 

1. http response code is 400



[[ TC5915 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=2147483647



Expected Results 

========== 

1. http response code is 400



[[ TC5916 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. validate date set timeframe=time()+3600



Expected Results 

========== 

1. http response code is 200



[[ TC5917 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=array('111'，'333')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5918 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE1='333'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5919 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value={'max':20 ， 'min':10}

  set attributes[ROOM_TYPE].required=true

  set attributes[ROOM_SIZE].type='rediobox'

  set attributes[ROOM_SIZE].value={array('111'，'222'，'333')

  set attributes[ROOM_SIZE].required=false

2. validate date set requstDate.ROOM_SIZE='111'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5920 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value=array('min'=>10，'max'=>20)

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='1234567890123...'(length=20)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5921 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value=array('min'=>10，'max'=>20)

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='123456789'(length=9)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5922 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=false

  

2. validate date set requstDate.ROOM_TYPE='444'



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5923 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='checkbox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=null



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5924 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='rediobox'

  set attributes[ROOM_TYPE].value=array('111'，'222'，'333')

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=null



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5925 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value=array('min'=>10，'max'=>20)

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE=null



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5926 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value=array('min'=>10，'max'=>20)

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='ÖÐÎÄ...'(length=20)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=true



[[ TC5927 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     set attributes[ROOM_TYPE].type='text'

  set attributes[ROOM_TYPE].value=array('min'=>10，'max'=>20)

  set attributes[ROOM_TYPE].required=true

  

2. validate date set requstDate.ROOM_TYPE='ÖÐÎÄ...'(length=21)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response.status=false



[[ TC5928 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name=[]

4. validate date unset attributes.name



Expected Results 

========== 

1.1~4.1 http response code is 200

3.2~4.2 verify response.status=false



[[ TC5929 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name=[LornamaTest]



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response.status=false



[[ TC5930 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name=0



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response.status=true



[[ TC5931 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name=-1



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response.status=false



[[ TC5932 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name=null



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response.status=false



[[ TC5933 ]]


========== 

URI Syntax:  

Validate Data: (POST)/v1/egs/category/validate/validate_attributes//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

Testing Steps: 

========== 

1. insert node 

     unset attributes

  set cluster_id='12345'

  set taxonomy_node_id = '2222'

2. get attributes by cluster_id 

3. validate date set attributes.name='!@#$%'



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response.status=false



[[ TC5934 ]]


========== 

URI Syntax:  

Update Node: (PUT)/v1/egs/category/node/update//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. insert node and get cat_id

     set request_data['attributes']['xxx']['cust_tag'] = array('key1' => 'value1'， 'key2' => 'value2')

2. update node 

 set request_data['attributes']['xxx']['cust_tag'] = 12345

  

Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC5935 ]]


========== 

URI Syntax:  

Update Node: (PUT)/v1/egs/category/node/update//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. insert node and get cat_id

     set request_data['attributes']['xxx']['cust_tag'] = array('key1' => 'value1'， 'key2' => 'value2')

2. update node 

 set request_data['attributes']['xxx']['cust_tag'] = '12345'

  

Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC5936 ]]


========== 

URI Syntax:  

Update Node: (PUT)/v1/egs/category/node/update//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. insert node and get cat_id

     set request_data['attributes']['xxx']['cust_tag'] = array('key1' => 'value1'， 'key2' => 'value2')

2. update node 

 set request_data['attributes']['xxx']['cust_tag'] = array("12345"，"12345")

  

Expected Results 

========== 

1~2. http response code is 200





[[ TC5937 ]]


========== 

URI Syntax:  

Update Node: (PUT)/v1/egs/category/node/update//?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. insert node and get cat_id

     set request_data['attributes']['xxx']['cust_tag'] = array('key1' => 'value1'， 'key2' => 'value2')

2. update node 

 set request_data['attributes']['xxx']['cust_tag'] = array("key1" => "12345"，"key2"=>"12345")

  

Expected Results 

========== 

1~2. http response code is 200





[[ TC5945 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set tree_id=null



Expected Results 

========== 

1. http response code is 400





[[ TC5946 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set tree_id=' '



Expected Results 

========== 

1. http response code is 400





[[ TC5947 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404





[[ TC5948 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set timeframe=null



Expected Results 

========== 

1. http response code is 400





[[ TC5949 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set timeframe=' '



Expected Results 

========== 

1. http response code is 400





[[ TC5950 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date unset timeframe



Expected Results 

========== 

1. http response code is 200





[[ TC5951 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set timeframe='notexist'



Expected Results 

========== 

1. http response code is 400





[[ TC5952 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200





[[ TC5953 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set timeframe=2147483647



Expected Results 

========== 

1. http response code is 400





[[ TC5954 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set cat_id=null



Expected Results 

========== 

1. http response code is 400





[[ TC5955 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set cat_id=' '



Expected Results 

========== 

1. http response code is 400





[[ TC5956 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date unset cat_id



Expected Results 

========== 

1. http response code is 400





[[ TC5957 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date set cat_id='notexist'



Expected Results 

========== 

1. http response code is 404





[[ TC5958 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = array('a'， 'b')



Expected Results 

========== 

1. http response code is 200





[[ TC5959 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = 1



Expected Results 

========== 

1. http response code is 200





[[ TC5960 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = 'aaaa...'(length>20)



Expected Results 

========== 

1. http response code is 200





[[ TC5961 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = 'aaa'



Expected Results 

========== 

1. http response code is 200





[[ TC5962 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

  unset requestData[0]['attributes']['ROOM_TYPE'] 



Expected Results 

========== 

1. http response code is 200





[[ TC5963 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['COLOR'] = array('aa'， b'b')



Expected Results 

========== 

1. http response code is 200





[[ TC5964 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['COLOR'] = 'aaaaaaaaaaaa'



Expected Results 

========== 

1. http response code is 200





[[ TC5965 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['COLOR'] = 1



Expected Results 

========== 

1. http response code is 200





[[ TC5966 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 unset requestData[0]['attributes']['COLOR'] 



Expected Results 

========== 

1. http response code is 200





[[ TC5967 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['COLOR'] = 'black'



Expected Results 

========== 

1. http response code is 200





[[ TC5968 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['FLOOR'] = array('a'， 'b')



Expected Results 

========== 

1. http response code is 200





[[ TC5969 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['FLOOR'] = 'aaaaaa')



Expected Results 

========== 

1. http response code is 200





[[ TC5970 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['FLOOR'] = 1



Expected Results 

========== 

1. http response code is 200





[[ TC5971 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 unset requestData[0]['attributes']['FLOOR'] 



Expected Results 

========== 

1. http response code is 200





[[ TC5972 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['FLOOR'] =6



Expected Results 

========== 

1. http response code is 200





[[ TC5973 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node without atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['NAME'] ='beatles'



Expected Results 

========== 

1. http response code is 200





[[ TC5974 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['PRICE'] =500



Expected Results 

========== 

1. http response code is 200





[[ TC5975 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] =null



Expected Results 

========== 

1. http response code is 200





[[ TC5976 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['COLOR'] = null



Expected Results 

========== 

1. http response code is 200





[[ TC5977 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['FLOOR'] = null



Expected Results 

========== 

1. http response code is 200





[[ TC5978 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = 'ÖÐÎÄ...'(length=20)



Expected Results 

========== 

1. http response code is 200





[[ TC5979 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with atributes and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData[0]['attributes']['ROOM_TYPE'] = 'ÖÐÎÄ..'(length>20)



Expected Results 

========== 

1. http response code is 200





[[ TC5980 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 unset requestData['attributes'][0]



Expected Results 

========== 

1. http response code is 200





[[ TC5981 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData['attributes']['test']='aaddfdfdfdfdcccccccccccccccccccc'



Expected Results 

========== 

1. http response code is 200





[[ TC5982 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData['attributes'][0] =-1



Expected Results 

========== 

1. http response code is 200





[[ TC5983 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData['attributes'][0] =0



Expected Results 

========== 

1. http response code is 200





[[ TC5984 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData['attributes'][0] =null



Expected Results 

========== 

1. http response code is 200





[[ TC5985 ]]


========== 

URI Syntax:  

Batch Validate Data: (POST)/v1/egs/category/validate/batch_validate_attributes/?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   2. insert node with cluster and get cat_id

Testing Steps: 

========== 

1. batch validate date 

 set requestData['attributes'][0] ='!@#$'



Expected Results 

========== 

1. http response code is 200





[[ TC5986 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/insert



method:POST







Testing Steps:



==========



1. get default field data



2. insert tree



3. validate treeData



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5987 ]]




==========



A.



URI Syntax: /v1/egs/category/tree/update/?timeframe=



method:PUT







Testing Steps:



==========



1. get default field data



2. insert tree



3. update tree



4. validate treeData



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5988 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/activate/{tree_id}?timeframe=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. activate tree



4. validate treeData



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5989 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. activate tree



4. get tree with treeId， timeframe， activatedOnly=true



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5990 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. activate tree



4. get tree with treeId， timeframe， activatedOnly=false



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5991 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. activate tree



4. get tree with treeId， timeframe， activatedOnly is not include



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5992 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. get tree with treeId， timeframe， activatedOnly=true



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5993 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. get tree with treeId， timeframe， activatedOnly=false



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5994 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/get/{tree_id}?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. get default field data



2. insert tree



3. get tree with treeId， timeframe， activatedOnly is not include



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5995 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/copy_snapshot/?from=&to=



method:GET







Testing Steps:



==========



1. get default field data



2.insert tree with correct timeframe， name， ccode， property



3. copy snapshot with correct treeId， timeframe， newtimeframe



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5996 ]]




==========



A.



URI Syntax:  /v1/egs/category/tree/copy_snapshot/?from=&to=



method:GET







Testing Steps:



==========



1. get default field data



2.insert tree with correct timeframe， name， ccode， property



3. activate tree with treeId， timeframe



4. copy snapshot with correct treeId， timeframe， newtimeframe



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC5997 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1.insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. delete tree with treeId， timeframe







==========



1.1-3.1. http response code is 200



[[ TC5998 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1.insert tree with correct timeframe， name， ccode， property



2. activate tree with treeId， timeframe



3. insert node with correct treeId， timeframe， catId， parentCatId， name



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC5999 ]]




==========



A.



URI Syntax: /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. update node with correct treeId， timeframe， catId， updateData



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6000 ]]




==========



A.



URI Syntax: /v1/egs/category/node/update//?timeframe=



method:PUT







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. update node with correct treeId， timeframe， catId， updateData



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6001 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node with correct treeId， timeframe， catId， activatedOnly=true



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6002 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node with correct treeId， timeframe， catId， activatedOnly=false



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6003 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node with correct treeId， timeframe， catId， activatedOnly is not include



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6004 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node with correct treeId， timeframe， catId， activatedOnly=true



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6005 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node with correct treeId， timeframe， catId， activatedOnly=false



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6006 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_node//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node with correct treeId， timeframe， catId， activatedOnly is not include



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6007 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get Children node with correct treeId， timeframe， catId， activatedOnly=true



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6008 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get Children node with correct treeId， timeframe， catId， activatedOnly=false



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6009 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get Children node with correct treeId， timeframe， catId， activatedOnly is not include



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6010 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get Children node with correct treeId， timeframe， catId， activatedOnly=true



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6011 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get Children node with correct treeId， timeframe， catId， activatedOnly=false



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6012 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_children//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get Children node with correct treeId， timeframe， catId， activatedOnly is not include



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6013 ]]




==========



A.



URI Syntax: /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. delete node with correct treeId， timeframe， catId



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6014 ]]




==========



A.



URI Syntax: /v1/egs/category/node/delete//?timeframe=



method:DELETE







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. delete node with correct treeId， timeframe， catId



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6015 ]]




==========



A.



URI Syntax: /v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. insert alias  with correct treeId， timeframe， catId， parentCatId， name， aliasCatId



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6016 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/insert_alias/?timeframe=&next_sibling_cat_id=



method:POST







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. insert alias with correct treeId， timeframe， catId， parentCatId， name， aliasCatId



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6017 ]]




==========



A.



URI Syntax: /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. move node with correct treeId， timeframe， catId， parentCatId



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6018 ]]




==========



A.



URI Syntax:  /v1/egs/category/node/move//?parent_cat_id=&timeframe=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. move node with correct treeId， timeframe， catId， parentCatId



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6019 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node path  with correct treeId， timeframe， catId， activatedOnly=true



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6020 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node path  with correct treeId， timeframe， catId， activatedOnly=false



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6021 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. get node path  with correct treeId， timeframe， catId， activatedOnly is not include



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6022 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node path  with correct treeId， timeframe， catId， activatedOnly=true



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6023 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node path  with correct treeId， timeframe， catId， activatedOnly=false



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6024 ]]




==========



A.



URI Syntax: /v1/egs/category/node/get_path//?timeframe=&activated_only=



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. get node path  with correct treeId， timeframe， catId， activatedOnly is not include



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6025 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. validate attributes with correct treeId， timeframe， catId， data



4. delete tree with treeId， timeframe







==========



1.1-4.1. http response code is 200



[[ TC6026 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. insert node with correct treeId， timeframe， catId， parentCatId， name



3. activate tree with treeId， timeframe



4. validate attributes with correct treeId， timeframe， catId， data



5. delete tree with treeId， timeframe







==========



1.1-5.1. http response code is 200



[[ TC6027 ]]




==========



A.



URI Syntax:/v1/egs/category/tree/get_tree_list//



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. get tree list with correct ccode， property



3. delete tree with treeId， timeframe







==========



1.1-3.1. http response code is 200



[[ TC6028 ]]




==========



A.



URI Syntax:/v1/egs/category/tree/get_snapshot_list/



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2.get snapshot list with correct ccode， property



3. delete tree with treeId， timeframe







==========



1.1-3.1. http response code is 200



[[ TC6029 ]]




==========



A.



URI Syntax:/tree/get_ccode_list



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. get ccode list



3. delete tree with treeId， timeframe







==========



1.1-3.1. http response code is 200



[[ TC6030 ]]




==========



A.



URI Syntax:/tree/get_property_list



method:GET







Testing Steps:



==========



1. insert tree with correct timeframe， name， ccode， property



2. get property list with ccode



3. delete tree with treeId， timeframe







==========



1.1-3.1. http response code is 200



[[ TC6031 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data is missed



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6032 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and length > max length



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6033 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and length < min length



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6034 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data is missed



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6035 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data is a undefined string



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6036 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data is missed



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6037 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data is a undefined string



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6038 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and data are two values string



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6039 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and attribute name is undefined



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6040 ]]




==========



A.



URI Syntax:/v1/egs/category/validate/validate_attributes//?timeframe=



method:POST







Testing Steps:



==========



1. insert tree 



2. insert node



3. activate tree and message max for utf8



4. validate attributes data



5. delete tree with treeId ， timeframe





==========



1.1-5.1. http response code is 200



[[ TC6041 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_node/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;

 method:GET



  Testing Steps:

 ==========

 1. 2 prepare node 

 2.  2 insert node

 3. get id with cid

 4. get node data with get id

 5. delete tree with treeId ， timeframe



 ==========

 1.1-5.1. http response code is 200

[[ TC6042 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_node/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes 

 3. get id with cid

 4. get node data with get id

 5. delete tree with treeId ， timeframe



 ==========

 1.1-5.1. http response code is 200

[[ TC6043 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_node/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes 

 3. prepare node and insert node and unset attributes 

 4. get id with cid

 5. get node data with get id

 6. delete tree with treeId ， timeframe



 ==========

 1.1-6.1. http response code is 200

[[ TC6044 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_children/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node

 3. get id with parent id

 4. get node data with get id

 5. delete tree with treeId ， timeframe



 ==========

 1.1-5.1. http response code is 200

[[ TC6045 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_children/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes

 3. get id with parent id

 4. get node data with get id

 5. delete tree with treeId ， timeframe



 ==========

 1.1-5.1. http response code is 200

[[ TC6046 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_children/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes 

 3. prepare node and insert node and unset attributes 

 4. get id with children id

 5. get  children data with get id

 6. delete tree with treeId ， timeframe



 ==========

 1.1-6.1. http response code is 200

[[ TC6047 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_children/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node 

 3. get path with children id

 4. delete tree with treeId ， timeframe



 ==========

 1.1-4.1. http response code is 200

[[ TC6048 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_path/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes 

 3. get path with children id

 4. delete tree with treeId ， timeframe



 ==========

 1.1-4.1. http response code is 200

[[ TC6049 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/node/get_path/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

 method:GET



  Testing Steps:

 ==========

 1. prepare node and insert node 

 2. prepare node and insert node and unset attributes 

 3. prepare node and insert node and unset attributes 

 4. get path with children id

 5. delete tree with treeId ， timeframe



 ==========

 1.1-5.1. http response code is 200

[[ TC6050 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set tree_id is empty



 ==========

 1.1-2.1. http response code is 400

[[ TC6051 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set tree_id is null



 ==========

 1.1-2.1. http response code is 400

[[ TC6052 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set tree_id is not exist



 ==========

 1.1-2.1. http response code is 404

[[ TC6053 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is empty



 ==========

 1.1-2.1. http response code is 400

[[ TC6054 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is null



 ==========

 1.1-2.1. http response code is 400

[[ TC6055 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is character



 ==========

 1.1-2.1. http response code is 400

[[ TC6056 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is decimal



 ==========

 1.1-2.1. http response code is 400

[[ TC6057 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is negative



 ==========

 1.1-2.1. http response code is 400

[[ TC6058 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is zero



 ==========

 1.1-2.1. http response code is 400

[[ TC6059 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timeframe is max

 3. get tree

 4. delete tree



  ==========

 1.1-4.1. http response code is 400

[[ TC6060 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes

 2. import and set timefram is over max



 ==========

 1.1-2.1. http response code is 400

[[ TC6061 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. get all nodes and set timeframe = time() + 6000

 2. import

 3. delete tree



  ==========

 1.1-3.1. http response code is 200

[[ TC6062 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and insert nodes insert pricing

 2. get all nodes and set timeframe = time() + 1 

 3. import

 4. 2 delete tree



  ==========

 1.1-4.1. http response code is 200

[[ TC6063 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and insert nodes

 2. get all nodes and set timeframe = time() + 1 

 3. import and get children node v2

 4. 2  delete tree



  ==========

 1.1-4.1. http response code is 200

[[ TC6064 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/tree/activate/{tree_id}?timeframe=

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and insert nodes

 2. get all nodes and set timeframe = time() + 1 

 3. import and get children node v2

 4. delete tree



  ==========

 1.1-4.1. http response code is 200

[[ TC6069 ]]


==========&lt;br \/&gt;

A.&lt;br \/&gt;

URI Syntax: /v1/egs/category/node/get_node/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;&lt;br \/&gt;

method:GET&lt;br \/&gt;&lt;br \/&gt;



Testing Steps:&lt;br \/&gt;

==========&lt;br \/&gt;

1. prepare node and insert node&lt;br \/&gt;

2.&nbsp; prepare node and insert node and unset attributes &lt;br \/&gt;

3. get id&lt;br \/&gt;

4. get node data with get id&lt;br \/&gt;

5. delete tree&lt;br \/&gt;&lt;br \/&gt;



==========&lt;br \/&gt;

1.1-5.1. http response code is 200&lt;br \/&gt;

[[ TC6073 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node unset tree_id



Expected Results 

========== 

1. http response code is 400



[[ TC6074 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node unset timeframe



Expected Results 

========== 

1. http response code is 200



[[ TC6075 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node unset activated_only 



Expected Results 

========== 

1. http response code is 200



[[ TC6076 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node unset   keyword  



Expected Results 

========== 

1. http response code is 400



[[ TC6077 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id='y'



Expected Results 

========== 

1. http response code is 404    



[[ TC6078 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe='y'



Expected Results 

========== 

1. http response code is 400    



[[ TC6079 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only='y'



Expected Results 

========== 

1. http response code is 400    



[[ TC6080 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id=array(12，11)



Expected Results 

========== 

1. http response code is 404    



[[ TC6081 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe=array(12，11)



Expected Results 

========== 

1. http response code is 400    



[[ TC6082 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=array(12，22)



Expected Results 

========== 

1. http response code is 400    



[[ TC6083 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id=array('a'=>123)



Expected Results 

========== 

1. http response code is 404    



[[ TC6084 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe=array('a'=>12)



Expected Results 

========== 

1. http response code is 400    



[[ TC6085 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=array('a'=>12)



Expected Results 

========== 

1. http response code is 400    



[[ TC6086 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id='!@#'



Expected Results 

========== 

1. http response code is 404    



[[ TC6087 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe='!@#'



Expected Results 

========== 

1. http response code is 400    



[[ TC6088 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only='!@#'



Expected Results 

========== 

1. http response code is 400    



[[ TC6089 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set keywork='!@#'



Expected Results 

========== 

1. http response code is 200    



[[ TC6090 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id=''



Expected Results 

========== 

1. http response code is 400    



[[ TC6091 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe=''



Expected Results 

========== 

1. http response code is 400    



[[ TC6092 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=''



Expected Results 

========== 

1. http response code is 400    



[[ TC6093 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set keywork=''



Expected Results 

========== 

1. http response code is 400    



[[ TC6094 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe=null



Expected Results 

========== 

1. http response code is 400    



[[ TC6095 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=null



Expected Results 

========== 

1. http response code is 400    



[[ TC6096 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set keywork=null



Expected Results 

========== 

1. http response code is 400    



[[ TC6097 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe='string'



Expected Results 

========== 

1. http response code is 400    



[[ TC6098 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set tree_id='1234567890123'



Expected Results 

========== 

1. http response code is 400    



[[ TC6099 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set timeframe='19999999999'



Expected Results 

========== 

1. http response code is 400    



[[ TC6100 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only='999999999999'



Expected Results 

========== 

1. http response code is 400    



[[ TC6101 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set keywork='advvccc....'(length>64)



Expected Results 

========== 

1. http response code is 400    



[[ TC6102 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=0



Expected Results 

========== 

1. http response code is 200    



[[ TC6103 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=0



Expected Results 

========== 

1. http response code is 200    



[[ TC6104 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. search node set activated_only=3



Expected Results 

========== 

1. http response code is 400    



[[ TC6105 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert parent node catId1 set name='Æ½µ×Ð¬'

2. delete tree 

3. search node set keyword='Æ½µ×'

Expected Results 

========== 

1.1~2.1 http response code is 200

3.1 http response code is 404    



[[ TC6106 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert parent node catId1 set name='Æ½µ×Ð¬'

2. update node name set updateData['name']='AíÐ¬'

3. search node set keyword='Æ½µ×'

Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify responseData is empty array

    







[[ TC6107 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert parent node catId1 set name='°üÐ¬'

2. insert children node of catId1， id= catId2 set name='Aî^Ð¬'

3. insert children node of catId2， id= catId3 set name='Æ½µ×Ð¬'

4. insert parent node catId4 set name='Ñ¥×Ó'

5. insert children node of catId4， id= catId5 set name='Æ½µ×Ð¬'

6. activate tree

7. search node set keyword='Æ½µ×'

Expected Results 

========== 

1.1~7.1 http response code is 200

7.2 verify responseData have 2 group and sort is OK 

    







[[ TC6108 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert parent node catId1 set name='Æ½µ×Ð¬'

2. delete tree 

3. search node set keyword='Æ½µ×'

Expected Results 

========== 

1.1~2.1 http response code is 200

3.1 http response code is 404    



[[ TC6109 ]]


========== 

URI Syntax:  

search node: (GET)/v1/egs/category/node/search_node/?timeframe=&activated_only=&keyword=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. update tree name 

2. search node set keyword='test'

Expected Results 

========== 

1.1 http response code is 200

2.1 http response code is 404

    







[[ TC6110 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree unset all request data



Expected Results 

========== 

1. http response code is 400



[[ TC6111 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree unset requestData.name

2. insert user tree unset requestData.ccode

3. insert user tree unset requestData.property



Expected Results 

========== 

1~3. http response code is 400



[[ TC6112 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name='y'

                set requestData.property='y'



Expected Results 

========== 

1.1 http response code is 200



[[ TC6113 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name='abdcd...'(length=64)

                

Expected Results 

========== 

1.1 http response code is 200



[[ TC6114 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name='abdcd...'(length=65)

                

Expected Results 

========== 

1.1 http response code is 400



[[ TC6115 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.ccode='tw'(length=2)

                

Expected Results 

========== 

1.1 http response code is 200



[[ TC6116 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.ccode='tww'(length=4)

                

Expected Results 

========== 

1.1 http response code is 400



[[ TC6117 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.property='acvf...'(length=20)

                

Expected Results 

========== 

1.1 http response code is 200



[[ TC6118 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.property='tcvf...'(length=21)

                

Expected Results 

========== 

1.1 http response code is 400



[[ TC6119 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name=''

2. insert user tree set requestData.ccode=''

3. insert user tree set requestData.property=''

                

Expected Results 

========== 

1~3  http response code is 400



[[ TC6120 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name=1234

2. insert user tree set requestData.ccode=1234

3. insert user tree set requestData.property=1234

                

Expected Results 

========== 

1~3  http response code is 400



[[ TC6121 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name=array(1234)

2. insert user tree set requestData.ccode=array('tw')

3. insert user tree set requestData.property=array('1234')

                

Expected Results 

========== 

1~3  http response code is 400



[[ TC6122 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name=array('a'=>1234)

2. insert user tree set requestData.ccode=array('a'=>'tw')

3. insert user tree set requestData.property=array('a'=>'1234')

                

Expected Results 

========== 

1~3  http response code is 400



[[ TC6123 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name=null

2. insert user tree set requestData.ccode=null

3. insert user tree set requestData.property=null

                

Expected Results 

========== 

1~3  http response code is 400



[[ TC6124 ]]


========== 

URI Syntax:  

create user tree: (POST)/v1/egs/category/user_tree/insert



Testing Steps: 

========== 

1. insert user tree set requestData.name='!@#'

                set requestData.property='!@#'



Expected Results 

========== 

1.1 http response code is 200



[[ TC6125 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree without tree_id

                

Expected Results 

========== 

1.  http response code is 400



[[ TC6126 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='y'

                

Expected Results 

========== 

1.  http response code is 400



[[ TC6127 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='1234678901234567890'

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6128 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='1234678901234567890123'

                

Expected Results 

========== 

1.  http response code is 400



[[ TC6129 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='test'

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6130 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id=array('test')

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6131 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id=array('test'=>1234)

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6132 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id=null

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6133 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='!@#'

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6134 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree with tree_id

2. delete again

                

Expected Results 

========== 

1.  http response code is 200

2.  http response code is 404

[[ TC6135 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree get tree_id

Testing Steps: 

========== 

1. delete user tree set tree_id='999999999999'

                

Expected Results 

========== 

1.  http response code is 404



[[ TC6136 ]]


========== 

URI Syntax:  

delete user tree: (DELETE)/v1/egs/category/user_tree/delete/



Pre-Data: 

   1. insert user tree with user node get tree_id

Testing Steps: 

========== 

1. delete user tree with tree_id

                

Expected Results 

========== 

1.  http response code is 200



[[ TC6137 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is not include







==========



1. http response code is 400



[[ TC6138 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is not include



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6139 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is not include



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6140 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is double byte







==========



1. http response code is 404



[[ TC6141 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is double type



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6142 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is double type



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6143 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id length is 20







==========



1. http response code is 404



[[ TC6144 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id length is 21







==========



1. http response code is 400



[[ TC6145 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is empty



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6146 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is empty



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6147 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is 'test'







==========



1. http response code is 404



[[ TC6148 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is 'test'



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6149 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is 'test'



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6150 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is array







==========



1. http response code is 404



[[ TC6151 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is array



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6152 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is array



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6153 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is list







==========



1. http response code is 404



[[ TC6154 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is list



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6155 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is list



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6156 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is zero



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6157 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is zero



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6158 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is null







==========



1. http response code is 404



[[ TC6159 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is null



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6160 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is null



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6161 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. get all nodea of user tree set tree_id is special character







==========



1. http response code is 404



[[ TC6162 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is special character



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6163 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is special character



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6164 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set show_detail is 2



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6165 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get_all_nodes/?show_detail=&inherit=



method:GET







Testing Steps:



==========



1. prepare tree



2. get all nodes of user tree set inherit is 2



3. validate nodes and check resp data



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6166 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree without tree_id 







==========



1. http response code is 400



[[ TC6167 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is double byte 







==========



1. http response code is 404



[[ TC6168 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id length is 20 character 







==========



1. http response code is 404



[[ TC6169 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id length is 21 character 







==========



1. http response code is 400



[[ TC6170 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is 'test' 







==========



1. http response code is 404



[[ TC6171 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is array 







==========



1. http response code is 404



[[ TC6172 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is list 







==========



1. http response code is 404



[[ TC6173 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is null 







==========



1. http response code is 404



[[ TC6174 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is special character 







==========



1. http response code is 400



[[ TC6175 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/get/



method:GET







Testing Steps:



==========



1. get user tree set tree_id is not exist 







==========



1. http response code is 404



[[ TC6176 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is not include







==========



1. http response code is 400



[[ TC6177 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is not include



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6178 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is double byte character







==========



1. http response code is 404



[[ TC6179 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is double byte character



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6180 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is length is 20 character







==========



1. http response code is 404



[[ TC6181 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is length is 21 character







==========



1. http response code is 400



[[ TC6182 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is length is 64



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6183 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is length is 65



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6184 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is empty



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6185 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id  is 'test'







==========



1. http response code is 404



[[ TC6186 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is integer



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6187 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is array







==========



1. http response code is 404



[[ TC6188 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is array



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6189 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is list







==========



1. http response code is 404



[[ TC6190 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is list



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6191 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is null







==========



1. http response code is 404



[[ TC6192 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is null



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6193 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. update user tree set tree_id is special character







==========



1. http response code is 404



[[ TC6194 ]]




==========



A.



URI Syntax:/v1/egs/category/user_tree/update/



method:PUT







Testing Steps:



==========



1. prepare tree



2. update user tree set name is special character



3. get user tree and verify



4. delete tree_id







==========



1.1-4.1. http response code is 200



[[ TC6195 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. category request set tree_id and cat_id is not include







==========



1. http response code is 404



[[ TC6196 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. category request set tree_id is not include



3. delete tree_id





==========



1.1-3.1. http response code is 400



[[ TC6197 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id 



2. category request set cat_id is not include



3. delete tree_id





==========



1.1-3.1. http response code is 400



[[ TC6198 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. get children user node set tree_id is double byte character



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6199 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id 



2. get children user node set cat_id is double byte character



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6200 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. get children user node set cat_id is 0



3. delete tree_id





==========



1.1-3.1. http response code is 200



[[ TC6201 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. get children user node set cat_id is null



3. delete tree_id





==========



1.1-3.1. http response code is 400



[[ TC6202 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id



2. get children user node set cat_id is null



3. delete tree_id





==========



1.1-3.1. http response code is 400



[[ TC6203 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. get children user node set tree_id is special characters



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6204 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id



2. get children user node set cat_id is special characters



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6205 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and create cat_id



2. get children user node set tree_id is not exist



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6206 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id



2. get children user node set cat_id is not exist



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6207 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_children//



method:GET







Testing Steps:



==========



1. insert tree_id and  create cat_id



2. get children user node of leaf node 



3. delete tree_id





==========



1.1-3.1. http response code is 404



[[ TC6208 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. category request set tree_id without





==========



1. http response code is 400



[[ TC6209 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and set alias_cat_id without



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6210 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and set name without



3. delete tree_id







==========



1.1-3.1 http response code is 400



[[ TC6211 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and set alias data



2. insert alias user node and set parent_cat_id without



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6212 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   category request and set tree_id is double character



3. set alias data



   insert alias user data and set name is double character



4. set alias data



   insert alias user data and set alias_cat_id is double character



5. set alias data



   insert alias user data and set parent_cat_id is double character



6. delete tree_id







==========



1.1-6.1. http response code is 404



[[ TC6213 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



  insert alias user data  and set tree_id is empty



3. set alias data



   insert alias user data and set name is  empty



4. set alias data



   insert alias user data and set alias_cat_id is  empty



5. set alias data



   insert alias user data and set parent_cat_id is  empty



6. delete tree_id







==========



1.1-6.1. http response code is 400



[[ TC6214 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   insert alias data and set tree_id is array



3. set alias data



   insert alias user data and set name is array



4. set alias data



   insert alias user data and set alias_cat_id is array



5. set alias data



   insert alias user data and set parent_cat_id is array



6. delete tree_id







==========



1.1. http response code is 404



2.1-6.1. http response code is 400



[[ TC6215 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   insert alias data and set tree_id is list



3. set alias data



   insert alias user data and set name is list



4. set alias data



   insert alias user data and set alias_cat_id is list



5. set alias data



   insert alias user data and set parent_cat_id is list



6. delete tree_id







==========



1.1. http response code is 404



2.1-6.1. http response code is 400



[[ TC6216 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and tree_id is out of scope



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6217 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and alias_cat_id is out of scope



3. delete tree_id







==========



1.1-3.1  http response code is 400



[[ TC6218 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and name is out of scope



3. delete tree_id







==========



1.1-3.1.  http response code is 400



[[ TC6219 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id and set alias data



2. insert alias user node and parent_cat_id is out of scope



3. delete tree_id







==========



1.1-3.1  http response code is 400



[[ TC6220 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   category request and set tree_id is special character



3. set alias data



   insert alias user data and set name is special character



4. set alias data



   insert alias user data and set alias_cat_id is special character



5. set alias data



   insert alias user data and set parent_cat_id is special character



6. delete tree_id







==========



1.1-6.1. http response code is 404



[[ TC6221 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   insert alias data and set tree_id is -1



3. set alias data



   insert alias user data and set name is -1



4. set alias data



   insert alias user data and set alias_cat_id is -1



5. set alias data



   insert alias user data and set parent_cat_id is -1



6. delete tree_id







==========



1.1. http response code is 404



2.1-6.1. http response code is 400



[[ TC6222 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   insert alias data and set tree_id is 0



3. set alias data



   insert alias user data and set name is 0



4. set alias data



   insert alias user data and set alias_cat_id is 0



5. set alias data



   insert alias user data and set parent_cat_id is 0



6. delete tree_id







==========



1.1. http response code is 404



2.1-6.1. http response code is 400



[[ TC6223 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id and create cat_id



2. set alias data



   insert alias data and set tree_id is null



3. set alias data



   insert alias user data and set name is null



4. set alias data



   insert alias user data and set alias_cat_id is null



5. set alias data



   insert alias user data and set parent_cat_id is null



6. delete tree_id







==========



1.1-6.1. http response code is 400



[[ TC6224 ]]




==========



A.



URI Syntax:  /v1/egs/category/user_node/insert_alias/



method:POST







Testing Steps:



==========



1. insert tree_id  and set alias data



2. insert alias user node and alias_cat_id is root



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6225 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/user_node/get_path//

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and set node data and create cat_id

 2. category request and without tree_id

 3. category request and without cat_id

 4. delete tree_id



  ==========

 1.1-4.1. http response code is 400

[[ TC6226 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is double byte character



3. get path user node  and set cat_id is double byte character



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6227 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is empty



3. get path user node  and set cat_id is double byte empty



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6228 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is special character



3. get path user node  and set cat_id is special character



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6229 ]]


 ==========

 A.

 URI Syntax:/v1/egs/category/user_node/get_path//

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and set node data and create cat_id

 2. get path user node and set  tree_id is array

 3. get path user node  and set cat_id is array

 4. delete tree_id



  ==========

 1.1-4.1. http response code is 404

[[ TC6230 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is list



3. get path user node  and set cat_id is list



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6231 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is -1



3. get path user node  and set cat_id is -1



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6232 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is 0



3. get path user node  and set cat_id is 0



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6233 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is null



3. get path user node  and set cat_id is null



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6234 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set  tree_id is out of scope



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6235 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get path user node and set cat_id is out of scope



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6236 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/get_path//



method:GET







Testing Steps:



==========



1. insert 2 tree_id and set node data and create cat_id



2. get path user node and set tree_id and cat_id are not corresponding



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6237 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/user_node/get_node//

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and set node data and create cat_id

 2. category request and without tree_id

 3. category request and without cat_id

 4. delete tree_id



  ==========

 1.1-4.1. http response code is 400

[[ TC6238 ]]


 ==========

 A.

 URI Syntax: /v1/egs/category/user_node/get_node//

 method:GET



  Testing Steps:

 ==========

 1. insert tree_id and set node data and create cat_id

 2. get  user node and set  tree_id is double byte character

 3. get user node  and set cat_id is double byte character

 4. delete tree_id



  ==========

 1.1-4.1. http response code is 404

[[ TC6239 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is empty



3. get user node  and set cat_id is empty



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6240 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is special character



3. get user node  and set cat_id isspecial character



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6241 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is array



3. get user node  and set cat_id is array



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6242 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is list



3. get user node  and set cat_id is list



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6243 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is -1



3. get user node  and set cat_id is -1



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6244 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is 0



3. get user node  and set cat_id is 0



4. delete tree_id







==========



1.1-4.1. http response code is 404



[[ TC6245 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get  user node and set  tree_id is null



3. get user node  and set cat_id is null



4. delete tree_id







==========



1.1-4.1. http response code is 400



[[ TC6246 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get user node and set  tree_id is out of scope



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6247 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. get user node and set  cat_id is out of scope



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6248 ]]




==========



A.



URI Syntax: /v1/egs/category/user_node/get_node//



method:GET







Testing Steps:



==========



1. insert 2 tree_id and set node data and create cat_id



2. get user node and set tree_id and cat_id are not corresponding



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6249 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data 



2. create parent_cat_id and create cat_id



3. get user node



4. delete user node with cat_id and get user node



5. delete tree_id







==========



1.1-5.1. http response code is 200



5.2. verify get user node is 404



[[ TC6250 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data 



2. create parent_cat_id and parent_cat_id2



3. set alias data and create cat_id



4. get user node



5. delete user node with cat_id and get user node



6. delete tree_id







==========



1.1-6.1. http response code is 200



6.2. verify get user node is 404



[[ TC6251 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data 



2. create parent_cat_id and parent_cat_id2



3. set alias data and create cat_id



4. get user node



5. delete user node with parent_cat_id2 and get user node



6. delete tree_id







==========



1.1-6.1. http response code is 200



[[ TC6252 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. category request and set tree_id is not include



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6253 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. category request and set cat_id is not include



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6254 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set tree_id is double byte character



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6255 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set cat_id is double byte character



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6256 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set cat_id is 0



3. delete tree_id







==========



1.1-3.1. http response code is 200



[[ TC6257 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set tree_id is null



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6258 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set cat_id is null



3. delete tree_id







==========



1.1-3.1. http response code is 400



[[ TC6259 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set tree_id is special characters



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6260 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set cat_id is special characters



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6261 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2. 2 delete user node



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6262 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and settree id is not exist



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6263 ]]




==========



A.



URI Syntax:/v1/egs/category/user_node/delete//



method:DELETE







Testing Steps:



==========



1. insert tree_id and set node data and create cat_id



2.delete user node and set cat_id is not exist



3. delete tree_id







==========



1.1-3.1. http response code is 404



[[ TC6264 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node without tree_id



Expected Results 

========== 

1. http response code is 404



[[ TC6265 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node without cat_id



Expected Results 

========== 

1. http response code is 404



[[ TC6266 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node without parent_cat_id



Expected Results 

========== 

1. http response code is 400



[[ TC6267 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id='?y'

2. move node set cat_id='?y'

3. move node set parent_cat_id='?y'



Expected Results 

========== 

1~3. http response code is 404



[[ TC6268 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=''

2. move node set cat_id=''

3. move node set parent_cat_id=''



Expected Results 

========== 

1~3. http response code is 400



[[ TC6269 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=array(12)

2. move node set cat_id=array(12)

3. move node set parent_cat_id=array(12)



Expected Results 

========== 

1~3. http response code is 404



[[ TC6270 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=array(12=>'a')

2. move node set cat_id=array(12=>'a')

3. move node set parent_cat_id=array(12=>'a')



Expected Results 

========== 

1~3. http response code is 404



[[ TC6271 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id='abcdefghjkabcdefghjk1'



Expected Results 

========== 

1. http response code is 400



[[ TC6272 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set cat_id='abcdefghjkabcdefghjk1'



Expected Results 

========== 

1. http response code is 400



[[ TC6273 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set parent_cat_id='abcdefghjkabcdefghjk1'



Expected Results 

========== 

1. http response code is 400



[[ TC6274 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id='!@#'

2. move node set cat_id='!@#'

3. move node set parent_cat_id='!@#'



Expected Results 

========== 

1~3. http response code is 404



[[ TC6275 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=-1

2. move node set cat_id=-1

3. move node set parent_cat_id=-1



Expected Results 

========== 

1~3. http response code is 404



[[ TC6276 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=0

2. move node set cat_id=0

3. move node set parent_cat_id=0



Expected Results 

========== 

1. http response code is 404

2~3. http response code is 200

[[ TC6277 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. move node set tree_id=null

2. move node set cat_id=null

3. move node set parent_cat_id=null



Expected Results 

========== 

1~3. http response code is 400



[[ TC6278 ]]


========== 

URI Syntax:  

move user node: (GET)/v1/egs/category/user_node/move//?parent_cat_id=



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. insert alias node get node1

2. move node set cat_id=node1





Expected Results 

========== 

1. http response code is 200

2. http response code is 400

[[ TC6279 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node without tree_id

2. update user node without cat_id

3. update user node without requstData.name

4. update user node without requstData.attributes

5. update user node without requstData.cust_data

6. update user node without requstData.space_id



Expected Results 

========== 

1~2. http response code is 400

3~6. http response code is 200

[[ TC6280 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id='?y'

2. update user node set cat_id='?y'

3. update user node set requstData.name='?y'

4. update user node set requstData.attributes='?y'

5. update user node set requstData.cust_data='?y'

6. update user node set requstData.space_id='?y'



Expected Results 

========== 

1~2. http response code is 404

4~6. http response code is 400

3. http response code is 200

[[ TC6281 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=''

2. update user node set cat_id=''

3. update user node set requstData.name=''

4. update user node set requstData.attributes=''

5. update user node set requstData.cust_data=''

6. update user node set requstData.space_id=''



Expected Results 

========== 

1~2. http response code is 400

3~6. http response code is 200



[[ TC6282 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id='!@#$'

2. update user node set cat_id='!@#$'

3. update user node set requstData.name='!@#$'

4. update user node set requstData.attributes='!@#$'

5. update user node set requstData.cust_data='!@#$'

6. update user node set requstData.space_id='!@#$'



Expected Results 

========== 

1/2. http response code is 404

3/6. http response code is 200

4/5. http response code is 400

[[ TC6283 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=array(12)

2. update user node set cat_id=array(12)

3. update user node set requstData.name=array(12)

4. update user node set requstData.attributes=array(12)

5. update user node set requstData.cust_data=array(12)

6. update user node set requstData.space_id=array(12)



Expected Results 

========== 

1/2. http response code is 404

3~6. http response code is 400



[[ TC6284 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=array(12=>'a')

2. update user node set cat_id=array(12=>'a')

3. update user node set requstData.name=array(12=>'a')

4. update user node set requstData.attributes=array(12=>'a')

5. update user node set requstData.cust_data=array(12=>'a')

6. update user node set requstData.space_id=array(12=>'a')



Expected Results 

========== 

1/2. http response code is 404

3~6. http response code is 400



[[ TC6285 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=-1

2. update user node set cat_id=-1

3. update user node set requstData.name=-1

4. update user node set requstData.attributes=-1

5. update user node set requstData.cust_data=-1

6. update user node set requstData.space_id=-1



Expected Results 

========== 

1/2. http response code is 404

3~6. http response code is 400



[[ TC6286 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=0

2. update user node set cat_id=0

3. update user node set requstData.name=0

4. update user node set requstData.attributes=0

5. update user node set requstData.cust_data=0

6. update user node set requstData.space_id=0



Expected Results 

========== 

1/2. http response code is 404

4~5. http response code is 400

3/6. http response code is 200

[[ TC6287 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id=null

2. update user node set cat_id=null

3. update user node set requstData.name=null

4. update user node set requstData.attributes=null

5. update user node set requstData.cust_data=null

6. update user node set requstData.space_id=null



Expected Results 

========== 

1~6. http response code is 400



[[ TC6288 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set tree_id='abcdefghjkabcdefghjk1'





Expected Results 

========== 

1. http response code is 400



[[ TC6289 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set cat_id='abcdefghjkabcdefghjk1'





Expected Results 

========== 

1. http response code is 400



[[ TC6290 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Testing Steps: 

========== 

1. insert tree get treeId1

2. insert tree get treeId2

3. insert node at treeId1 get catId1

4. update user node set tree_id=treeId2， cat_id=catId1



Expected Results 

========== 

1~3. http response code is 200

4. http response code is 404

[[ TC6291 ]]


========== 

URI Syntax:  

update user node: (PUT)/v1/egs/category/user_node/update//



Pre-Data:

 1. insert tree get tree_id

 2. prepare node

Testing Steps: 

========== 

1. update user node set requstData.name='abcde...'(length=65)

2. update user node set requstData.space_id='abcde...'(length=21)



Expected Results 

========== 

1/2. http response code is 400



[[ TC6292 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name='!@#$'

2. insert user node set requstData.attributes='!@#$'

3. insert user node set requstData.cust_data='!@#$'

4. insert user node set requstData.space_id='!@#$'



Expected Results 

========== 

1/4. http response code is 200

2/3. http response code is 400

[[ TC6293 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name=array(12)

2. insert user node set requstData.attributes=array(12)

3. insert user node set requstData.cust_data=array(12)

4. insert user node set requstData.space_id=array(12)



Expected Results 

========== 

3. http response code is 200

1/2/4. http response code is 400

[[ TC6294 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name=array(12=>'a')

2. insert user node set requstData.attributes=array(12=>'a')

3. insert user node set requstData.cust_data=array(12=>'a')

4. insert user node set requstData.space_id=array(12=>'a')



Expected Results 

========== 

3. http response code is 200

1/2/4. http response code is 400

[[ TC6295 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name='?y'

2. insert user node set requstData.attributes='?y'

3. insert user node set requstData.cust_data='?y'

4. insert user node set requstData.space_id='?y'



Expected Results 

========== 

1/4. http response code is 200

2/3. http response code is 400

[[ TC6296 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name='abcde...'(length=65)

4. insert user node set requstData.space_id='abcde...'(length=21)



Expected Results 

========== 

1~2. http response code is 400



[[ TC6297 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name=''

2. insert user node set requstData.attributes=''

3. insert user node set requstData.cust_data=''

4. insert user node set requstData.space_id=''



Expected Results 

========== 

1. http response code is 400

2~4. http response code is 200

[[ TC6298 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name=null

2. insert user node set requstData.attributes=null

3. insert user node set requstData.cust_data=null

4. insert user node set requstData.space_id=null



Expected Results 

========== 

1. http response code is 400

2~4. http response code is 200

[[ TC6299 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node without tree_id

2. order node without cat_id

3. order node without next_sibling_cat_id

4. order node without timeframe

Expected Results 

========== 

1. http response code is 404

2~4. http response code is 404

    







[[ TC6300 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id='?y'

2. order node set cat_id='?y'

3. order node set next_sibling_cat_id='?y'

4. order node set timeframe='?y'

Expected Results 

========== 

1~3. http response code is 404

4. http response code is 400



[[ TC6301 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id='1234567890123'

2. order node set cat_id='1234567890123'

3. order node set next_sibling_cat_id='1234567890123'

4. order node set timeframe='2147483646'

Expected Results 

========== 

1/4. http response code is 404

2~3. http response code is 400



[[ TC6302 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id=''

2. order node set cat_id=''

3. order node set next_sibling_cat_id=''

4. order node set timeframe=''

Expected Results 

========== 

1~4. http response code is 400



[[ TC6303 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id=-1

2. order node set cat_id=-1

3. order node set next_sibling_cat_id=-1

4. order node set timeframe=-1

Expected Results 

========== 

1~3. http response code is 404

4. http response code is 400

[[ TC6304 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id=0

2. order node set cat_id=0

3. order node set next_sibling_cat_id=0

4. order node set timeframe=0

Expected Results 

========== 

1. http response code is 404

2~4. http response code is 400

[[ TC6305 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id='!@#'

2. order node set cat_id='!@#'

3. order node set next_sibling_cat_id='!@#'

4. order node set timeframe='!@#'

Expected Results 

========== 

1~3. http response code is 404

4. http response code is 400

[[ TC6306 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

 2. prepare children node catId1，catId2

Testing Steps: 

========== 

1. order node set tree_id='1234567890ab'

2. order node set cat_id='1234567890ab'

3. order node set next_sibling_cat_id='1234567890ab'

4. order node set timeframe=time()-1024

Expected Results 

========== 

1~4. http response code is 404



[[ TC6307 ]]


========== 

URI Syntax:  

order node: (GET)/v1/egs/category/node/order//?next_sibling_cat_id=&timeframe=



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert parent node rootCat

2. insert children node of rootCat ，get catId1

3. insert parent node catId2

4. order node set cat_id=catId1 set next_sibling_cat_id=catId2



Expected Results 

========== 

1~3. http response code is 200

4. http response code is 400

[[ TC6323 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node set requstData.name='test name'

                    set requstData.attributes=''

                    set requstData.cust_data=''

                    set requstData.space_id=''



Expected Results 

========== 

1. http response code is 200





[[ TC6324 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node and get id catId1

2. insert user node set parent_cat_id = catId1



Expected Results 

========== 

1~2. http response code is 200





[[ TC6325 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node without set tree_id





Expected Results 

========== 

1. http response code is 400





[[ TC6326 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node without set name 

2. insert user node without set parent_cat_id





Expected Results 

========== 

1~2. http response code is 400





[[ TC6327 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id='y'





Expected Results 

========== 

1. http response code is 404





[[ TC6328 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name ='y'

2. insert user node  set parent_cat_id='y'





Expected Results 

========== 

1. http response code is 200

2. http response code is 404



[[ TC6329 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id='sdfdfsdf..'(length=20)





Expected Results 

========== 

1. http response code is 404





[[ TC6330 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id='sdfdfsdf..'(length=21)





Expected Results 

========== 

1. http response code is 400





[[ TC6331 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set parent_cat_id='sdfdfsdf..'(length=12)





Expected Results 

========== 

1. http response code is 404





[[ TC6332 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set parent_cat_id='sdfdfsdf..'(length=13)





Expected Results 

========== 

1. http response code is 400





[[ TC6333 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name='sdfdfsdf..'(length=64)





Expected Results 

========== 

1. http response code is 200





[[ TC6334 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name='sdfdfsdf..'(length=65)





Expected Results 

========== 

1. http response code is 400





[[ TC6335 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name =''

2. insert user node  set parent_cat_id=''



Expected Results 

========== 

1~2. http response code is 400



[[ TC6336 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id='test'





Expected Results 

========== 

1. http response code is 404





[[ TC6337 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set parent_cat_id='test'





Expected Results 

========== 

1. http response code is 400





[[ TC6338 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id=array(12)





Expected Results 

========== 

1. http response code is 404





[[ TC6339 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name =array(12)

2. insert user node  set parent_cat_id=array(12)



Expected Results 

========== 

1~2. http response code is 400



[[ TC6340 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id=array(12=>'a')





Expected Results 

========== 

1. http response code is 404





[[ TC6341 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name =array(12=>'a')

2. insert user node  set parent_cat_id=array(12=>'a')



Expected Results 

========== 

1~2. http response code is 400



[[ TC6342 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name =123

2. insert user node  set parent_cat_id=123



Expected Results 

========== 

1~2. http response code is 400



[[ TC6343 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id=null





Expected Results 

========== 

1. http response code is 404





[[ TC6344 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name =null

2. insert user node  set parent_cat_id=null



Expected Results 

========== 

1~2. http response code is 400



[[ TC6345 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set tree_id='!@#$'





Expected Results 

========== 

1. http response code is 404





[[ TC6346 ]]


========== 

URI Syntax:  

create user node: (POST)/v1/egs/category/user_node/insert/



Pre-Data:

 1. insert tree get tree_id

Testing Steps: 

========== 

1. insert user node  set name ='!@#$'

2. insert user node  set parent_cat_id='!@#'



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6347 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['cust_data'] = 111



Expected Results 

========== 

1. http response code is 400













[[ TC6348 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['cust_data'] = array('a'=>'1'，'b'=>'2')



Expected Results 

========== 

1. http response code is 200













[[ TC6349 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['cust_data'] = array('1'，'2'，'3'，'4')



Expected Results 

========== 

1. http response code is 200













[[ TC6350 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes'] = array('attributes name'=>array(....))(length=12000)



Expected Results 

========== 

1. http response code is 200













[[ TC6351 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['attributes'] = array('attributes name'=>array(....))(length=12001)



Expected Results 

========== 

1. http response code is 400













[[ TC6352 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['cust_data'] = array('abdc'=>'aaa...')(length=4000)





Expected Results 

========== 

1. http response code is 200













[[ TC6353 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category/node/insert/?timeframe=&next_sibling_cat_id=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

==========

1. insert node with all parameters 

     set nodeData['cust_data'] = array('abdc'=>'aaa...')(length=4001)





Expected Results 

========== 

1. http response code is 400













[[ TC6354 ]]


========== 

URI Syntax:  

Delete Tree: (DELETE)/v1/egs/category/tree/delete/{tree_id}?timeframe=



Pre-Date:

   1. insert tree and get tree_id

   

Testing Steps: 

========== 

1. delete tree set tree_id =' '



Expected Results 

========== 

1.1 http response code is 400

[[ TC6355 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



method:GET







Testing Steps:



==========



1. prepare test data



2. prepare batch pricing



3. do  verify



4. clean test data by cat_id







==========



1.1-4.1. http response code is 200



[[ TC6356 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. insert node and insert pricing



2. delete node



3.get pricing









==========



1.1-3.1. http response code is 404



[[ TC6357 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. copy snapshot  and insert pricing



2. delete tree



3.get pricing









==========



1.1-3.1. http response code is 404



[[ TC6358 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/insert



method:POST







Testing Steps:



==========



1. insert node and insert alias and insert pricing



2. delete node









==========



1.1-2.1. http response code is 400



[[ TC6359 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. get field data and insert pricing and copy snapshot



2. delete node



3.get pricing



4. delete pricing









==========



1.1-4.1. http response code is 200



[[ TC6360 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. insert node



2. delete node



3.get pricing









==========



1.1-3.1. http response code is 404



[[ TC6361 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. get field data and delete pricing and copy snapshot



2.delete tree  



3.get pricing









==========



1.1-3.1. http response code is 404



[[ TC6362 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. get ready



2. delete pricing data



3.get pricing data







==========



1.1-3.1. http response code is 200



[[ TC6363 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=



method:GET







Testing Steps:



==========



1. insert pricing data



2. get pricing data



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6364 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/insert

     

method:POST



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. get pricing and set test data and verify get pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6365 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/insert

     

method:POST



URI Syntax: /v1/egs/category_pricing/get_all/?timeframe=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. get all pricing and verify get all pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6366 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/insert

     

method:POST



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. query pricing and set test data and verify get pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6367 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/insert

     

method:POST



URI Syntax: /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. batch query pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6368 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/update/

     

method:PUT



URI Syntax: /v1/egs/category_pricing/get//&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. update pricing and get pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6369 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/update/

     

method:PUT



URI Syntax: /v1/egs/category_pricing/get_all/?timeframe=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. update pricing and get all pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6370 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/update/

     

method:PUT



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. update pricing and query pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6371 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/update/

     

method:POST



URI Syntax: /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. upddate pricing and batch query pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6372 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET



URI Syntax:  /v1/egs/category_pricing/get//&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. delete pricing and get pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 404



[[ TC6373 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET



URI Syntax:  /v1/egs/category_pricing/get_all/?timeframe=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. delete pricing and get all pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 404



[[ TC6374 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET



URI Syntax: /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. delete pricing and query  pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 404



[[ TC6375 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET



URI Syntax:  /v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. delete pricing and batch query  pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 404



[[ TC6376 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/import/?timeframe=

     

method:POST



URI Syntax: //v1/egs/category_pricing/get//&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. import pricing and get  pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6377 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/import/?timeframe=

     

method:POST



URI Syntax: /v1/egs/category_pricing/get_all/?timeframe=

     

method:GET







Testing Steps:



==========



1. clean inherit and set test data and insert pricing



2. import pricing and get all  pricing



3. clean test data by cat_id







==========



1.1-3.1. http response code is 200



[[ TC6378 ]]




==========



A.



URI Syntax: /v1/egs/category_pricing/insert



method:POST







Testing Steps:



==========



1. insert pricing



2. get pricing



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6379 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=



method:GET







Testing Steps:



==========



1. prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6380 ]]




==========



A.



URI Syntax:  /v1/egs/category_pricing/update/



method:PUT







Testing Steps:



==========



1. insert pricing



2. update pricing



3.  get pricing



4. delete pricing





==========



1.1-4.1. http response code is 200



[[ TC6381 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/insert

     

method:POST







Testing Steps:



==========



1. delete pricing and insert pricing



2. get pricing



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6382 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. delete pricing and insert pricing



2. update pricing and get pricing



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6383 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. delete pricing and insert pricing



2.query pricing



3. delete pricing







==========



1.1-3.1. http response code is 200



[[ TC6389 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set tree_id is null







==========



1. http response code is 400



[[ TC6390 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set tree_id is empty







==========



1. http response code is 400



[[ TC6391 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set tree_id is not exist







==========



1. http response code is 404



[[ TC6392 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set tree_id is max length 20







==========



1. http response code is 404



[[ TC6393 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set tree_id is max length 21







==========



1. http response code is 400



[[ TC6394 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set timeframe is null







==========



1. http response code is 400



[[ TC6395 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set timeframe is empty







==========



1. http response code is 400



[[ TC6396 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set timeframe is not exist







==========



1. http response code is 400



[[ TC6397 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set timeframe is max length 10







==========



1. http response code is 404



[[ TC6398 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set timeframe is max length 11







==========



1. http response code is 400



[[ TC6399 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set cat_id is null







==========



1. http response code is 400



[[ TC6400 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set cat_id is empty







==========



1. http response code is 400



[[ TC6401 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set cat_id is not exist







==========



1. http response code is 404



[[ TC6402 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set  fee_code is null







==========



1. http response code is 400



[[ TC6403 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



update pricing set  fee_code is empty







==========



1. http response code is 400



[[ TC6404 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 insert pricing and update pricing set  fee_code is max length 32







==========



1. http response code is 200



[[ TC6405 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  fee_code is max length 33







==========



1. http response code is 400



[[ TC6406 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is null







==========



1. http response code is 400



[[ TC6407 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is empty







==========



1. http response code is 400



[[ TC6408 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is not include







==========



1. http response code is 200



[[ TC6409 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is special







==========



1. http response code is 400



[[ TC6410 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is max length 999999999999.99







==========



1. http response code is 200



[[ TC6411 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is max length 999999999999.999







==========



1. http response code is 400



[[ TC6412 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is string







==========



1. http response code is 400



[[ TC6413 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is list







==========



1. http response code is 400



[[ TC6414 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  price is array







==========



1. http response code is 400



[[ TC6415 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is null







==========



1. http response code is 400



[[ TC6416 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is empty







==========



1. http response code is 400



[[ TC6417 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is not include







==========



1. http response code is 200



[[ TC6418 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is special







==========



1. http response code is 400



[[ TC6419 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is max







==========



1. http response code is 200



[[ TC6420 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is exceed max







==========



1. http response code is 400



[[ TC6421 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is exceed min







==========



1. http response code is 400



[[ TC6422 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is string







==========



1. http response code is 400



[[ TC6423 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is list







==========



1. http response code is 400



[[ TC6424 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  discount is array







==========



1. http response code is 400



[[ TC6425 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set price = "200.00" and user_id is null



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6426 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set price = "200.00" and user_id is empty



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6427 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  user_id is not exist







==========



1. http response code is 404



[[ TC6428 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  user_id is not include







==========



1. http response code is 400



[[ TC6429 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is null







==========



1. http response code is 400



[[ TC6430 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is empty







==========



1. http response code is 400



[[ TC6431 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set price = "0.00" and purchase_over is not include



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6432 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is special







==========



1. http response code is 400



[[ TC6433 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set purchase_over is max



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6434 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is max exceed







==========



1. http response code is 400



[[ TC6435 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set purchase_over is min



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6436 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is float







==========



1. http response code is 400



[[ TC6437 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is string







==========



1. http response code is 400



[[ TC6438 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is list







==========



1. http response code is 400



[[ TC6439 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over is array







==========



1. http response code is 400



[[ TC6440 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is null







==========



1. http response code is 400



[[ TC6441 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is empty







==========



1. http response code is 400



[[ TC6442 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set price is '0.00'



3. update pricing  and set purchase_over_price is not include



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6443 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is special







==========



1. http response code is 400



[[ TC6444 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set purchase_over_price is max(999999999999.99)



3. update pricing 



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6445 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set purchase_over_price is max(999999999999.999)



3. update pricing 



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 400



[[ TC6446 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. insert pricing



2. set purchase_over_price is min



3. update pricing



4. get pricing and delete pricing







==========



1.1-4.1 http response code is 200



[[ TC6447 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is float







==========



1. http response code is 400



[[ TC6448 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is string







==========



1. http response code is 400



[[ TC6449 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is list







==========



1. http response code is 400



[[ TC6450 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price is array







==========



1. http response code is 400



[[ TC6451 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. delete tree



2. prepare category tree



3. update pricing







==========



1.1-3.1 http response code is 404



[[ TC6452 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



1. delete tree



2. prepare category tree



3. update pricing







==========



1.1-3.1 http response code is 404



[[ TC6453 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set price = '1234.ab'







==========



1. http response code is 400



[[ TC6454 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/update/

     

method:PUT







Testing Steps:



==========



 update pricing set  purchase_over_price = '1234.ab'







==========



1. http response code is 400



[[ TC6455 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id=null



Expected Results 

========== 

1. http response code is 400





[[ TC6456 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id=''



Expected Results 

========== 

1. http response code is 400





[[ TC6457 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing unset tree_id



Expected Results 

========== 

1. http response code is 400





[[ TC6458 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id='!@#'



Expected Results 

========== 

1. http response code is 400





[[ TC6459 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404





[[ TC6460 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id='badcd...'(length=20)



Expected Results 

========== 

1. http response code is 404





[[ TC6461 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id='badcd...'(length=21)



Expected Results 

========== 

1. http response code is 400





[[ TC6462 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id=12345



Expected Results 

========== 

1. http response code is 400





[[ TC6463 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id= array('tw_auction_basic')



Expected Results 

========== 

1. http response code is 400





[[ TC6464 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set tree_id= array('tw_auction_basic'=>'tw_auction_basic')



Expected Results 

========== 

1. http response code is 400





[[ TC6465 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=null



Expected Results 

========== 

1. http response code is 400





[[ TC6466 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=''



Expected Results 

========== 

1. http response code is 400





[[ TC6467 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing unset timeframe



Expected Results 

========== 

1. http response code is 400





[[ TC6468 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe='!@#$'



Expected Results 

========== 

1. http response code is 400





[[ TC6469 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=2147483640



Expected Results 

========== 

1. http response code is 404





[[ TC6470 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=2147483646



Expected Results 

========== 

1. http response code is 200





[[ TC6471 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=2147483647



Expected Results 

========== 

1. http response code is 400





[[ TC6472 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe='string'



Expected Results 

========== 

1. http response code is 400





[[ TC6473 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=array(1234456678)



Expected Results 

========== 

1. http response code is 400





[[ TC6474 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set timeframe=array(1234456678=>'zz')



Expected Results 

========== 

1. http response code is 400





[[ TC6475 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=null



Expected Results 

========== 

1. http response code is 400





[[ TC6476 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=''



Expected Results 

========== 

1. http response code is 400





[[ TC6477 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing unset cat_id



Expected Results 

========== 

1. http response code is 400





[[ TC6478 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id='!@#$'



Expected Results 

========== 

1. http response code is 400





[[ TC6479 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id='notexist'



Expected Results 

========== 

1. http response code is 404





[[ TC6480 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=1234



Expected Results 

========== 

1. http response code is 400





[[ TC6481 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=array('11111')



Expected Results 

========== 

1. http response code is 400





[[ TC6482 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=array('11111'=>'12111')



Expected Results 

========== 

1. http response code is 400





[[ TC6483 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code=null



Expected Results 

========== 

1. http response code is 400





[[ TC6484 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code=''



Expected Results 

========== 

1. http response code is 400





[[ TC6485 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing unset fee_code



Expected Results 

========== 

1. http response code is 400





[[ TC6486 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code='!@#'



Expected Results 

========== 

1. http response code is 400





[[ TC6487 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code='abd1234...'(length=32)



Expected Results 

========== 

1. http response code is 404





[[ TC6488 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code='abd1234...'(length=33)



Expected Results 

========== 

1. http response code is 400





[[ TC6489 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code=12345



Expected Results 

========== 

1. http response code is 400





[[ TC6490 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code=array('aaaa')



Expected Results 

========== 

1. http response code is 400





[[ TC6491 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code=array('aaaa'=>'fl10')



Expected Results 

========== 

1. http response code is 400





[[ TC6492 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=null



Expected Results 

========== 

1. http response code is 400





[[ TC6493 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=' '



Expected Results 

========== 

1. http response code is 400





[[ TC6494 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing without  price



Expected Results 

========== 

1. http response code is 400





[[ TC6495 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=' !@#$%'



Expected Results 

========== 

1. http response code is 400





[[ TC6496 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=' 999999999999.99'



Expected Results 

========== 

1. http response code is 200





[[ TC6497 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=' 9999999999999.9'



Expected Results 

========== 

1. http response code is 400





[[ TC6498 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price='string '



Expected Results 

========== 

1. http response code is 400





[[ TC6499 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=array('123456')



Expected Results 

========== 

1. http response code is 400





[[ TC6500 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price=array('123456'=>1234)



Expected Results 

========== 

1. http response code is 400





[[ TC6501 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set fee_code='notexist'



Expected Results 

========== 

1. http response code is 400





[[ TC6502 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id=null



Expected Results 

========== 

1. http response code is 400





[[ TC6503 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id=''



Expected Results 

========== 

1. http response code is 200





[[ TC6504 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing without user_id 



Expected Results 

========== 

1. http response code is 400





[[ TC6505 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id='!@#$'



Expected Results 

========== 

1. http response code is 400





[[ TC6506 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id='abdc...'(length=128)



Expected Results 

========== 

1. http response code is 200





[[ TC6507 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id='abdc...'(length=129)



Expected Results 

========== 

1. http response code is 400





[[ TC6508 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id=12345



Expected Results 

========== 

1. http response code is 400





[[ TC6509 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id=array('aaa'=>123)



Expected Results 

========== 

1. http response code is 400





[[ TC6510 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set user_id=array('aaa')



Expected Results 

========== 

1. http response code is 400





[[ TC6511 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=null



Expected Results 

========== 

1. http response code is 400





[[ TC6512 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=''



Expected Results 

========== 

1. http response code is 400





[[ TC6513 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing without  discount 



Expected Results 

========== 

1. http response code is 400





[[ TC6514 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=1.01



Expected Results 

========== 

1. http response code is 400





[[ TC6515 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=-0.99



Expected Results 

========== 

1. http response code is 400





[[ TC6516 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount='string'



Expected Results 

========== 

1. http response code is 400





[[ TC6517 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=array('aa'=>0.8)



Expected Results 

========== 

1. http response code is 400





[[ TC6518 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=array(0.8)



Expected Results 

========== 

1. http response code is 400





[[ TC6519 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=null



Expected Results 

========== 

1. http response code is 400





[[ TC6520 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price=null



Expected Results 

========== 

1. http response code is 400





[[ TC6521 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=' '



Expected Results 

========== 

1. http response code is 400





[[ TC6522 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price=' '



Expected Results 

========== 

1. http response code is 400





[[ TC6523 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing without purchase_over 



Expected Results 

========== 

1. http response code is 400





[[ TC6524 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing without purchase_over_price 



Expected Results 

========== 

1. http response code is 400





[[ TC6525 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over='!@#$ '



Expected Results 

========== 

1. http response code is 400





[[ TC6526 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=2147483646



Expected Results 

========== 

1. http response code is 200





[[ TC6527 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='!@#$ '



Expected Results 

========== 

1. http response code is 400





[[ TC6528 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=2147483647



Expected Results 

========== 

1. http response code is 400





[[ TC6529 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=0



Expected Results 

========== 

1. http response code is 200





[[ TC6530 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=-1



Expected Results 

========== 

1. http response code is 400





[[ TC6531 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over='10xh'



Expected Results 

========== 

1. http response code is 400





[[ TC6532 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=array(10，20)



Expected Results 

========== 

1. http response code is 400





[[ TC6533 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over=array('1'=>10，'2'=>20)



Expected Results 

========== 

1. http response code is 400





[[ TC6534 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='999999999999.99'



Expected Results 

========== 

1. http response code is 200





[[ TC6535 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='9999999999999.999'



Expected Results 

========== 

1. http response code is 400





[[ TC6536 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='0.00'



Expected Results 

========== 

1. http response code is 200





[[ TC6537 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price=-0.1



Expected Results 

========== 

1. http response code is 400





[[ TC6538 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='string'



Expected Results 

========== 

1. http response code is 400





[[ TC6539 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price=array(10，20)



Expected Results 

========== 

1. http response code is 400





[[ TC6540 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price=array('1'=>10，'2'=>20)



Expected Results 

========== 

1. http response code is 400





[[ TC6541 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert alias node get id catId

2. insert pricing set cat_id = catId



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6542 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set cat_id=0



Expected Results 

========== 

1. http response code is 200





[[ TC6543 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set price='1234.ab'



Expected Results 

========== 

1. http response code is 400





[[ TC6544 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set purchase_over_price='1234.ab'



Expected Results 

========== 

1. http response code is 400





[[ TC6565 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set tree_id is null



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6566 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set tree_id is empty



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6567 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set tree_id is exist



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6568 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set tree_id is max length



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6569 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set tree_id is exceed max length



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6570 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set timeframe is null



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6571 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set timeframe is empty



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6572 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set timeframe is not exist



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6573 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set timeframe is max length



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6574 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set timeframe is exceed max length



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6575 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set cat_id is null



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6576 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set cat_id is empty



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6577 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set cat_id is not exist



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6578 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is null



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6579 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is empty



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6580 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is max length



2. delete pricing data and get pricing







==========



1.1-2.1 http response code is 200



[[ TC6581 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is exceed max length



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6582 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is not include



2. delete pricing data  and get pricing







==========



1.1-2.1 http response code is 200



[[ TC6583 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set fee_code is not include



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6584 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is null



2. delete pricing data 







==========



1.1-2.1 http response code is 200



[[ TC6585 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is empty



2. delete pricing data 







==========



1.1-2.1 http response code is 200



[[ TC6586 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is max length and insert pricing



2. delete pricing data  and get pricing







==========



1.1-2.1 http response code is 200



[[ TC6587 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is exceed max length



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6588 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is include and fee_code is not include



2. delete pricing data 







==========



1.1-2.1 http response code is 400



[[ TC6589 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is not include and fee_code is include



2. delete pricing data  and get pricing







==========



1.1-2.1 http response code is 200



[[ TC6590 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id is not exist



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6591 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. delete tree and prepare category tree



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6592 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/delete//?timeframe=&fee_code=&user_id=

     

method:GET







Testing Steps:



==========



1. delete tree and prepare category tree



2. delete pricing data 







==========



1.1-2.1 http response code is 404



[[ TC6593 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set tree_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC6594 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set tree_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6595 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set tree_id=' notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC6596 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set tree_id=' abcd...'(length=20)



Expected Results 

========== 

1. http response code is 404



[[ TC6597 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set tree_id=' abcd...'(length=21)



Expected Results 

========== 

1. http response code is 400



[[ TC6598 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe=null



Expected Results 

========== 

1. http response code is 400



[[ TC6599 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6600 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe='1234'



Expected Results 

========== 

1. http response code is 404



[[ TC6601 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe='2147483646'



Expected Results 

========== 

1. http response code is 200



[[ TC6602 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe='2147483647'



Expected Results 

========== 

1. http response code is 400



[[ TC6603 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set cat_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC6604 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set cat_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6605 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set cat_id='8970 '



Expected Results 

========== 

1. http response code is 404



[[ TC6606 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set fee_code=null



Expected Results 

========== 

1. http response code is 400



[[ TC6607 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set fee_code=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6608 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing with fee_code='aaa...'(length=32)

Testing Steps: 

==========

1. batch query pricing set fee_code='aaa... (length=32)'



Expected Results 

========== 

1. http response code is 200



[[ TC6609 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing 

Testing Steps: 

==========

1. batch query pricing set fee_code='aaa... (length=33)'



Expected Results 

========== 

1. http response code is 400



[[ TC6610 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=null



Expected Results 

========== 

1. http response code is 400



[[ TC6611 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6612 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=2147483646



Expected Results 

========== 

1. http response code is 200



[[ TC6613 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=2147483647



Expected Results 

========== 

1. http response code is 400



[[ TC6614 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=1



Expected Results 

========== 

1. http response code is 200



[[ TC6615 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=0



Expected Results 

========== 

1. http response code is 400



[[ TC6616 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty=-0.99



Expected Results 

========== 

1. http response code is 400



[[ TC6617 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set qty='abcd'



Expected Results 

========== 

1. http response code is 400



[[ TC6618 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set timeframe=1305532090



Expected Results 

========== 

1. http response code is 200



[[ TC6619 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id=null



Expected Results 

========== 

1. http response code is 200



[[ TC6620 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id=' '



Expected Results 

========== 

1. http response code is 200



[[ TC6621 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id='abdcd... '(length=128)



Expected Results 

========== 

1. http response code is 200



[[ TC6622 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id='abdcd... '(length=129)



Expected Results 

========== 

1. http response code is 400



[[ TC6623 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing without user_id 



Expected Results 

========== 

1. http response code is 400



[[ TC6624 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id='notexist'  set  fee_code exist



Expected Results 

========== 

1. http response code is 200



[[ TC6625 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set fee_code='notexist' 



Expected Results 

========== 

1. http response code is 404



[[ TC6626 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare pricing

Testing Steps: 

==========

1. batch query pricing set user_id='notexist'  set  fee_code='fv10'(not exist)



Expected Results 

========== 

1. http response code is 404



[[ TC6627 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over=0

2. batch query pricing with parameters



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6628 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over=2147483646(max)

2. batch query pricing with parameters



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6629 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over=20 

2. batch query pricing with parameters and set qty=20



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6630 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over=5

2. batch query pricing with parameters and set qty=20



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6631 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over_price=0

2. batch query pricing with parameters and set qty=20



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6632 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set  price=0

2. batch query pricing with parameters and set qty=20



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6633 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing set purchase_over_price=0.99 and price=0.99

2. batch query pricing with parameters and set qty=20



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6634 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing 

     set purchase_over_price='999999999999.99' 

  set price='999999999999.99'

  set purchase_over=2147483646

  set discount='0.00'

2. batch query pricing with parameters and set qty=2147483646



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6635 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing 

     set purchase_over_price='999999999999.99' 

  set price='999999999999.99'

  set purchase_over=2147483646

  set discount='1.00'

2. batch query pricing with parameters and set qty=2147483646



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 veirfy calcPrice is OK

[[ TC6636 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at present node

2. batch query pricing with parameters 



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6637 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at parent node

2. batch query pricing set cat_id is children node id



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6638 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at root node

2. batch query pricing set cat_id is children node id



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6639 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at present node without user_id

2. batch query pricing set cat_id is children node id and set user_id



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6640 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at present node without user_id

2. batch query pricing set cat_id is children node id and set user_id



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6641 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. prepare pricing at parent node without user_id

2. batch query pricing set cat_id is children node id and set user_id



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify pricing fields is OK

[[ TC6642 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. not insert pricing at node

Testing Steps: 

==========

1. batch query pricing with parameters



Expected Results 

========== 

1. http response code is 404



[[ TC6643 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and alias node get aliasNodeId

Testing Steps: 

==========

1. batch query pricing set cat_id=aliasNodeId



Expected Results 

========== 

1. http response code is 404



[[ TC6644 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing set cat_id=0



Expected Results 

========== 

1. http response code is 404



[[ TC6645 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing set fee_code_qty='lf1020'



Expected Results 

========== 

1. http response code is 400



[[ TC6646 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing set fee_code_qty='lf10，20，10'



Expected Results 

========== 

1. http response code is 400



[[ TC6647 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing miss set fee_code_qty



Expected Results 

========== 

1. http response code is 400



[[ TC6648 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing  set fee_code_qty=null



Expected Results 

========== 

1. http response code is 400



[[ TC6649 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing  set fee_code_qty=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6650 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing  set fee_code_qty='xxxx，20'



Expected Results 

========== 

1. http response code is 400



[[ TC6651 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing  set fee_code_qty=array('fv10，20'，'fv10，25')



Expected Results 

========== 

1. http response code is 200



[[ TC6652 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&fee_code_qty=，&fee_code_qty=，&user_id=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. batch query pricing  set fee_code_qty=array('fv10，20'，'fv10，20')



Expected Results 

========== 

1. http response code is 200



[[ TC6653 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set tree_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC6654 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set tree_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6655 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set tree_id='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC6656 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set tree_id='aaa...'(length=20)



Expected Results 

========== 

1. http response code is 404



[[ TC6657 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set tree_id='aaa...'(length=21)



Expected Results 

========== 

1. http response code is 400



[[ TC6658 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set timeframe=null



Expected Results 

========== 

1. http response code is 400



[[ TC6659 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set timeframe=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6660 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set timeframe='notexist'



Expected Results 

========== 

1. http response code is 404



[[ TC6661 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set timeframe='2147483646'



Expected Results 

========== 

1. http response code is 200



[[ TC6662 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set timeframe='2147483647'



Expected Results 

========== 

1. http response code is 400



[[ TC6663 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set cat_id=null



Expected Results 

========== 

1. http response code is 400



[[ TC6664 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set cat_id=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6665 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set cat_id='notexist'



Expected Results 

========== 

1. http response code is 400



[[ TC6666 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set fee_code=null



Expected Results 

========== 

1. http response code is 400



[[ TC6667 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set fee_code=' '



Expected Results 

========== 

1. http response code is 400



[[ TC6668 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set fee_code='abdcd...'(length=32)



Expected Results 

========== 

1. http response code is 200



[[ TC6669 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set fee_code='abdcd...'(length=33)



Expected Results 

========== 

1. http response code is 400



[[ TC6670 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing  unset fee_code



Expected Results 

========== 

1. http response code is 200



[[ TC6671 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id=null



Expected Results 

========== 

1. http response code is 200



[[ TC6672 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id=' '



Expected Results 

========== 

1. http response code is 200



[[ TC6673 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id='aaaa...'(length=128)



Expected Results 

========== 

1. http response code is 200



[[ TC6674 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id='aaaa...'(length=129)



Expected Results 

========== 

1. http response code is 400



[[ TC6675 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id and  unset fee_code



Expected Results 

========== 

1. http response code is 200



[[ TC6676 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing unset user_id and  set fee_code



Expected Results 

========== 

1. http response code is 200



[[ TC6677 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set user_id='not_exist'



Expected Results 

========== 

1. http response code is 404



[[ TC6678 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set fee_code='not_exist'



Expected Results 

========== 

1. http response code is 404



[[ TC6679 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set cat_id is alias node



Expected Results 

========== 

1. http response code is 400



[[ TC6680 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=



Pre-Date:

   

Testing Steps: 

==========

1. get pricing set cat_id=0



Expected Results 

========== 

1. http response code is 404



[[ TC6681 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/batch_query_price//?timeframe=&amp;fee_code_qty=，&amp;fee_code_qty=，&amp;user_id=



Pre-Date:

   1. prepare pricing set fee_code='fv10'

Testing Steps: 

==========

1. batch query pricing&nbsp; with well parameters



Expected Results 

========== 

1. 1 http response code is 200

1.2 verify query result is OK

[[ TC6682 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set tree_id is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6683 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set tree_id is empty



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6684 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set tree_id is not exist



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 404



[[ TC6685 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set tree_id max length is 20



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 404



[[ TC6686 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set tree_id max length 21



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6687 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6688 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe is empty



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6689 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe is not exist



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6690 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe max length is 2147483646



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6691 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe max length is 2147483647



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6692 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set cat_is is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6693 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set cat_id is empty



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6694 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set cat_id is not exist



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 404



[[ TC6695 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set fee_code is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6696 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set fee_code is empty



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6697 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set fee_code max length is 32



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6698 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set fee_code max length is 33



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6699 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6700 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty is ''



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6701 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty max length is 32



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6702 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty max length is 33



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6703 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty min length is 1



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6704 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty is 0



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6705 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty is float



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6706 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set qty is char



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6707 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set timeframe is large than orginal



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6708 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set user_id is null



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6709 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set user_id is empty



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6710 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. set user_id  max length is 128 and insert pricing 



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6711 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set user_id max length is 129



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 400



[[ TC6712 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. query pricing and set user_id is not include







==========



1. http response code is 400



[[ TC6713 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. prepare pricing and set user_id  is not exist



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6714 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. query pricing and set fee_code is not exist







==========



1. http response code is 400



[[ TC6715 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. query pricing and set user_id is not exist but category don't have price rule







==========



1. http response code is 404



[[ TC6716 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=0， purchase_over_price='8.00'， price='10.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6717 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=2147483646， purchase_over_price='8.00'，  price='10.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6718 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=20， purchase_over_price='8.00'，  price='10.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6719 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=5， purchase_over_price='8.00'，  price='10.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6720 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=5， purchase_over_price='0.00'，  price='10.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6721 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=5， purchase_over_price='8.00'，  price='0.00'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6722 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=5， purchase_over_price='0.99'，  price='0.99'， qty=20， discount='0.20' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6723 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=2147483646， purchase_over_price='999999999999.99'，  price='999999999999.99'， qty=2147483646， discount='0.00' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6724 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  set purchase_over=2147483646， purchase_over_price='999999999999.99'，  price='999999999999.99'， qty=2147483646， discount='1.00' and prepare pricing



2. query pricing



3. delete pricing







==========



1.1-3.1 http response code is 200



[[ TC6725 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. present label is pricing_level_3



2. clean up all inherit sample rules



3. insert node and insert pricing



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6726 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. present label is pricing_level_2 and pricing_level_3



2. clean up all inherit sample rules



3. insert node and insert pricing



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6727 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. root  label is pricing_level_1 and pricing_level_3



2. clean up all inherit sample rules and set cat_id is 0



3. insert node and insert pricing



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6728 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. label is pricing_level_3



2. clean up all inherit sample rules



3. insert node and insert pricing



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6729 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. present label is pricing_level_2 and pricing_level_3



2. clean up all inherit sample rules



3. insert pricing and insert node



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6730 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. root label is pricing_level_1 and present Label pricing_level_3



2. clean up all inherit sample rules and set cat_id is 0



3. insert pricing and insert node



4. query pricing



5. delete pricing







==========



1.1-5.1 http response code is 200



[[ TC6731 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1.  present Label pricing_level_3



2. clean up all inherit sample rules



3. query pricing







==========



1.1-3.1 http response code is 404



[[ TC6732 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. delete tree



2. prepare category tree



3.  2 query pricing







==========



1.1-3.1 http response code is 404



[[ TC6733 ]]




==========



A.



URI Syntax:/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

     

method:GET







Testing Steps:



==========



1. delete tree



2. prepare category tree



3.  query pricing







==========



1.1-3.1 http response code is 404



[[ TC6734 ]]


========== 

URI Syntax:  

Query: (GET)/v1/egs/category_pricing/query_price///?timeframe=&qty=&user_id=

Import : (POST)/v1/egs/category_pricing/import/?timeframe=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. import pricing set cat_id=0

2. query set cat_id= catId1(leafNode)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify query result is OK





[[ TC6735 ]]


========== 

URI Syntax:  

Batch query: (GET)/v1/egs/category_pricing/get//?timeframe=&fee_code=&user_id=

Import : (POST)/v1/egs/category_pricing/import/?timeframe=



Pre-Date:

   1. prepare tree and node

Testing Steps: 

==========

1. import pricing set cat_id=0

2. batch query set cat_id= catId1(leafNode)



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify query result is OK





[[ TC6736 ]]


========== 

URI Syntax:  

Insert Node: (POST)/v1/egs/category_pricing/insert



Pre-Date:

   1. insert tree and get tree_id

   2. prepare node

Testing Steps: 

==========

1. insert pricing set discount=1.00



Expected Results 

========== 

1. http response code is 200



[[ TC6754 ]]


==========&nbsp; 

A.&nbsp; 

Extend: (PUT)/v1/egs/merchandise/extend/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve mid1 and assign orignOfftime = merchandise['offtime']

3. qa_update&nbsp; set merchandise['offtime'] = time()+60

4. extend mid1 set <code class="xml"><span class="str">extend</span></code>_mins=30 

5. get merchandise by mid1



Expected Results 

========== 

1.1-4.1 http response code is 200

4.2 verify extend success

5.2 verify merchandise['offtime'] = orignOfftime + 60*mins

[[ TC6755 ]]


==========&nbsp; 

A.&nbsp; 

Mass Extend: (PUT)/v1/egs/merchandise/extend/?user_update=&lt;user_update&gt;



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve mid1 

3. bid_qa_update&nbsp; set bid_item['end_time"] = time()+60

4. get merchandise by mid1&nbsp; assign orignOfftime = bid_item['end_time"]

5. extend mid1 set mins=30 

6. get merchandise by mid1



Expected Results 

========== 

1.1-6.1 http response code is 200

5.2 verify extend success

6.2 verify merchandise['offtime'] = orignOfftime + 60*mins

[[ TC6756 ]]


==========&nbsp; 

A.&nbsp; 

Extend: (PUT)/v1/egs/merchandise/extend/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>



Testing Steps: 

==========

1. submit a bidding merchandise and get mid1

2. shelve mid1&nbsp; set&nbsp; auto_reshelve_allowed=2

3. bid_qa_update&nbsp; set bid_itme['end_time']= time()+2

4. extend mid1 set&nbsp; extend<code class="xml"></code>_mins=30 

5. sleep 2 s

6. get merchandise by mid1



Expected Results 

========== 

1.1-6.1 http response code is 200

4.2 verify&nbsp; extend success

6.2 verify merchandise['total_auto_reshelve_count'] = 0

[[ TC6758 ]]


========== 

A. 

URI Syntax:/v1/egs/merchandise/shelve/&lt;mid&gt;?user_update=&lt;user_update&gt;

method:PUT



Testing Steps:

==========

1. submit a bid merchandise and get mid

2. Shelve merchandise by mid

3. get merchandise and&nbsp; get bid_id&nbsp; assign $bidId

4. place bid&nbsp; set bidder_id = lornaTest123

5. close bid item

6. Shelve merchandise again 

7. get merchandise&nbsp; and get&nbsp; new bid_id&nbsp; assign $newBidId

8. query bidder bid recode list&nbsp; set bidder_id = lornaTest123



Expected Results

==========

1.1-8.1 http response code is 200

7.2&nbsp; verify $newBidId not equals $bidId

8.2&nbsp; verify&nbsp; query result list not include $bidId&nbsp; info

[[ TC6759 ]]


==========&nbsp; 

A.&nbsp; 

Extend: (PUT)/v1/egs/merchandise/extend/?user_update=&lt;user_update&gt;



Testing Steps: 

==========

1. import a bidding merchandise and get mid1

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set offtime=null， status=2 

2. extend mid1 set mins=30 

3. get merchandise by mid1



Expected Results 

========== 

1.1-3.1 http response code is 200

2.2 verify extend success

3.2 verify merchandise['offtime'] = merchandise['bid']['bid_item']['end_time']

[[ TC6769 ]]


==========

A.

URI Syntax:/v1/egs/merchandise/update/&lt;mid&gt;/?user_update=&lt;user_update&gt;

method:PUT



Testing Steps:

==========

1. submit a bid merchandise and get mid

2. Shelve merchandise by mid

3. get merchandise and&nbsp; get bid_id&nbsp; assign $bidId

4. place bid&nbsp; set bidder_id = aliceTest123

5. close bid item

6. update the bid merchandise by mid 

7. Shelve merchandise again

8. get merchandise&nbsp; and get&nbsp; new bid_id&nbsp; assign $newBidId

9. query bidder bid recode list&nbsp; set bidder_id = aliceTest123



Expected Results

==========

1.1-9.1 http response code is 200

8.2&nbsp; verify $newBidId not equals $bidId

9.2&nbsp; verify&nbsp; query result list not include $bidId&nbsp; info

[[ TC6771 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

 2.cancel merchandise by mid

 3.get merchandise



  Expected Result:

 1.1~3.1 http response code 200

 3. 2 verify merchandise status=4 and bid_item status=3

[[ TC6772 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.create draft a bidding&nbsp; merchandise and get mid

 2.cancel merchandise by mid

 3.get merchandise



  Expected Result:

 1.1~3.1 http response code 200

 3. 2 verify merchandise status=4 and bid_item status=3

[[ TC6773 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

2. shelve merchandise

 3.cancel merchandise by mid

 4.get merchandise



  Expected Result:

 1.1~4.1 http response code 200

 4. 2 verify merchandise status=4 and bid_item status=3

[[ TC6774 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

2. close merchandise

 3.cancel merchandise by mid

 4.get merchandise



  Expected Result:

 1.1~4.1 http response code 200

 4. 2 verify merchandise status=4 and bid_item status=3

[[ TC6775 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

 2.cancel merchandise by mid

3. cancel merchandise again

 4.get merchandise



  Expected Result:

 1.1~3.1 http response code 200

 4. 1 http response code 400

[[ TC6776 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

2. delete merchandise

 3.cancel merchandise by mid

 4.get merchandise



  Expected Result:

 1.1~4.1 http response code 200

 4. 2 verify merchandise status=4 and bid_item status=3

[[ TC6777 ]]


 Request URI: /v1/egs/merchandise/cancel/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

2. shelve merchandise and place bid 

3.&nbsp; cancel bid item 

 4.cancel merchandise by mid

 5.get merchandise



  Expected Result:

 1.1~5.1 http response code 200

 5. 2 verify merchandise status=4 and bid_item status=3

[[ TC6810 ]]


 Request URI: /v1/egs/merchandise/recover/<i>&lt;mid&gt;</i>?user_update=<i>&lt;user_update&gt;</i>

 method:PUT



step: 

  1.submit a bid merchandise and get mid

2. cancel bid merchandise

 3. recover by mid



  Expected Result:

 1~2 . http response code 200

 3. http response code 400

[[ TC6820 ]]


 1. insert merchandise data with descs

 2. get data and get response 200

 3. get detail data and get response 200

 4. update data and get response 200

 5. delete data and get response 200

 6. verify data step3 returned of detail field is not find

[[ TC6856 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



init uid and include prefix A-Za-z0-9





Expected Results



==========



1 http response code is 200



[[ TC6857 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========

init uid and prefix max length = 128





Expected Results



==========



1 http response code is 200



[[ TC6858 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



init uid and prefix max length = 129





Expected Results



==========



1 http response code is 400



[[ TC6859 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



init uid and prefix is null





Expected Results



==========



1 http response code is 400



[[ TC6860 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



init uid and prefix is ''





Expected Results



==========



1 http response code is 400



[[ TC6861 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



1. init uid and prefix is (string)time() 



2. get uid







Expected Results



==========



1.1-2.1 http response code is 200



[[ TC6862 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



init uid and prefix not exist





Expected Results



==========



1 http response code is 500



[[ TC6863 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



1. get range and set prefix



2. init uid and get uid







Expected Results



==========



1.1-2.1 http response code is 200



[[ TC6864 ]]




==========



A.



URI Syntax: /v1/egs/uid/get/



method: GET







Testing Steps:



==========



1. init uid and prefix with begin value 



2. get uid



3. again init uid







Expected Results



==========



1.1-3.1 http response code is 500



[[ TC6882 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert eca with required parameters



Expected Results 

========== 

1. http response code is 200



[[ TC6883 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields



Expected Results 

========== 

1~2. http response code is 200



[[ TC6884 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields set mid=null



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6885 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields set mid=' '



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6886 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields set mid='1234...'(length=21)



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6887 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields set mid='notexist'



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6888 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise some fields



Expected Results 

========== 

1~2. http response code is 200



[[ TC6889 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise without requst_data



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6890 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise set requst_data=null



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6891 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert eca with required parameters

2. update merchandise set requst_data=' '



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6892 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. delete merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6893 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. delete merchandise by mid

3. delete merchandise again 



Expected Results 

========== 

1~3. http response code is 200



[[ TC6894 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. delete merchandise set mid=null



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6895 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. delete merchandise set mid=12345.....(length=21)



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6896 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise without image_data and get mid

2. delete merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6897 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise with one image_data and get mid

2. delete merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6898 ]]


========== 

URI Syntax:  

delete: (DELETE)/v1/eca/merchandise/delete/



Testing Steps: 

========== 

1. insert merchandise with two image_data and get mid

2. delete merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6899 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6900 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise by mid

3. get merchandise by mid again



Expected Results 

========== 

1~3. http response code is 200



[[ TC6901 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid=' '



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6902 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid=null



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6903 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid='12345...'(length=21)



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6904 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid='notexist'



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6905 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise without image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6906 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise with one image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6907 ]]


========== 

URI Syntax:  

get: (GET)/v1/eca/merchandise/get/



Testing Steps: 

========== 

1. insert merchandise with two image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6908 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6909 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise by mid

3. get merchandise by mid again



Expected Results 

========== 

1~3. http response code is 200



[[ TC6910 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid=' '



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6911 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid=null



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6912 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid='12345...'(length=21)



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6913 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise and get mid

2. get merchandise  set  mid='notexist'



Expected Results 

========== 

1. http response code is 200

2. http response code is 400



[[ TC6914 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise without image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6915 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise with one image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6916 ]]


========== 

URI Syntax:  

get detail: (GET)/v1/eca/merchandise/get_detail/



Testing Steps: 

========== 

1. insert merchandise with two image and get mid

2. get merchandise by mid



Expected Results 

========== 

1~2. http response code is 200



[[ TC6917 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise with cat_attr data

2. get merchandise by mid



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data json well and cat_attr is OK



[[ TC6918 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11111 

     set cat_attr=array('ROOM_TYPE' => array ('three'， 'two'))



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code=10-006

[[ TC6919 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11111 

     set cat_attr=array('ROOM_TYPE' => 10 )



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code=10-006

[[ TC6920 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11111 

     set cat_attr=array('ROOM_TYPE' => 'abdc...'(length=31) )



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code=10-004

[[ TC6921 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11111 

     set cat_attr=array('ROOM_TYPE' => 't' )



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code=10-004

[[ TC6922 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11112 (ROOM_TYPE is required)

     unset cat_attr



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code=10-001

[[ TC6923 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     set cat_attr=array('ROOM_TYPE' => array('checkbox value1'， 'checkbox value2')，)

2. get merchandise 



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data merchandise cat_attr is OK

[[ TC6924 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     set cat_attr=array('ROOM_TYPE' => 'checkbox value1')

2. get merchandise 



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data merchandise cat_attr is OK

[[ TC6925 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     set cat_attr=array('ROOM_TYPE' => 3)



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code is 10-003

[[ TC6926 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     unset cat_attr



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code is 10-001

[[ TC6927 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     set cat_attr=array('ROOM_TYPE' => 'radiobox value1' ) 

2. get merchandise 



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data merchandise cat_attr is OK

[[ TC6928 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     set cat_attr=array('ROOM_TYPE' => 'undefined checkbox value1') 



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code is 10

[[ TC6929 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     set cat_attr=array('ROOM_TYPE' =>3 )  

 

Expected Results 

========== 

1.1 http response code is 200

1.2 verify response data error list code is 10

[[ TC6930 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11115 (attribute don't have any valide rule)

     set cat_attr=array('ROOM_TYPE' => 5 )



Expected Results 

========== 

1.1 http response code is 200

1.2 verify response error list code is 10

[[ TC6931 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     unset cat_attr  

 

Expected Results 

========== 

1.1 http response code is 200

1.2 verify response data error list code is 10

[[ TC6932 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11112 (attribute type is text)

     unset cat_attr  

 

Expected Results 

========== 

1.1 http response code is 200

1.2 verify response data error list code is 10

[[ TC6933 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11113 (attribute type is checkbox)

     unset cat_attr  

 

Expected Results 

========== 

1.1 http response code is 200

1.2 verify response data error list code is 10

[[ TC6934 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     unset cat_attr  

 

Expected Results 

========== 

1.1 http response code is 200

1.2 verify response data error list code is 10

[[ TC6935 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 set requestData.cat_attr=array("ROOM_TYPE" => "three")

3. get merchandise



Expected Results 

========== 

1.1~3.1 http response code is 200

3.2 verify response data cat_attr is OK



[[ TC6936 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 set requestData.cat_attr=array( "ROOM_TYPE" => array ('three'， 'two'))



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-006



[[ TC6937 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 set requestData.cat_attr=array( "ROOM_TYPE" =>3 )



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-006



[[ TC6938 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 set requestData.cat_attr=array( "ROOM_TYPE" =>'abcd...(length=31)' )



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-004



[[ TC6939 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 set requestData.cat_attr=array( "ROOM_TYPE" =>'a' )



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-004



[[ TC6940 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6941 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

set requestData.cat_attr=array( 'ROOM_SIZE' => array("23000_ROOM_SIZE_B"，"23000_ROOM_SIZE_C") )



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6942 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

set requestData.cat_attr=array( 'ROOM_SIZE' => "23000_ROOM_SIZE_B" )



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6943 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

set requestData.cat_attr=array( 'ROOM_SIZE' => 3 )



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2  verify request data error list code is 10-006 



[[ TC6944 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category= 11113(attribute type is checkbox)

2. update merchandise unset cat_attr 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6945 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

set requestData.cat_attr=array( 'ROOM_SIZE_1' =>"23000_ROOM_SIZE_B")



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6946 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category=11114(attribute type is radiobox)

2. update merchandise 

set requestData.cat_attr=array('ROOM_TYPE' => 'undefined radiobox value1')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-003 



[[ TC6947 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category=11115(attribute don't have any validated rule)

2. update merchandise 

set requestData.cat_attr=array('ROOM_SIZE' => 'undefined radiobox value1')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2 verify response data error list code 10-002

[[ TC6948 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category=11114(attributes type radiobox)

2. update merchandise 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6949 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise

2. update merchandise 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6950 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise  set category=11113(attributes type checkbox)

2. update merchandise 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6951 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category=11114(attributes type radiobox)

2. update merchandise 

 unset requestData.cat_attr



Expected Results 

========== 

1.1~2.1 http response code is 200



[[ TC6952 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     set cat_attr=array('ROOM_TYPE' => 'undefined radiobox value1' ) 



Expected Results 

========== 

1.1  http response code is 200

1.2 verify response data error list code is 10

[[ TC6953 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     set cat_attr=array('ROOM_TYPE_A' => ' radiobox value1' ) 



Expected Results 

========== 

1.1  http response code is 200

1.2 verify response data error list code is 10

[[ TC6954 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set category=11114 (attribute type is radiobox)

     set cat_attr=array('ROOM_TYPE' => array('radiobox value1'，'radio value2' ) ) 



Expected Results 

========== 

1.1  http response code is 200

1.2 verify response data error list code is 10

[[ TC6955 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise  set category=11113(attributes type checkbox)

2. update merchandise 

 set requestData.cat_attr=array('ROOM_TYPE' => 'undefined checkbox value1')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2  verify response data error list code 10-003

[[ TC6956 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise  set category=11113(attributes type checkbox)

2. update merchandise 

 set requestData.cat_attr=array('ROOM_TYPE_A' => 'invalid attribute name')



Expected Results 

========== 

1.1~2.1 http response code is 200

2.2  verify response data error list code 10-002

[[ TC6957 ]]


========== 

URI Syntax:  

update: (PUT)/v1/eca/merchandise/update//?user_update=



Testing Steps: 

========== 

1. insert merchandise set category=11114(attributes type radiobox)

2. update merchandise 

 set requestData.cat_attr =array('ROOM_TYPE' => array( 'radiobox value1'， 'radio value2'))



Expected Results 

========== 

1.1~2.1 http response code is 200

  2.2 verify response data error list code 10-005 



[[ TC6958 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise set product_ids = array('789'，'1456'，'123')



Expected Results 

========== 

1. http response code is 200



[[ TC6959 ]]


========== 

URI Syntax:  

insert: (POST)/v1/eca/merchandise/insert/



Testing Steps: 

========== 

1. insert merchandise unset product_ids



Expected Results 

========== 

1. http response code is 200



[[ TC7018 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit bidding merchandise set sellerId=sellerId1&nbsp; and get mid1

2.submit bidding merchandise set sellerId=sellerId2 and get mid2

 3.shelve and  place bid  separately

 4.query bidder bid record list&nbsp; 

 set requestUrl-&gt;bidder_id=buyer1，ccode，property and seller_id=sellerId1



Expected Result:

4. http response code 200 

    verify response_data-&gt;query_bidder_results count=1

    verify response data-&gt;query_bidder_results

[[ TC7020 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step: 

 1.submit two bidding merchandise set same&nbsp; sellerId=sellerId1&nbsp; and get mid1，mid1

 3.shelve and  place bid  separately

 4.query bidder bid record list&nbsp; 

 set requestUrl-&gt;bidder_id=buyer1，ccode，property and seller_id=sellerId1



Expected Result:

4. http response code 200 

    verify response_data-&gt;query_bidder_results count=2

    verify response data-&gt;query_bidder_results

[[ TC7021 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step:

1.&nbsp;&nbsp; submit a bidding merchandise set sid='sid11111'&nbsp; get mid1&nbsp; and shelve it

2.&nbsp;&nbsp; bidder1&nbsp; place bid 

3.&nbsp; query bidder1&nbsp; bid record list&nbsp;&nbsp; set seller_id='sid222222'



Expected Result:

1.1~3.1&nbsp; http response code 200

3. 2. verify response data&nbsp; query_bidder_results&nbsp; hava 0 record



</span></span>

[[ TC7025 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1. create product and specName，specValue， model

2. delete product 



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 verify response json schema OK



[[ TC7026 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product unset url productId



Expected Results 

=======

1. http response code 405



[[ TC7027 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId='測'



Expected Results 

=======

1. http response code 404

[[ TC7028 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId='string'



Expected Results 

=======

1. http response code 404



[[ TC7029 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId='!@#$'



Expected Results 

=======

1. http response code 404



[[ TC7030 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId={"a":"1"，"b":"2"}



Expected Results 

=======

1. http response code 404



[[ TC7031 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId=[12]



Expected Results 

=======

1. http response code 404



[[ TC7032 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId=1234567890123



Expected Results 

=======

1. http response code 404



[[ TC7033 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId=123456789012345678901



Expected Results 

=======

1. http response code 404



[[ TC7034 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1.  delete product set productId=99999999999



Expected Results 

=======

1. http response code 404



[[ TC7035 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1. create product and specName，specValue， model

2. publish product

3. delete product 



Expected Results 

=======

1.1~2.1 http response code is 200

3.1 http response code is 400



[[ TC7036 ]]


=======

URI Syntax:  

delete product: (DELETE)/v1/product_egs/product/



Testing Steps: 

=======

1. create product and specName，specValue， model

2. delete product 

3. update by productId set required data



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 verify response json schema OK

3.1 http response code is 404



[[ TC7037 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product 

2. get product by productId



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 veirfy response data 



[[ TC7038 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product set long description

2. get product by productId set desc=1



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 veirfy response data 



[[ TC7039 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId 



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 veirfy response json schema 



[[ TC7040 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId='99999999999' 



Expected Results 

=======

1.1 http response code is 404



[[ TC7041 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId='@#$%[^)_' 



Expected Results 

=======

1.1 http response code is 404



[[ TC7042 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId='this is test' 



Expected Results 

=======

1.1 http response code is 404



[[ TC7043 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId=[1，2，3] 



Expected Results 

=======

1.1 http response code is 404



[[ TC7044 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId={"a":"12"，"b":"dfd"，"c":"dfff"}



Expected Results 

=======

1.1 http response code is 404



[[ TC7045 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set productId='測'



Expected Results 

=======

1.1 http response code is 404

[[ TC7046 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. get product set  request method is POST



Expected Results 

=======

1.1 http response code is 405



[[ TC7047 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc='測'



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400

[[ TC7048 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc='string'



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7049 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc={"a":"1"，"b":"2"}



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7050 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc=[12]



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7051 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc='!@#$%'



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7052 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc=2



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7053 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with all fields

2. get product by productId set desc=0



Expected Results 

=======

1.1~2.1 http response code is 200

2.2  verify response data not exist long description



[[ TC7054 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with all fields

2. get product by productId set desc=1



Expected Results 

=======

1.1~2.1 http response code is 200

2.2  verify response data exist long description



[[ TC7055 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc=1



Expected Results 

=======

1.1~2.1 http response code is 200

2.2  verify response data not exist long description



[[ TC7056 ]]


=======

URI Syntax:  

get product: (GET)/v1/product_egs/product/?desc=



Testing Steps: 

=======

1. create product with required fields

2. get product by productId set desc=null



Expected Results 

=======

1.1 http response code is 200

2.1 http response code is 400



[[ TC7096 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specValue for specName with required



parameters







B:syntax



URI: /v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



delete specName





Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description=""OK""



[[ TC7097 ]]




==========



A.Data



1. Create a specName for product with required parameters



2. Create a models for specName with required parameters







parameters







B:syntax



URI:  /v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



update specName





Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description=""OK""



[[ TC7098 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required



4. Create a models for product with required parameters，set saleQuanity=10







parameters



B:syntax



URI:/v1/product_egs/get_products_detail?ids=



Method:GET







Testing Steps:



==========



1.get detail data of products 







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description=""OK""



4. verify product，model，specName，specValues，image



[[ TC7099 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for specName with required



4. Create a models for product with required parameters，set saleQuanity=10







parameters



B:syntax



URI:/v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create models







Expected Results



==========



1. http Response Code is 200



2. status->code=20100



3. verify description="Created"



[[ TC7100 ]]




==========



A.Data



1.Create a specName with required parameters



2.get a specNameId with required parameters



3.Create a models for specValue with required parameters



4.Create a specValue for product with required



5.get a specValueId with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//spec_name//spec_value/



Method:GET







Testing Steps:



==========



get specValue







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7101 ]]




==========



A.Data



1.Create a specName  for product with required parameters



2.Create a model for specValue with required parameters



3.Create a specValue for product with required







parameters



B:syntax



URI:/v1/product_egs/product//spec_name//spec_value/



Method:DELETE







Testing Steps:



==========



delete single product specValue







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7102 ]]




==========



A.Data



1.Create a product  with required parameters



2.Create a specName for product with required







parameters



B:syntax



URI:/v1/product_egs/product//spec_name//spec_value/



Method:DELETE







Testing Steps:



==========



get product specName







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7103 ]]




==========



A.Data



1.Create a product with required parameters



2.Create a stock model for product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.create adjust stock model



2.update stock







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify beforeQuantity and aftrQuantity and saleQuantity



[[ TC7104 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a model with required parameters，set saleQuanity=10



3. Create a model for product with required



4. publish the product 





parameters



B:syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update batch stock of the a models







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify beforeQuantity and aftrQuantity for all



[[ TC7105 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a spec_name with required parameters，set saleQuanity=10



3. Create a spec_name for product with required



4. publish the product 





parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName of the a models



2.update mutiplespecName of the product







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7106 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specValueId for product with required parameters



3. Create a models for spec_value_id with required parameters



4. Create a model for product with required parameters





parameters



B:syntax



URI:/v1/product_egs/product//models



Method:PUT







Testing Steps:



==========



1.update mutiple models of the a models



2.update mutiple model of the product







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7107 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName with required parameters



3. Create a specName for product with required parameters



4. Create a specValue with required parameters



5. Create a specValue for product with required parameters



6. Create a model for specValueId with required parameters



7. Create a model for product with required parameters





parameters



B:syntax



URI: /v1/product_egs/product//detail/?desc=



Method:GET







Testing Steps:



==========



1.get product detail desc of the a product







Expected Results



==========



1. http Response Code is 304



[[ TC7108 ]]




==========



A.Data



1. Create a specName for product with required parameters



2. Create a specValue with required parameters







parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_value



Method:POST







Testing Steps:



==========



1.create specValue



2.get specValue







Expected Results



1.status->code=20100



  verify description="create"



2. http Response Code is 200



   status->code=20000



  verify description="OK"



[[ TC7109 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required parameters



4. Create a model for product with required parameters







parameters



B:syntax



URI: /v1/product_egs/product/



Method:DELETE







Testing Steps:



==========



delete product of the product







Expected Results



1.http Response Code is 200



2.status->code=20000



[[ TC7110 ]]




==========



A.Data



1. Create a specName for product with required parameters



2. Create a model for spec_value with required parameters



3. Create a spec_value for product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//spec_name//spec_value



Method:DELETE







Testing Steps:



==========



delete all product spec values of spec name







Expected Results



1.http Response Code is 200



2.status->code=20000



3.verify description="OK"



4.verify specValues not exist



[[ TC7111 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a model for mutiple specName with required parameters



3. Create a mutiple specName for product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



create multiple product spec name of the model







Expected Results



1.http Response Code is 200



2.status->code=20100



3.verify code="0"



4.verify detail="OK"



[[ TC7112 ]]




==========



A.Data



1. Create a model for product with required parameters



2. publish product







parameters



B:syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



unpublish of the product







Expected Results



1.http Response Code is 200



2.status->code=20000



3.verify code="0"



4.verify status=2



[[ TC7113 ]]




==========



A.Data



1. Create 3 model for product with required parameters







parameters



B:syntax



URI: /v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



query product model stock of the model







Expected Results



1.http Response Code is 200



2.status->code=20000



3.verify code="0"



[[ TC7114 ]]




==========



A.Data



1. Create a spec_name for product with required parameters



1. Create a model for spec_values with required parameters







parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_values



Method:POST







Testing Steps:



==========



create multiple product spec value







Expected Results



1.http Response Code is 200



2.status->code=20100



[[ TC7115 ]]




==========



A.Data



1. Create a model for product with required parameters



2. Create a product with required parameters







parameters



B:syntax



URI: /v1/product_egs/product/



Method:GET







Testing Steps:



==========



get product of the model







Expected Results



1.http Response Code is 304



[[ TC7116 ]]




==========



A.Data



1. Create a model for product with required parameters



2. Create a product with required parameters







parameters



B:syntax



URI:  /v1/product_egs/product/



Method:PUT







Testing Steps:



==========



update product of the model







Expected Results



1.http Response Code is 200



[[ TC7117 ]]




==========



A.Data



1. Create a product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



create multiple product spec name of the model







Expected Results



1.http Response Code is 200



2.status->code=20100



3.verify code="0"



4.verify detail="OK"



[[ TC7118 ]]




==========



A.Data



1. Create a model for product with required parameters







parameters



B:syntax



URI:  /v1/product_egs/product



Method:POST







Testing Steps:



==========



create product of the model







Expected Results



1.http Response Code is 200



[[ TC7119 ]]




==========



A.Data



1. Create a spec_name for product with required parameters



2. Create a model for spec_values with required parameters



3. Create a spec_values for product with required parameters





parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_values



Method:PUT







Testing Steps:



==========



1.update multiple  specValues of the model



2.update multiple  specValues of the product







Expected Results



1.http Response Code is 200



2.create status->code=20100



3.update status->code=20000



[[ TC7120 ]]




==========



A.Data



1. Create a product with required parameters





parameters



B:syntax



URI: //v1/product_egs/product/query_by_sid/?ccode=&property=&status=&categoryId=&propertyStatus=&customDefinedId=&shortCustomField1=&shortCustomField2=&shortCustomField3=&b=&n=



Method:GET







Testing Steps:



==========



query product by Store id







Expected Results



1.http Response Code is 200



2.verify status->code=20000



3.verify description="OK"



4. verify productId，ccode，property，status value



[[ TC7121 ]]




==========



A.Data



1.Create a product with required parameters



2.Create a specName for product with required parameters



3.Create a specValue for product with required parameters



4.Create a model for product with required parameters







parameters



B:syntax



URI: /v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product models of product







Expected Results



1.http Response Code is 200



2.verify status->code=20000



3.verify description="OK"



[[ TC7122 ]]




==========



A.Data



1.Create a specName for product with required parameters



2.Create a model for specValue for product with required parameters



3.Create a specValue for product with required parameters



4.Create a model for specValueId for product with required parameters



5.Create a model for product with required parameters







parameters



B:syntax



URI:  /v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



get model of the product







Expected Results



1.http Response Code is 304



[[ TC7123 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a spec_name with required parameters，set saleQuanity=10





parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName of the a models







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify specName value



[[ TC7124 ]]




==========



A.Data



1. Create a spec_name for product with required parameters



2. Create a spec_values for product with required parameters





parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_values



Method:PUT







Testing Steps:



==========



1.update multiple  specValues of the model







Expected Results



1.http Response Code is 200



2.create status->code=20100



3.update status->code=20000



[[ TC7125 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a model for mutiple specName with required parameters



3. Create a mutiple specName for product with required parameters



4.Create a specValue for product with required parameters



5.Create a models for spec_value_id with required parameters





parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



create multiple product spec name of the model







Expected Results



1.http Response Code is 200



2.create status->code=20100



3.get status->code=20000



[[ TC7126 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a mutiple single spec_name with required parameters，set saleQuanity=10



3. Create a mutiple spec_name for product with required



4. Create a spec_value for product with required



5. Create a model for spec_value_id with required



6. Create a model for product with required





parameters



B:syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiplespecName of the product







Expected Results



==========



1. http Response Code is 200



2. create status->code=20100



3. update status->code=20000



[[ TC7127 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a model for specValueId with required parameters



3. Create a models for product with required parameters



4. Create a model for product with required parameters





parameters



B:syntax



URI:/v1/product_egs/product//models



Method:PUT







Testing Steps:



==========



1.update mutiple model of the product







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



[[ TC7128 ]]




==========



A.Data



1.Create a model for product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish of the product



2.get product







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description=""OK""



4. verify status is 1



[[ TC7129 ]]




==========



A.Data



1.Create a product with required parameters



2.Create a stock model for product with required parameters



3.Create a  model for product with required parameters，set quantity="1"







parameters



B:syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description=""OK""



4. verify beforeQuantity and aftrQuantity and saleQuantity



[[ TC7130 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required



4. Create a models for spec_value_id with required parameters，set saleQuanity=10







parameters



B:syntax



URI:/v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create product of the model







Expected Results



==========



1. http Response Code is 200



2. status->code=20100



[[ TC7131 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required



4. Create a models for product with required parameters，set saleQuanity=10







parameters



B:syntax



URI:/v1/product_egs/product//detail/?desc=



Method:GET







Testing Steps:



==========



1.get product detail data







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify product，model，specName，specValues，image



[[ TC7132 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required



4. Create a models for spec_value_id with required parameters，set saleQuanity=10







parameters



B:syntax



URI:/v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create product of the model







Expected Results



==========



1. http Response Code is 200



2. status->code=20100



[[ TC7133 ]]




==========



A.Data



1. Create a spec_name for product with required parameters



1. Create a spec_values for product with required parameters







parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_values



Method:POST







Testing Steps:



==========



create multiple product spec value







Expected Results



1.http Response Code is 200



2.status->code=20100



[[ TC7134 ]]




==========



A.Data



1. Create a model for product with required parameters



2. Create a product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product/



Method:GET







Testing Steps:



==========



get product







Expected Results



1. http Response Code is 200



2. status->code=20000



[[ TC7135 ]]




==========



A.Data



1. Create a model for product with required parameters



2. publish product







parameters



B:syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



unpublish of the product







Expected Results



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value



[[ TC7136 ]]




==========



A.Data



1. Create a product with required parameters



2. Create a specName for product with required parameters



3. Create a specValue for product with required parameters



4. Create a model for product with required parameters









parameters



B:syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



get product of the model







Expected Results



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7137 ]]




==========



A.Data



1. Create a product with required parameters



2. Create 3 specName for product with required parameters







parameters



B:syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



delete all spec names of product







Expected Results



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



[[ TC7138 ]]




==========



A.Data



1. Create a model for product with required parameters







parameters



B:syntax



URI:  /v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



update product of the model







Expected Results



1.http Response Code is 200



[[ TC7139 ]]




==========



A.Data



1. Create a product with required parameters



2.Create a spec_name for product with required parameters



3.Create a spec_value for product with required parameters



4.Create a model for product with required parameters





parameters



B:syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



delete single product of the model







Expected Results



1.http Response Code is 200



2.delete  status->code=20000



3.verify description="OK"



4.get status->code=40400



[[ TC7140 ]]




==========



A.Data



1. Create a specName for product with required parameters



2.Create a models for spec_value with required parameters



3.Create a spec_value for product with required parameters





parameters



B:syntax



URI: /v1/product_egs/product//spec_name//spec_value/



Method:PUT







Testing Steps:



==========



update spec value of the product







Expected Results



1.http Response Code is 200



2. status->code=20000



3. verify description="OK"



c

[[ TC7141 ]]




==========



A.Data



1. Create a product with required parameters



2.Create a models for spec_name with required parameters





parameters



B:syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



create spec name of the product







Expected Results



1.http Response Code is 200



[[ TC7150 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model set specValueIdList is one







Expected Results



==========



1. http Response Code is 201



[[ TC7151 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model set specValueIdList is three







Expected Results



==========



1. http Response Code is 201



[[ TC7152 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model set pecValueIdList and saleQuantity is null





Expected Results



==========



1.http Response Code is 400



[[ TC7153 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set specValueIdList is empty



2.create mutiple model set saleQuantity is empty







Expected Results



==========



1.1-1.2  http Response Code is 400



[[ TC7154 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is "test"



2.create mutiple model set each field is "test"







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7155 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is [12]



2.create mutiple model set each field is [12]







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7156 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is {"a":1}



2.create mutiple model set each field is {"a":1}







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7157 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is '1.23'



2.create mutiple model set specValueIdList is '1.23'



3.create mutiple model set saleQuantity notifyQuantity  is '1.23'







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



3.http Response Code is 201



[[ TC7158 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is '-1'



2.create mutiple model set specValueIdList，saleQuantity is -1



3.create mutiple model set notifyQuantity ， salePrice ， marketPrice ， costPrice is -1







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



3.http Response Code is 201



[[ TC7159 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is 0



2.create mutiple model set specValueIdList is 0



3.create mutiple model set saleQuantity ， notifyQuantity ， salePrice ， marketPrice ， costPrice is 0







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



3.http Response Code is 201



[[ TC7160 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is null



2.create mutiple model set specValueIdList ，saleQuantity is null







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7161 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set salePrice，marketPrice，costPrice，customDefinedId，shortCustomField，customField1，barcode，searchableCustomDefinedId is null







Expected Results



==========



1.http Response Code is 201



[[ TC7162 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set customDefinedId，customField1，shortCustomField，searchableCustomDefinedId is "!@#"



2.create mutiple model set barcode is "!@#"







Expected Results



==========



1.http Response Code is 201



2.http Response Code is 400



[[ TC7163 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set 9  specValueIdList







Expected Results



==========



1.http Response Code is 201



[[ TC7164 ]]




==========



A.Data

1. Create multi product with required parameters



2. Create aspecValueId for product with required parameters



3. Create a model for specName with required



4. Create a specName for product with required parameters



5. Create a model for pecValue with required parameters



6. Create a specValue for product with required parameters



parameters



B:syntax



URI: /v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.delete specValue for product



2.create mutiple model for product







Expected Results



==========



1. http Response Code is 400



[[ TC7165 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model spec_valud_id count is not match specName count







Expected Results



==========



1.http Response Code is 400



[[ TC7166 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create 2 productId and with prod_id2 assign spec_value_id



2.create mutiple model with prod_id1







Expected Results



==========



1.http Response Code is 400



[[ TC7167 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.with productId assign two spec_value_id



2.create mutiple model with one spec_value_id







Expected Results



==========



1.http Response Code is 400



[[ TC7168 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model without currency







Expected Results



==========



1.http Response Code is 400



[[ TC7169 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model without currency and delete productId







Expected Results



==========



1.http Response Code is 404



[[ TC7170 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



create mutiple model without currency and delete after test productId







Expected Results



==========



1.http Response Code is 400



[[ TC7171 ]]




==========



syntax



URI:/v1/product_egs/product//models



Method:POST







Testing Steps:



==========



1.create mutiple model set productId is Failed value



2. create mutiple model set other field is failed value





Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7172 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model set specValueIdList is one







Expected Results



==========



1. http Response Code is 201



[[ TC7173 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId and specValueIdList is empty



2.create model set saleQuantity is empty



3.create model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，costPrice，sCustField1，custField1，searchableCustomDefinedId is empty







Expected Results



==========



1. http Response Code is 400



2. http Response Code is 400



3. http Response Code is 201



[[ TC7174 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model respectively set specValueIdList，saleQuantity is without for all the parameters



2.create model respectively set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，customField1，shortCustomField1，barcode，searchableCustomDefinedId is empty for all the parameters







Expected Results



==========



1. http Response Code is 400



2. http Response Code is 201



[[ TC7175 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model all







Expected Results



==========



1. http Response Code is 201



[[ TC7176 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is '!@，'



2.create model respectively set saleQuantity，notifyQuantity ，salePrice， marketPrice， costPrice is "!@#%[，/"



3.create model respectively set customDefinedId，sCustField1，custField1，barcode，searchableCustomDefinedId is "!@#%[，/"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 201



[[ TC7177 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is '??'



2.create model respectively set saleQuantity，notifyQuantity ，salePrice， marketPrice， costPrice is "??"



3.create model respectively set customDefinedId，sCustField1，custField1，barcode，searchableCustomDefinedId is "??"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 201



[[ TC7178 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is 'Sprint'



2.create model respectively set saleQuantity，notifyQuantity ，salePrice， marketPrice， costPrice is "Sprint"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7179 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is {"a":"1"，"b":"2"}



2.create model respectively set specValueIdList ，saleQuantity，notifyQuantity ，salePrice， marketPrice，costPrice，customDefinedId ，sCustField1，custField1，barcode，searchableCustomDefinedId is {"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7180 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is '[12]'



2.create model respectively set saleQuantity，notifyQuantity ，salePrice， marketPrice， costPrice，customDefinedId，sCustField1，custField1 is '[12]'



3.create model respectively set barcode，searchableCustomDefinedId is [12]







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 400



[[ TC7181 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set productId is out of scope



2.create model respectively set saleQuantity，notifyQuantity ，salePrice， marketPrice， costPrice，customDefinedId，custField1，barcode，searchableCustomDefinedId is '[12]'







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7182 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create one productId for create model twice







Expected Results



==========



1. http Response Code is 201



[[ TC7183 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create one productId for create model Nine







Expected Results



==========



1. http Response Code is 201



[[ TC7184 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model set specValueIdList out of scope(99999999999)







Expected Results



==========



1. http Response Code is 400



[[ TC7185 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create model set 9  specValueIdList







Expected Results



==========



1.http Response Code is 201



[[ TC7186 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model input productId failed value







Expected Results



==========



1. http Response Code is 404



[[ TC7187 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model request method is put







Expected Results



==========



1. http Response Code is 405



[[ TC7188 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model set specValueIdList out of scope(1234567890123)







Expected Results



==========



1. http Response Code is 400



[[ TC7189 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create mutiple model spec_valud_id count is not match specName count







Expected Results



==========



1.http Response Code is 400



[[ TC7190 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.create two productId and with one assign specValueIdList



2. create model Request with another productId







Expected Results



==========



2. http Response Code is 400



[[ TC7191 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



1.with productId assign two spec_value_id



2.create model with one spec_value_id







Expected Results



==========



1.http Response Code is 400



[[ TC7192 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:POST







Testing Steps:



==========



create model without currency







Expected Results



==========



1. http Response Code is 400



[[ TC7193 ]]


Url syntax:

Request URI: /v1/egs/merchandise/bid_query_bidder_bid_record_list/{bidder_id}?{param}

method:GET



Step:

1.&nbsp;&nbsp; submit a bidding merchandise set sid='sid11111'&nbsp; get mid1&nbsp; and shelve it

2.&nbsp;&nbsp; bidder1&nbsp; place bid 

3.&nbsp; query bidder1&nbsp; bid record list&nbsp;&nbsp; set seller_id='sid11111' (not urlencode)



Expected Result:

1.1~3.1&nbsp; http response code 200

3. 2. verify response data&nbsp; query_bidder_results&nbsp; hava 0 record



</span></span>

[[ TC7195 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is "?"



2. delete single model set modelId is "?"







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7196 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is "Sprint"



2. delete single model set modelId is "Sprint"







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7197 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is "@#!"



2. delete single model set modelId is "@#!"







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7198 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is {"a":"1"，"b":"2"}



2. delete single model set modelId is {"a":"1"，"b":"2"}







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7199 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is '[12]'



2. delete single model set modelId is '[12]'







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7200 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



1. delete single model set productId is out of scope(1234567890123)，(123456789012)



2. delete single model set modelId is out of scope(1234567890123)，(123456789012)







Expected Results



==========



1.1-1.2. http Response Code is 404



[[ TC7201 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



delete single model set product status is publish







Expected Results



==========



1. http Response Code is 409



[[ TC7202 ]]




==========



syntax



URI: /v1/product_egs/product//model/



Method:DELETE







Testing Steps:



==========



delete single model requested productId not create productId







Expected Results



==========



1. http Response Code is 404



[[ TC7203 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model for two create product model







Expected Results



==========



1. http Response Code is 200



[[ TC7204 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is empty







Expected Results



==========



1. http Response Code is 404



[[ TC7205 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is '!@，'







Expected Results



==========



1. http Response Code is 404



[[ TC7206 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is '?'







Expected Results



==========



1. http Response Code is 404



[[ TC7207 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is 'Sprint'







Expected Results



==========



1. http Response Code is 404



[[ TC7208 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is {"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7209 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is '[12]'







Expected Results



==========



1. http Response Code is 404



[[ TC7210 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is out of scope(1234567890123)







Expected Results



==========



1. http Response Code is 404



[[ TC7211 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is out of scope(123456789012345678901)







Expected Results



==========



1. http Response Code is 404



[[ TC7212 ]]




==========



syntax



URI: /v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set product status is publish







Expected Results



==========



1. http Response Code is 409



[[ TC7213 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model set productId is out of scope (99999999999)







Expected Results



==========



1. http Response Code is 404



[[ TC7214 ]]




==========



syntax



URI:/v1/product_egs/product//model



Method:DELETE







Testing Steps:



==========



delete all product model







Expected Results



==========



1. http Response Code is 200



[[ TC7215 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



get model data Schema and stockId Exist 







Expected Results



==========



1. http Response Code is 200



[[ TC7216 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set modelId is empty



2.get model set productId is empty







Expected Results



==========



1. http Response Code is 405



2. http Response Code is 404



[[ TC7217 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId ，productId is '!@，'







Expected Results



==========



1. http Response Code is 404



[[ TC7218 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId ，productId is '?'







Expected Results



==========



1. http Response Code is 404



[[ TC7219 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId ，productId is {"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7220 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId，productId is '[12]'







Expected Results



==========



1. http Response Code is 404



[[ TC7221 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId(123456) ，productId(999999999999) is out of scope







Expected Results



==========



1. http Response Code is 404



[[ TC7222 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model with all parameters but is not corresponding







Expected Results



==========



1. http Response Code is 404



[[ TC7223 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId ，productId is out of scope (123456789012345678901)and(1234567890123)







Expected Results



==========



1. http Response Code is 404



[[ TC7224 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model set  modelId，productId is 'thisisatest'







Expected Results



==========



1. http Response Code is 404



[[ TC7225 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model data Schema create required data







Expected Results



==========



1. http Response Code is 200



[[ TC7226 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:GET







Testing Steps:



==========



1.get model request method is POST







Expected Results



==========



1. http Response Code is 405



[[ TC7227 ]]


<span style="display: table; width: 100%; table-layout: fixed; height: 100%;"><span style="display: table; width: 100%; table-layout: fixed;">Pre-Condition: 

========== 

URI Syntax: 

 Request URI: /v1/egs/merchandise/update//?user_update=

 Request Method: PUT

 

Testing Steps: 

========== 

1. submit a bidding merchandise&nbsp; get mid

2. shelve merchandise

3. place bid&nbsp; set max_price &lt; reserve_price

4. close bid merchandise 

5. update merchandise set&nbsp; bid_item['available_quantity'] = 1977

 6. get merchandise 



Expected Results 

========== 

1.1-6.1 http response 200

4.2 verify merchandise status is end ， and bid_item statu is 4

5.2 verify update is success

6.2 verify response data bid_item['total_quantity'] = 1977

</span></span>

[[ TC7261 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock all products and models are normal







Expected Results



==========



1. http Response Code is 200



[[ TC7262 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock only model







Expected Results



==========



1. http Response Code is 400



[[ TC7263 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock only productId







Expected Results



==========



1. http Response Code is 400



[[ TC7264 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set productId=??







Expected Results



==========



1. http Response Code is 400



[[ TC7265 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=??







Expected Results



==========



1. http Response Code is 400



[[ TC7266 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set productId=null







Expected Results



==========



1. http Response Code is 400



[[ TC7267 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=null







Expected Results



==========



1. http Response Code is 400



[[ TC7268 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=1234567890123(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7269 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=1234567890123(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7270 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=product Id







Expected Results



==========



1. http Response Code is 400



[[ TC7271 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=model Id







Expected Results



==========



1. http Response Code is 400



[[ TC7272 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set productId=[1，2]







Expected Results



==========



1. http Response Code is 400



[[ TC7273 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=[1，2]







Expected Results



==========



1. http Response Code is 400



[[ TC7274 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set productId={"a":1，"b":2}







Expected Results



==========



1. http Response Code is 400



[[ TC7275 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId={"a":1，"b":2}







Expected Results



==========



1. http Response Code is 400



[[ TC7276 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=99999999999(out of scope)







Expected Results



==========



1. http Response Code is 200



[[ TC7277 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set one productId=99999999999(out of scope)







Expected Results



==========



1. http Response Code is 200



[[ TC7278 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set modelId=99999999999(out of scope)







Expected Results



==========



1. http Response Code is 200



[[ TC7279 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock  set one modelId=99999999999(out of scope)







Expected Results



==========



1. http Response Code is 200



[[ TC7280 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock set productId and modelId is no corresponding







Expected Results



==========



1. http Response Code is 200



[[ TC7281 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock set models out of scope(199)







Expected Results



==========



1. http Response Code is 200



[[ TC7282 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock set models out of scope(200)







Expected Results



==========



1. http Response Code is 400



[[ TC7283 ]]




==========



syntax



URI:/v1/product_egs/query_models_stock



Method:PUT







Testing Steps:



==========



1.query product model stock set productId and modelId is null







Expected Results



==========



1. http Response Code is 400



[[ TC7284 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model with all field







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7285 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model modelId and specValueIdList







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7286 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model respectively set productId and barcode and searchableCustomDefinedId is empty







Expected Results



==========



1. http Response Code is 400



[[ TC7287 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model set customDefinedId and customField1 and shortCustomField1 is '"??"' 



2.update multiple model respectively set barcode and searchableCustomDefinedId is '"??"'







Expected Results



==========



1. http Response Code is 200



2. http response code is 400



[[ TC7288 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple respectively model set  productId and modelId is out of scope(999999999999) 



2.update multiple model set specValueIdList is out of scope(999999999999)



3.update multiple model set customDefinedId("test1"，128) and customField1("test1"，128) and  shortCustomField1("test2"，20) and searchableCustomDefinedId (("test1"，128))is out of scope







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



3. http response code is 200



[[ TC7289 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple respectively model set  productId and modelId is out of scope(9999999999999) 



2.update multiple model set specValueIdList is out of scope(9999999999999)



3.update multiple model set customDefinedId("test1"，129) and customField1("test1"，129) and  shortCustomField1("test2"，21)，notifyQuantity，salePrice，marketPrice，costPrice(1234567890123)，barcode(12345678901234)，searchableCustomDefinedId (("test1"，129))is out of scope







Expected Results



==========



1. http Response Code is 404



2.2-3.1. http response code is 400



[[ TC7290 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set modelId，barcode is '""'



2.update multiple model respectively set customDefinedId2='""' ，custField112='""'，sCustField12='""'

notifyQuantity2="null" salePrice2="null" marketPrice2="null" costPrice2="null" searchableCustomDefinedId='""'







Expected Results



==========



1. http Response Code is 400



2. http response code is 200



[[ TC7291 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId is "test"



2.update multiple model respectively set modelId，specValueIdList，notifyQuantity，salePrice，marketPrice，costPrice，barcode，searchableCustomDefinedId is '"test"'







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



[[ TC7292 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId is {"test":1}



2.update multiple model respectively set modelId，specValueIdList，notifyQuantity，salePrice，marketPrice，costPrice，barcode，searchableCustomDefinedId is {"test":1}







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



[[ TC7293 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId is [123]



2.update multiple model respectively set modelId，notifyQuantity，salePrice，marketPrice，costPrice，barcode，searchableCustomDefinedId is [123]







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



[[ TC7294 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId，modelId is 1.23



2.update multiple model respectively specValueIdList，barcode is 1.23



3.update multiple model notifyQuantity is 1.23







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



3. http response code is 200



[[ TC7295 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set one specValueIdList='"test"'







Expected Results



==========



1. http Response Code is 400



[[ TC7296 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set one specValueIdList='"1.23"'







Expected Results



==========



1. http Response Code is 400



[[ TC7297 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId，modelId is -1



2.update multiple model respectively specValueIdList，barcode is -1



3.update multiple model notifyQuantity，salePrice，marketPrice，costPrice，searchableCustomDefinedId is -1







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



3. http response code is 200



[[ TC7298 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId，modelId is 0



2.update multiple model respectively specValueIdList，barcode is 0



3.update multiple model notifyQuantity，salePrice，marketPrice，costPrice，searchableCustomDefinedId is 0







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



3. http response code is 200



[[ TC7299 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model  set productId is "null"



2.update multiple model set modelId is "null"



3.update multiple model set customDefinedId，customField1，shortCustomField1，notifyQuantity，salePrice，marketPrice，costPrice2，barcode，searchableCustomDefinedId is "null"







Expected Results



==========



1. http Response Code is 404



2. http response code is 400



3. http response code is 200



[[ TC7300 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model set customDefinedId，customField1，shortCustomField1，searchableCustomDefinedId is '"@#!"'



2.update multiple model set barcode is '"@#!"'







Expected Results



==========



1. http Response Code is 200



2. http response code is 400



[[ TC7301 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model set ten specValueIdList







Expected Results



==========



1. http Response Code is 200



[[ TC7302 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model delete specValue single







Expected Results



==========



1. http Response Code is 400



[[ TC7303 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1. update mutiple models specName with specValue is no corresponding







Expected Results



==========



1. http Response Code is 400



[[ TC7304 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model productId is other productId







Expected Results



==========



1. http Response Code is 400



[[ TC7305 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.create specValueIdList and update specValueIdList is not same







Expected Results



==========



1. http Response Code is 400



[[ TC7306 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model delete productId







Expected Results



==========



1. http Response Code is 405



[[ TC7307 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model set models there are productId







Expected Results



==========



1. http Response Code is 400



[[ TC7308 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.update multiple model set models there are saleQuantity filed







Expected Results



==========



1. http Response Code is 400



[[ TC7309 ]]




==========



syntax



URI:/v1/product_egs/product//models/



Method:PUT







Testing Steps:



==========



1.create models dump spec_value_id



2. update mutiple models







Expected Results



==========



2. http Response Code is 400



[[ TC7310 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set data after set product status is publish







Expected Results



==========



1. http Response Code is 200



[[ TC7311 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock product status is publish create batch different productId and modelId







Expected Results



==========



1. http Response Code is 200



[[ TC7312 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish  3 times create batch different productId and modelId







Expected Results



==========



1. http Response Code is 200



[[ TC7313 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status  set productId and modelId and quantity is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7314 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock  publish status set note is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7315 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models one of the modelId is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7316 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models one of the modelId is not exist and not match







Expected Results



==========



1. http Response Code is 400



[[ TC7317 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models one of the quantity is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7318 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models two productId is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7319 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models two modelId is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7320 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models two quantity is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7321 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models productId is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7322 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models modelId is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7323 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set models quantity is not exist







Expected Results



==========



1. http Response Code is 400



[[ TC7324 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId="null"







Expected Results



==========



1. http Response Code is 400



[[ TC7325 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId="null"







Expected Results



==========



1. http Response Code is 400



[[ TC7326 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="null"







Expected Results



==========



1. http Response Code is 400



[[ TC7327 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set note="null"







Expected Results



==========



1. http Response Code is 400



[[ TC7328 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7329 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7330 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7331 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7332 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7333 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7334 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set note="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7335 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7336 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7337 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7338 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set note="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7339 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7340 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7341 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7342 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set note={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7343 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId=123456789012345678901(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7344 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity=123456789012345678901(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7345 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity=10000000000(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7346 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set note=(str，257)(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7347 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="-3"







Expected Results



==========



1. http Response Code is 400



[[ TC7348 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity=0







Expected Results



==========



1. http Response Code is 400



[[ TC7349 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set quantity="15"







Expected Results



==========



1. http Response Code is 400



[[ TC7350 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set productId=1234567890123(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7351 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock publish status set modelId=1234567890123(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7352 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.create two productId for model



2.batch subtract stock publish with other productId







Expected Results



==========



2. http Response Code is 400



[[ TC7353 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models is 201







Expected Results



==========



1. http Response Code is 400



[[ TC7354 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models with failed field







Expected Results



==========



1. http Response Code is 400



[[ TC7355 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set product status is not publish







Expected Results



==========



1. http Response Code is 400



[[ TC7356 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set set modelId duplicated







Expected Results



==========



1. http Response Code is 400



[[ TC7357 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models is 200







Expected Results



==========



1. http Response Code is 400



[[ TC7358 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7359 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7360 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7361 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models=""







Expected Results



==========



1. http Response Code is 400



[[ TC7362 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models=null







Expected Results



==========



1. http Response Code is 400



[[ TC7363 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models="string"







Expected Results



==========



1. http Response Code is 400



[[ TC7364 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models=5







Expected Results



==========



1. http Response Code is 400



[[ TC7365 ]]




==========



syntax



URI:/v1/product_egs/batch_subtract_stock



Method:PUT







Testing Steps:



==========



1.batch subtract stock set models=1.2







Expected Results



==========



1. http Response Code is 400



[[ TC7366 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId=""







Expected Results



==========



1. http Response Code is 404



[[ TC7367 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId=""







Expected Results



==========



1. http Response Code is 404



[[ TC7368 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7369 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7370 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set note is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7371 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId="?"







Expected Results



==========



1. http Response Code is 404



[[ TC7372 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId="sprint"







Expected Results



==========



1. http Response Code is 404



[[ TC7373 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId="!@#"







Expected Results



==========



1. http Response Code is 404



[[ TC7374 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7375 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId='[12]'







Expected Results



==========



1. http Response Code is 404



[[ TC7376 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId='123456789012345678901'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7377 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set productId='1234567890123'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7378 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId="?"







Expected Results



==========



1. http Response Code is 404



[[ TC7379 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId="sprint"







Expected Results



==========



1. http Response Code is 404



[[ TC7380 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId="@#!"







Expected Results



==========



1. http Response Code is 404



[[ TC7381 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7382 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId='[12]'







Expected Results



==========



1. http Response Code is 404



[[ TC7383 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId='123456789012345678901'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7384 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId='1234567890123'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7385 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7386 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation="sprint"







Expected Results



==========



1. http Response Code is 400



[[ TC7387 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation="@#!"







Expected Results



==========



1. http Response Code is 400



[[ TC7388 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7389 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set operation="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7390 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity="?"







Expected Results



==========



1. http Response Code is 400



[[ TC7391 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity="sprint"







Expected Results



==========



1. http Response Code is 400



[[ TC7392 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity="!@#"







Expected Results



==========



1. http Response Code is 400



[[ TC7393 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7394 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity='[12]'







Expected Results



==========



1. http Response Code is 400



[[ TC7395 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity=0







Expected Results



==========



1. http Response Code is 400



[[ TC7396 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity=-3







Expected Results



==========



1. http Response Code is 400



[[ TC7397 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity="10000000000"(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7398 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set note={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7399 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set note='[12]'







Expected Results



==========



1. http Response Code is 400



[[ TC7400 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set note=(str，257)(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7401 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7402 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock operation="subtract"







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7403 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set prod_id="12345678912"(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7404 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set modelId="12345678912"(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7405 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set set stock is not enough(quantity=15)







Expected Results



==========



1. http Response Code is 409



[[ TC7406 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set stock exceed the stock upper bound(quantity=999999999)







Expected Results



==========



1. http Response Code is 409



[[ TC7407 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set create productId and update productId is not the same







Expected Results



==========



1. http Response Code is 404



[[ TC7408 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock  set request method is POST







Expected Results



==========



1. http Response Code is 405



[[ TC7409 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock when peration="subtract" set request method is POST







Expected Results



==========



1. http Response Code is 405



[[ TC7410 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set peration="subtract" 







Expected Results



==========



1. http Response Code is 400



[[ TC7411 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set quantity="null" 







Expected Results



==========



1. http Response Code is 400



[[ TC7412 ]]




==========



syntax



URI:/v1/product_egs/product//model//adjust_stock



Method:PUT







Testing Steps:



==========



1.update stock set note="" 







Expected Results



==========



1. http Response Code is 400



[[ TC7413 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model with all field







Expected Results



==========



1.http Response Code is 200



2.veirfy response json schema 



[[ TC7414 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set notifyQuantity，salePrice，marketPrice，costPrice is "null"



2.update model set customDefinedId，shortCustomField1，customField1 is ""



3.update model set specValueIdList，barcode，searchableCustomDefinedId is ""







Expected Results



==========



1.1-2.1. http Response Code is 200



3.http Response Code is 400



[[ TC7415 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId=""



2.update model set modelId=""



3.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，specValueIdList，barcode，，searchableCustomDefinedId is without







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 405



3.http Response Code is 200



[[ TC7416 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId="string"



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，barcode is 'string'







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7417 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId and modelId is '[12]'



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，barcode，searchableCustomDefinedId is '[12]'







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7418 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId and modelId is {"a":"1"，"b":"2"}



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，barcode，searchableCustomDefinedId is '[12]'







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7419 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId and modelId is  out of scope



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，barcode，searchableCustomDefinedId is out of scope







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7420 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId and modelId is  ?



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，barcode，searchableCustomDefinedId is "?"







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7421 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId and modelId is  !@#%



2.update model set notifyQuantity，salePrice，marketPrice，costPrice，customDefinedId，shortCustomField1，customField1，barcode，searchableCustomDefinedId is "!@#%"







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7422 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.create one productId for twice update model







Expected Results



==========



1.http Response Code is 200



[[ TC7423 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.create one productId for ten times update model







Expected Results



==========



1.http Response Code is 200



[[ TC7424 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId(00000000001) and modelId(00000000001) is out of scope



2.update model set specValueIdList([9999999999]) is out of scope







Expected Results



==========



1.http Response Code is 404



2.http Response Code is 400



[[ TC7425 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set productId is not matched and productId







Expected Results



==========



1.http Response Code is 404



[[ TC7426 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set specValueIdList(10) is out of scope





Expected Results



==========



1.http Response Code is 400



[[ TC7427 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set set productId={"productId":"12345"}，modelId={"modelId":"12345"}，saleQuantity={"saleQuantity":"12345"}







Expected Results



==========



1.http Response Code is 400



[[ TC7428 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model set request method is POST







Expected Results



==========



1.http Response Code is 405



[[ TC7429 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.update model create model with specvalueid 







Expected Results



==========



1.http Response Code is 400



[[ TC7430 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.create productId1 with all parameters



2.create productId2 with required parameters



3.create specValueId with productId2



4.update model



Expected Results



==========



1.1-3.1 http Response Code is 201



4. http Response Code is 400



[[ TC7431 ]]




==========



syntax



URI:/v1/product_egs/product//model/



Method:PUT







Testing Steps:



==========



1.create productId with required parameters



2.update model







Expected Results



==========



1. http Response Code is 201



2. http Response Code is 400



[[ TC7432 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set sid='sid'

  set title='product title'

  set ccode='tw'

  set property='nevec'

  set currency='TWD'



Expected Results 

=======

1. http response code 200

   verify response data json schema



[[ TC7433 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product with all fiels 

        set sid='sid'

  set title='product title'

  set ccode='tw'

  set property='nevec'

  set currency='TWD'

  ......

  

Expected Results 

=======

1. http response code 200

   verify response data value



[[ TC7434 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set sid=' '

2. create product set title=' '

3. create product set ccode=' '

4. create product set property=' '

5. create product set currency=' '

6. create product set payment_attr=' '

7. create product set shipping_attr=' '

8. create product set location=' '

9. create product set cat_id=' '

10. create product set short_desc=' '

11. create product set long_desc=' '

12. create product set video_path=' '

13. create product set cust_define_id=' '

14. create product set use_state=' '

15. create product set sale_price=' '

16. create product set market_price=' '

17. create product set cost_price=' '

18. create product set tax_rate=' '

19. create product set property_status=' '

20. create product set categoryAttribute=' '

21. create product set videoPath2=' '

22. create product set videoPath3=' ' 

 

Expected Results 

=======

1~5. http response code 400

6~22. http response code 200



[[ TC7435 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set http method PUT



Expected Results 

=======

1. http response code 405



[[ TC7436 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product unset sid

2. create product unset title

3. create product unset ccode

4. create product unset property

5. create product unset currency

6. create product unset payment_attr

7. create product unset shipping_attr

8. create product unset location

9. create product unset cat_id

10. create product unset short_desc

11. create product unset long_desc

12. create product unset video_path

13. create product unset cust_define_id

14. create product unset use_state

15. create product unset sale_price

16. create product unset market_price

17. create product unset cost_price

18. create product unset tax_rate

19. create product unset property_status

20. create product unset categoryAttribute

21. create product unset videoPath2

22. create product unset videoPath3

 

Expected Results 

=======

1~5. http response code 400

6~22. http response code 200



[[ TC7437 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set ccode='!@#'

2. create product set currency='ABC'

3. create product set sid='!@#'

4. create product set title='!@#'

5. create product set payment_attr='!@#'

6. create product set shipping_attr='!@#'

7. create product set location='!@#'

8. create product set cat_id='!@#'

9. create product set short_desc='!@#'

10. create product set long_desc='!@#'

11. create product set video_path='!@#'

12. create product set cust_define_id='!@#'

 

Expected Results 

=======

1~2. http response code 400

3~12. http response code 200



[[ TC7438 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set ccode='?y'

2. create product set currency='?y'

3. create product set sid='?y'

4. create product set title='?y'

5. create product set payment_attr='?y'

6. create product set shipping_attr='?y'

7. create product set location='?y'

8. create product set cat_id='?y'

9. create product set short_desc='?y'

10. create product set long_desc='?y'

11. create product set video_path='?y'

12. create product set cust_define_id='?y'

13. create product set categoryAttribute='?y'

14. create product set videoPath2='?y'

15. create product set videoPath3='?y'



 

Expected Results 

=======

1~2. http response code 400

3~15. http response code 200



[[ TC7439 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set property_status='string'

2. create product set imageUrlList='string'

3. create product set tax_rate='string'

4. create product set cost_price='string'

5. create product set market_price='string'

6. create product set sale_price='string'

7. create product set use_state='string'

 

Expected Results 

=======

1~7. http response code 400



[[ TC7440 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set sid=[12]

2. create product set title=[12]

3. create product set ccode=[12]

4. create product set property=[12]

5. create product set currency=[12]

6. create product set payment_attr=[12]

7. create product set shipping_attr=[12]

8. create product set location=[12]

9. create product set cat_id=[12]

10. create product set short_desc=[12]

11. create product set long_desc=[12]

12. create product set video_path=[12]

13. create product set cust_define_id=["test1"，"test2"]

14. create product set use_state=["test1"，"test2"]

15. create product set sale_price=[12]

16. create product set market_price=[12]

17. create product set cost_price=[12]

18. create product set tax_rate=[12]

19. create product set property_status=["test1"，"test2"]

20. create product set categoryAttribute=["test1"，"test2"]

21. create product set videoPath2=["test1"，"test2"]

22. create product set videoPath3=["test1"，"test2"]

 

Expected Results 

=======

1~22. http response code 400



[[ TC7441 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set sid={"a":"1"，"b":"2"}

2. create product set title={"a":"1"，"b":"2"}

3. create product set ccode={"a":"1"，"b":"2"}

4. create product set property={"a":"1"，"b":"2"}

5. create product set currency={"a":"1"，"b":"2"}

6. create product set payment_attr={"a":"1"，"b":"2"}

7. create product set shipping_attr={"a":"1"，"b":"2"}

8. create product set location={"a":"1"，"b":"2"}

9. create product set cat_id={"a":"1"，"b":"2"}

10. create product set short_desc={"a":"1"，"b":"2"}

11. create product set long_desc={"a":"1"，"b":"2"}

12. create product set video_path={"a":"1"，"b":"2"}

13. create product set cust_define_id={"a":"1"，"b":"2"}

14. create product set use_state={"a":"1"，"b":"2"}

15. create product set sale_price={"a":"1"，"b":"2"}

16. create product set market_price={"a":"1"，"b":"2"}

17. create product set cost_price={"a":"1"，"b":"2"}

18. create product set tax_rate={"a":"1"，"b":"2"}

19. create product set property_status={"a":"1"，"b":"2"}

20. create product set categoryAttribute={"a":"1"，"b":"2"}

21. create product set videoPath2={"a":"1"，"b":"2"}

22. create product set videoPath3={"a":"1"，"b":"2"}

 

Expected Results 

=======

1~22. http response code 400



[[ TC7442 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set sid='abc....'(length=129)

2. create product set title='abc....'(length=161)

3. create product set ccode='Pro'

4. create product set property='abc....'(length=22)

5. create product set currency='abc....'(length=4)

6. create product set payment_attr='abc....'(length=200)

7. create product set shipping_attr='abc....'(length=200)

8. create product set location='abc....'(length=130)

9. create product set cat_id='abc....'(length=13)

10. create product set short_desc='abc....'(length=201)

11. create product set long_desc='abc....'(length=65600)

12. create product set video_path='abc....'(length=257)

13. create product set cust_define_id='abc....'(length=130)

14. create product set use_state=1213456789

15. create product set sale_price=1234567890.123

16. create product set market_price=1234567890.123

17. create product set cost_price=1234567890.123

18. create product set tax_rate=0.567

19. create product set property_status=12120000000

20. create product set categoryAttribute='abc....'(length=4070)

21. create product set videoPath2='abc....'(length=257)

22. create product set videoPath3='abc....'(length=257)

 

Expected Results 

=======

1~22. http response code 400



[[ TC7443 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set imageUrlList=null

2. get product



Expected Results 

=======

1~2. http response code 200

2.2 verify response data not exist $.imagesRecords.imgUrl



[[ TC7444 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set imageUrlList=["http://123"]



Expected Results 

=======

1. http response code 500



[[ TC7445 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set imageUrlList=["http://l.yimg.com/lo/api/res/1.2/aVy8o4Nc6znvA5I01bU9Mw--/dz0xNjA7aD0xMjA7YXBwaWQ9eXR3ZnBhZ2U-/http://media.zenfs.com/zh_hant_tw/News/cna/20120114001034M.jpg"]



Expected Results 

=======

1. http response code 200



[[ TC7446 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set imageUrlList=["http://l.yimg.com/lo/api/res/1.2/aVy8o4Nc6znvA5I01bU9Mw--/dz0xNjA7aD0xMjA7YXBwaWQ9eXR3ZnBhZ2U-/http://media.zenfs.com/zh_hant_tw/News/cna/20120114001034M.jpg"，...]

  (length=30)



Expected Results 

=======

1. http response code 200



[[ TC7447 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set imageUrlList=["http://l.yimg.com/lo/api/res/1.2/aVy8o4Nc6znvA5I01bU9Mw--/dz0xNjA7aD0xMjA7YXBwaWQ9eXR3ZnBhZ2U-/http://media.zenfs.com/zh_hant_tw/News/cna/20120114001034M.jpg"，...]

  (length=31)



Expected Results 

=======

1. http response code 400



[[ TC7448 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product 

        set categoryId=00001111111，

  set ccode='tw'，

  set customDefinedId='abcdef'

  set location=Taipei City，

  set longDescription=http://twiki.corp.yahoo.com/view/ECommercePlatform/ProductARC，

  set paymentAttribute=attribute 1，

  set property={$default_property}，

  set propertyStatus=12234，

  set shippingAttribute=attribute 2，

  set shortDescription=I am short!，

  set sid={$default_sid}，

  set title=This is a test title，

  set useState=1，

  set taxRate=123，

  set videoPath=http://twiki.corp.yahoo.com/view/ECommercePlatform/ProductARC

  

Expected Results 

=======

1. http response code 200

   verify create success



[[ TC7449 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set  videoPath2=-1

2. create product set  videoPath3=-1 

3. create product set  categoryAttribute=-1 



Expected Results 

=======

1~3. http response code 200

   verify create success



[[ TC7450 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set  videoPath2=0

2. create product set  videoPath3=0 

3. create product set  categoryAttribute=0 



Expected Results 

=======

1~3. http response code 200

   verify create success



[[ TC7451 ]]


=======

URI Syntax:  

create product: (POST)/v1/product_egs/product



Testing Steps: 

=======

1. create product set  videoPath2=null

2. create product set  videoPath3=null 

3. create product set  categoryAttribute=null 



Expected Results 

=======

1~3. http response code 200

   verify create success



[[ TC7452 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， specName，specValue and model

2. get product detail  set prodId and set desc=0



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product/specName/specValue and model info 





[[ TC7453 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， specName，specValue and model

2. get product detail only set prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product/specName/specValue and model info 





[[ TC7454 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， specName，specValue and one model

2. get product detail  set prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product/specName/specValue and model info 





[[ TC7455 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， specName，specValue and 10 model

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product/specName/specValue and model info 

    verify count of modelId is 10





[[ TC7456 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， with one specName

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product and specName info 







[[ TC7457 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， with 10 specName

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product and specName info 







[[ TC7458 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product，  specName and 1 specValue 

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product / specName and specValue info 







[[ TC7459 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product，  specName and 10 specValue 

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product / specName and specValue info 

  verify count specValue is 10





[[ TC7460 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product，  3 specName and 5 specValue 

2. get product detail by prodId



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify product / specName and specValue info 

  





[[ TC7461 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. get product detail set prodId='??'



Expected Results 

=======

1. http response code 400





[[ TC7462 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. get product detail set prodId='1234567890123 '



Expected Results 

=======

1. http response code 400





[[ TC7463 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. get product detail set prodId='123456789012345678901'



Expected Results 

=======

1. http response code 400





[[ TC7464 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product get prodId

2. get product detail by prodId set desc=12



Expected Results 

=======

1. http response code 200

2. http response code 400





[[ TC7465 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product get prodId

2. get product detail by prodId set desc='?y'



Expected Results 

=======

1. http response code 200

2. http response code 400





[[ TC7466 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product get prodId

2. get product detail by prodId set desc='string'



Expected Results 

=======

1. http response code 200

2. http response code 400





[[ TC7467 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product get prodId

2. get product detail by prodId set desc={"a":"1"，"b":"2"}



Expected Results 

=======

1. http response code 200

2. http response code 400





[[ TC7468 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product get prodId

2. get product detail by prodId set desc=[12]



Expected Results 

=======

1. http response code 200

2. http response code 400





[[ TC7469 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product with long description get prodId

2. get product detail by prodId set desc=0



Expected Results 

=======

1.1~2.1 http response code 200

2.2  verify response data not exist long description



[[ TC7470 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product with long description get prodId

2. get product detail by prodId set desc=1



Expected Results 

=======

1.1~2.1 http response code 200

2.2  verify response data exist long description



[[ TC7471 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product withou long description

2. get product detail by prodId set desc=1



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data not exist long description







[[ TC7472 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， specName，specValue 

2. create 1 model with all parameters

3. get product detail by prodId set desc=0



Expected Results 

=======

1.1~3.1 http response code 200

3.2 verify response data model all fields





[[ TC7473 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product， and create specName with all parameters

2. get product detail by prodId set desc=0



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data specName all fields





[[ TC7474 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. create product

2. create specName ， and create specValue with all parameters

3. get product detail by prodId set desc=0



Expected Results 

=======

1.1~3.1 http response code 200

3.2 verify response data specValue all fields





[[ TC7475 ]]


=======

URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail?desc=



Testing Steps: 

=======

1. get product detail set prodId='!@#$%'



Expected Results 

=======

1. http response code 400





[[ TC7476 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product with specName，specValue and model

2. get products detail  set ids=prodId1，prodId2 



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data json schema





[[ TC7477 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail unset ids



Expected Results 

=======

1. http response code 400



[[ TC7478 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=' '



Expected Results 

=======

1. http response code 400



[[ TC7479 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=null



Expected Results 

=======

1. http response code 400



[[ TC7480 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids='?y'



Expected Results 

=======

1. http response code 400



[[ TC7481 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids='string'



Expected Results 

=======

1. http response code 400



[[ TC7482 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids='!@#'



Expected Results 

=======

1. http response code 400



[[ TC7483 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids={'a':12}



Expected Results 

=======

1. http response code 400



[[ TC7484 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=[12]



Expected Results 

=======

1. http response code 400



[[ TC7485 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=999999999999



Expected Results 

=======

1. 1  http response code 200

1.2  verify responseData.productResults[0].code=4



[[ TC7486 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=1234567890123



Expected Results 

=======

1. 1  http response code 200

1.2  verify responseData.productResults[0].code=4



[[ TC7487 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=1，1，2，3......199



Expected Results 

=======

1. 1  http response code 200

1.2  verify responseData.productResults.length=200



[[ TC7488 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. get products detail set ids=1，1，2，3......200



Expected Results 

=======

1. 1  http response code 400



[[ TC7489 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，null，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7490 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，  ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7491 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，?y ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7492 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，string ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7493 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，special ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7494 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，{"a":12} ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7495 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，[12] ，prodId2



Expected Results 

=======

1. http response code 200

2. http response code 400

[[ TC7496 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，999999999999 ，prodId2



Expected Results 

=======

1.1~2.1 http response code 200

2.2  verify responseData.productResults[1].code=4



[[ TC7497 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，1234567890123 ，prodId2



Expected Results 

=======

1.1~2.1 http response code 200

2.2  verify responseData.productResults[1].code=4



[[ TC7498 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get products detail set ids=prodId1，prodId2 ，prodId2



Expected Results 

=======

1.1~2.1 http response code 200

2.2  verify responseData.productResults[1].productId=prodId2 

responseData.productResults[2].productId=prodId2 



[[ TC7499 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，prodId2，prodId3

2. get products detail set ids=prodId1，prodId2，prodId3

   and get http head Last-Modified value assign $LastModified and ETag value assign $ETag

3. get products detail set ids=prodId1，prodId2，prodId3 

    set head If-Modified-Since=$LastModified 

 set head if-none-match=$ETag



Expected Results 

=======

1~2. http response code 200

3. http response code 304

[[ TC7500 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，prodId2，prodId3

2. get products detail set ids=prodId1，prodId2，prodId3

   and get http head Last-Modified value assign $LastModified and ETag value assign $ETag

3. update prodId2 set categoryId=00001111111

4. get products detail set ids=prodId1，prodId2，prodId3 

    set head If-Modified-Since=$LastModified 

 set head if-none-match=$ETag



Expected Results 

=======

1~4. http response code 200



[[ TC7501 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，prodId2，prodId3

2. get products detail set ids=prodId1，prodId2，prodId3

   and get http head Last-Modified value assign $LastModified and ETag value assign $ETag

3. update prodId2  specName  value

4. get products detail set ids=prodId1，prodId2，prodId3 

    set head If-Modified-Since=$LastModified 

 set head if-none-match=$ETag



Expected Results 

=======

1~4. http response code 200



[[ TC7502 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，prodId2，prodId3， with create specName and specValue

2. get products detail set ids=prodId1，prodId2，prodId3

   and get http head Last-Modified value assign $LastModified and ETag value assign $ETag

3. update prodId2  specValue

4. get products detail set ids=prodId1，prodId2，prodId3 

    set head If-Modified-Since=$LastModified 

 set head if-none-match=$ETag



Expected Results 

=======

1~4. http response code 200



[[ TC7503 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，prodId2，prodId3， with create specName， specValue and model

2. get products detail set ids=prodId1，prodId2，prodId3

   and get http head Last-Modified value assign $LastModified and ETag value assign $ETag

3. update prodId2  model

4. get products detail set ids=prodId1，prodId2，prodId3 

    set head If-Modified-Since=$LastModified 

 set head if-none-match=$ETag



Expected Results 

=======

1~4. http response code 200



[[ TC7504 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create product with specName，specValue and model

2. get products detail set ids=prodId1



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data json schema

    verify response data not exist 

 product.longDescriptionUrl

 product.imageUrlList

 product.imageValidationList

 product.imageRecords[0].orderNumber

 product.imageRecords[0].images

 product.imageRecords[0].images

 product.imageRecords[0].createTime



[[ TC7505 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create product with specName，specValue and model

2. get products detail set ids=prodId1

3. get single product by prodId1

4. get specName

5. get specValue

6. get model



Expected Results 

=======

1.1~6.1 http response code 200

2.2~6.2 verify response data json schema



[[ TC7506 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1，pid2，pid3



Testing Steps: 

=======

1. create three product prodId1，with create specName，specValue and model

2. get products detail set ids=prodId1



Expected Results 

=======

1~2.1 http response code 200

2.2  verify response data json schema include specName，specValue，model



[[ TC7507 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1



Testing Steps: 

=======

1. create  product prodId1

2. get single product detail  by prodId1 

 and get head ETag value 

3. md5 for ETag assign $prod1

4. get multi products detail set ids=prodId1 

 and get head ETag value assign $ETag2



Expected Results 

=======

1~4.1 http response code 200

4.2  verify $ETag2 equals to $pid1



[[ TC7508 ]]


=======

URI Syntax:  

get products detail: (GET)/v1/product_egs/get_products_detail?desc=false&ids=pid1



Testing Steps: 

=======

1. create two product prodId1，prodId2

2. get single product detail  by prodId1 

 and get head ETag value assign to $ETag1

3. get single product detail  by prodId2 

 and get head ETag value assign to $ETag2 

4. md5 for ($ETag1-$ETag2) assign $prod1

5. get multi products detail set ids=prodId1，prodId2 

 and get head ETag value assign $ETag0



Expected Results 

=======

1~5.1 http response code 200

5.2  verify $ETag0 equals to $pid1



[[ TC7509 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product， specName，specValue and model

2. publish product

3. query product by sid set ccode and property



Expected Results 

=======

1~3. http response code 200

3.2 verify response data product value



[[ TC7510 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product， specName，specValue and model

2. publish product

3. unpublish product

4. query product by sid set ccode and property



Expected Results 

=======

1~4. http response code 200

4.2 verify response data product value



[[ TC7511 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product， specName，specValue and model

2. delete product

3. query product by sid set ccode and property



Expected Results 

=======

1~3. http response code 200

3.2 verify response data product value and status



[[ TC7512 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create 3 product with same sid

2. query product by sid set ccode and property



Expected Results 

=======

1~2. http response code 200

2.2 verify response data products count and sequence



[[ TC7513 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set sid=' '



Expected Results 

=======

1. http response code 404



[[ TC7514 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product unset ccode



Expected Results 

=======

1. http response code 400



[[ TC7515 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product unset property



Expected Results 

=======

1. http response code 400



[[ TC7516 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set ccode=  



Expected Results 

=======

1. http response code 400



[[ TC7517 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set property=  



Expected Results 

=======

1. http response code 400



[[ TC7518 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=  



Expected Results 

=======

1. http response code 400



[[ TC7519 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=  



Expected Results 

=======

1. http response code 400



[[ TC7520 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set sid='nevec_1840549'

2. query product set sid='test_1840549'



Expected Results 

=======

1~2. http response code 200

2.2 verify response data not include products 



[[ TC7521 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set ccode=tw

2. query product set ccode=op



Expected Results 

=======

1~2. http response code 200

2.2 verify response data not include products 



[[ TC7522 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set property=nevec

2. query product set property=op



Expected Results 

=======

1~2. http response code 200

2.2 verify response data not include products 



[[ TC7523 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=?y  



Expected Results 

=======

1. http response code 400



[[ TC7524 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=string  



Expected Results 

=======

1. http response code 400



[[ TC7525 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b={"a":"1"，"b":"2"}  



Expected Results 

=======

1. http response code 400



[[ TC7526 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=[12]  



Expected Results 

=======

1. http response code 400



[[ TC7527 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=!@#$ 



Expected Results 

=======

1. http response code 400



[[ TC7528 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=0  



Expected Results 

=======

1. http response code 400



[[ TC7529 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set b=-1  



Expected Results 

=======

1. http response code 400



[[ TC7530 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=?y  



Expected Results 

=======

1. http response code 400



[[ TC7531 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=string  



Expected Results 

=======

1. http response code 400



[[ TC7532 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n={"a":"1"，"b":"2"}  



Expected Results 

=======

1. http response code 400



[[ TC7533 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=[12]  



Expected Results 

=======

1. http response code 400



[[ TC7534 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=string  



Expected Results 

=======

1. http response code 400



[[ TC7535 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=0 



Expected Results 

=======

1. http response code 400



[[ TC7536 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n=-1  



Expected Results 

=======

1. http response code 400



[[ TC7537 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set request method is POST



Expected Results 

=======

1. http response code 405



[[ TC7538 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create 5 product with same sid

2. query product set b=2 & n=3



Expected Results 

=======

1~2. http response code 200

2.2 verify products count



[[ TC7539 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create 1 product 

2. query product set b=2 & n=3



Expected Results 

=======

1~2. http response code 200

2.2 verify products count=0



[[ TC7540 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product with all parameters and set b=-1 & n=3



Expected Results 

=======

1. http response code 400



[[ TC7541 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product with all parameters and set b=1 & n=-1



Expected Results 

=======

1. http response code 400



[[ TC7542 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product with all parameters

2. query product 

set categoryId=

set customDefinedId=

set shortCustomField2=



Expected Results 

=======

1~2. http response code 200

2.2 verify response data not exist products



[[ TC7543 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set customDefinedId='' and shortCustomField2=''

2. query product 

set customDefinedId=

set shortCustomField2=



Expected Results 

=======

1~2. http response code 200

2.2 verify response data 



[[ TC7544 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product 

set categoryId=?y

set customDefinedId=?y

set shortCustomField2=?y & b=?y



Expected Results 

=======

1. http response code 400



[[ TC7545 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set categoryId=?y 

   set customDefinedId=?y

   set shortCustomField2=?y

2. query product 

set categoryId=?y

set customDefinedId=?y

set shortCustomField2=?y 



Expected Results 

=======

1~2. http response code 200

2.2 verify response data product value



[[ TC7546 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=

  &propertyStatus=1

  &customDefinedId=

  &shortCustomField1=shortCustomField1

  &shortCustomField2=

  &shortCustomField3=shortCustomField3

  &b=



Expected Results 

=======

1. http response code 400



[[ TC7547 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set  customDefinedId='' and shortCustomField2=''

2. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=000111222333

  &propertyStatus=1

  &customDefinedId=

  &shortCustomField1=shortCustomField1

  &shortCustomField2=

  &shortCustomField3=shortCustomField3



Expected Results 

=======

1~2. http response code 200

2.2 verify response data product value



[[ TC7548 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=strin

  &propertyStatus=1

  &customDefinedId=strin

  &shortCustomField1=shortCustomField1

  &shortCustomField2=strin

  &shortCustomField3=shortCustomField3

  &b=strin



Expected Results 

=======

1. http response code 400



[[ TC7549 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set categoryId='stin' customDefinedId='stin' shortCustomField2='stin'

2. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=strin

  &propertyStatus=1

  &customDefinedId=strin

  &shortCustomField1=shortCustomField1

  &shortCustomField2=strin

  &shortCustomField3=shortCustomField3





Expected Results 

=======

1~2. http response code 200

2.2 verify response data product value



[[ TC7550 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product 

  set ccode=tw

  &property={$default_property}

  &status=

  &propertyStatus=

  &shortCustomField1=

  &shortCustomField3=

  &n=



Expected Results 

=======

1. http response code 400



[[ TC7551 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set shortCustomField1=''，shortCustomField3=''

2. query product 

  set ccode=tw

  &property={$default_property}

  &shortCustomField1=

  &shortCustomField3=



Expected Results 

=======

1~2. http response code 200

2.2 verify response data product value



[[ TC7552 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product

2. query product 

  set ccode=tw

  &property={$default_property}

  &propertyStatus=strin

  &shortCustomField1=strin

  &shortCustomField3=strin

  &n=strin



Expected Results 

=======

1.1 http response code 200

2.1 http response code 400



[[ TC7553 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product shortCustomField1="strin" ，shortCustomField3="strin"

2. query product 

  set ccode=tw

  &property={$default_property}

  &shortCustomField1=strin

  &shortCustomField3=strin



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data 



[[ TC7554 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product shortCustomField1="" ，shortCustomField3=""

2. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=000111222333

  &customDefinedId=C0000000000001

  &shortCustomField1=

  &shortCustomField2=shortCustomField2

  &shortCustomField3=



Expected Results 

=======

1.1~2.1 http response code 200

2.2 verify response data 



[[ TC7555 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product

2. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=000111222333

  &propertyStatus=

  &customDefinedId=C0000000000001

  &shortCustomField1=

  &shortCustomField2=shortCustomField2

  &shortCustomField3=

  &n=



Expected Results 

=======

1. http response code 200

2. http response code 400







[[ TC7556 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set shortCustomField1="strin" shortCustomField3="strin"

2. query product 

  set ccode=tw

  &property={$default_property}

  &status=0

  &categoryId=000111222333

  &propertyStatus=1

  &customDefinedId=C0000000000001

  &shortCustomField1=strin

  &shortCustomField2=shortCustomField2

  &shortCustomField3=strin



Expected Results 

=======

1~2. http response code 200

2.2 verify response data 







[[ TC7557 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product set ccode=tw

2. create product set ccode=cn

3. query product 

  set ccode=tw，cn

  



Expected Results 

=======

1~3. http response code 200

3.2 verify response data products count=2  



[[ TC7558 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product with all parameters

2. create product and specName，specValue，model ，then publish 

3. create product and specName，specValue，model ，then publish ， unpublish

4. create product  then delete it 

5. query product 

  set ccode=tw

  &property={$default_property}

  &status=0，1，2，3

  

Expected Results 

=======

1~2. http response code 200

2.2 verify response data products count=4 

    verify product status



[[ TC7559 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product 

   set categoryId='1111'

   set propertyStatus=1

   set customDefinedId='cust1'

   set shortCustomField1='cust1'

   set shortCustomField2='cust1'

   set shortCustomField3='cust1'

2. create product 

   set categoryId='2222'

   set propertyStatus=2

   set customDefinedId='cust2'

   set shortCustomField1='cust2'

   set shortCustomField2='cust2'

   set shortCustomField3='cust2'

3. create product 

   set categoryId='3333'

   set propertyStatus=3

   set customDefinedId='cust3'

   set shortCustomField1='cust3'

   set shortCustomField2='cust3'

   set shortCustomField3='cust3'

4. query product 

  set ccode=tw

  &property={$default_property}

  &categoryId=1111，3333，2222

  &propertyStatus=1，2，3

  &customDefinedId=cust1，cust3，cust2

  &shortCustomField1=cust1，cust3，cust2

  &shortCustomField2=cust1，cust3，cust2

  &shortCustomField3=cust1，cust3，cust2

  

Expected Results 

=======

1~4. http response code 200

4.2 verify response data products count=3



[[ TC7560 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create 3 product with same parameters

2. query product 

  set ccode=tw

  &property={$default_property}

  &categoryId=1111，3333，2222

  &propertyStatus=1，2，3

  &customDefinedId=cust1，cust3，cust2

  &shortCustomField1=cust1，cust3，cust2

  &shortCustomField2=cust1，cust3，cust2

  &shortCustomField3=cust1，cust3，cust2

  

Expected Results 

=======

1~2. http response code 200

2.2 verify response data products count=0



[[ TC7561 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product 

   set categoryId='1111'

   set propertyStatus=1

2. create product 

   set categoryId='2222'

   set propertyStatus=2

3. create product 

   set categoryId='3333'

   set propertyStatus=3

4. query product 

  set ccode=tw

  &property={$default_property}

  &categoryId=1111，3333，2222

  &statue=0

  &propertyStatus=1，2，3

  &shortCustomField1=shortCustomField1

  

Expected Results 

=======

1~4. http response code 200

4.2 verify response data products count=3



[[ TC7562 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product 

   set customDefinedId='cust1'

2. create product 

   set customDefinedId='cust2'

3. create product 

   set customDefinedId='cust3'

4. query product 

  set ccode=tw

  &property={$default_property}

  &customDefinedId=cust1，cust3，cust2

  &shortCustomField1=cust1

  &status=0

  

Expected Results 

=======

1~4. http response code 200

4.2 verify response data products count=0



[[ TC7563 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create product 

   set categoryId='1111'

   set propertyStatus=1

   set customDefinedId='cust1'

   set shortCustomField1='cust1'

   set shortCustomField2='cust1'

   set shortCustomField3='cust1'

2. create product 

   set categoryId='2222'

   set propertyStatus=2

   set customDefinedId='cust2'

   set shortCustomField1='cust2'

   set shortCustomField2='cust2'

   set shortCustomField3='cust2'

3. query product 

  set ccode=tw

  &property={$default_property}

  &categoryId=1111，3333，2222

  &propertyStatus=1，2，3

  &customDefinedId=cust1，strin，cust2

  &shortCustomField1=cust1，strin，cust2

  &shortCustomField2=cust1，strin，cust2

  &shortCustomField3=cust1，strin，cust2

  

Expected Results 

=======

1~3. http response code 200

3.2 verify response data products count=2  



[[ TC7564 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. query product set n= 501 



Expected Results 

=======

1. http response code 400



[[ TC7565 ]]


=======

URI Syntax:  

Query Product by sid: (GET)/v1/product_egs/product/query_by_sid/{sid}?{param}



Testing Steps: 

=======

1. create 501 products with same sid 

2. query product 

  set ccode=tw

  &property={$default_property}

  &categoryId=000111222333

  &propertyStatus=1

  &customDefinedId=C0000000000001

  &shortCustomField1=shortCustomField1

  &shortCustomField2=shortCustomField2

  &shortCustomField3=shortCustomField3

  

Expected Results 

=======

1~2. http response code 200

2.2 verify response data products count=500  



[[ TC7566 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set all fields

 

Expected Results 

=======

1. http response code 200

 verify response data json schema





[[ TC7567 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set all fields

2. get product



Expected Results 

=======

1~2. http response code 200

2.2 verify response data value is update value



[[ TC7568 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set imageUrlList=null



Expected Results 

=======

1. http response code 200



[[ TC7569 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set imageUrlList='stringstring'



Expected Results 

=======

1. http response code 400



[[ TC7570 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set imageUrlList=['http://l.yimg.com/lo/api/res/1.2/aVy8o4Nc6znvA5I01bU9Mw--/dz0xNjA7aD0xMjA7YXBwaWQ9eXR3ZnBhZ2U-/http://media.zenfs.com/zh_hant_tw/News/cna/20120114001034M.jpg'，.....](length=30)



Expected Results 

=======

1. http response code 200



[[ TC7571 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set imageUrlList=['http://l.yimg.com/lo/api/res/1.2/aVy8o4Nc6znvA5I01bU9Mw--/dz0xNjA7aD0xMjA7YXBwaWQ9eXR3ZnBhZ2U-/http://media.zenfs.com/zh_hant_tw/News/cna/20120114001034M.jpg'，.....](length=31)



Expected Results 

=======

1. http response code 200



[[ TC7572 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update  unset imageUrlList



Expected Results 

=======

1. http response code 200



[[ TC7573 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId='99999999999'



Expected Results 

=======

1. http response code 404



[[ TC7574 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId='!@#$%'



Expected Results 

=======

1. http response code 404



[[ TC7575 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId='stringstring'



Expected Results 

=======

1. http response code 404



[[ TC7576 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId=[1，2，3]



Expected Results 

=======

1. http response code 404



[[ TC7577 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId={"a":"12"，"b":"dfd"，"c":"dfff"}



Expected Results 

=======

1. http response code 404



[[ TC7578 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set productId='?y'



Expected Results 

=======

1. http response code 404



[[ TC7579 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set customField3='?y??'



Expected Results 

=======

1. http response code 200



[[ TC7580 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set request data {"productId":"12345"}



Expected Results 

=======

1. http response code 400



[[ TC7581 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set request data {"sid":"12345"}



Expected Results 

=======

1. http response code 400



[[ TC7582 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set request data {"ccode":"12345"}



Expected Results 

=======

1. http response code 400



[[ TC7583 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set request data {"property":"12345"}



Expected Results 

=======

1. http response code 400



[[ TC7584 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set request method POST



Expected Results 

=======

1. http response code 405



[[ TC7585 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set title=' '

2. update set cat_id=' '

3. update set currency=' '

4. update set payment_attr=' '

5. update set shipping_attr=' '

6. update set location=' '

7. update set short_desc=' '

8. update set long_desc=' '

9. update set video_path=' '

10. update set cust_define_id=' '

11. update set use_state=' '

12. update set sale_price=' '

13. update set market_price=' '

14. update set cost_price=' '

15. update set tax_rate=' '

16. update set property_status=' '

17. update set customField1=' '

18. update set customField2=' '

19. update set customField3=' '

20. update set categoryAttribute=' '

21. update set video_path2=' '

22. update set video_path3=' '



Expected Results 

=======

1~3. http response code 400

4~22. http response code 200

 verify product data not update

[[ TC7586 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update unset title

2. update unset cat_id

3. update unset currency

4. update unset payment_attr

5. update unset shipping_attr

6. update unset location

7. update unset short_desc

8. update unset long_desc

9. update unset video_path

10. update unset cust_define_id

11. update unset use_state

12. update unset sale_price

13. update unset market_price

14. update unset cost_price

15. update unset tax_rate

16. update unset property_status

17. update unset customField1

18. update unset customField2

19. update unset customField3

20. update unset categoryAttribute

21. update unset video_path2

22. update unset video_path3



Expected Results 

=======

1~22. http response code 200

 verify product data not update

[[ TC7587 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set currency='!@#$%'

2. update set title='!@#$%'

3. update set cat_id='!@#$%'

4. update set payment_attr='!@#$%'

5. update set shipping_attr='!@#$%'

6. update set location='!@#$%'

7. update set short_desc='!@#$%'

8. update set long_desc='!@#$%'

9. update set video_path='!@#$%'

10. update set customField1='!@#$%'

11. update set customField2='!@#$%'

12. update set customField3='!@#$%'

13. update set categoryAttribute='!@#$%'

14. update set video_path2='!@#$%'

15. update set video_path3='!@#$%'



Expected Results 

=======

1. http response code 400

2~15. http response code 200

 verify product data update value

[[ TC7588 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set title='?y'

2. update set cat_id='?y'

3. update set payment_attr='?y'

4. update set shipping_attr='?y'

5. update set location='?y'

6. update set short_desc='?y'

7. update set long_desc='?y'

8. update set video_path='?y'

9. update set customDefinedId='?y'

10. update set customField1='?y'

11. update set customField2='?y'

12. update set customField3='?y'

13. update set categoryAttribute='?y'

14. update set video_path2='?y'

15. update set video_path3='?y'



Expected Results 

=======

1~15. http response code 200

 verify product data update value

[[ TC7589 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set property_status='string'

2. update set tax_rate='string'

3. update set cost_price='string'

4. update set market_price='string'

5. update set sale_price='string'

6. update set use_state='string'



Expected Results 

=======

1~6. http response code 400



[[ TC7590 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set title={"a":"1"，"b":"2"}

2. update set cat_id={"a":"1"，"b":"2"}

3. update set currency={"a":"1"，"b":"2"}

4. update set payment_attr={"a":"1"，"b":"2"}

5. update set shipping_attr={"a":"1"，"b":"2"}

6. update set location={"a":"1"，"b":"2"}

7. update set short_desc={"a":"1"，"b":"2"}

8. update set long_desc={"a":"1"，"b":"2"}

9. update set video_path={"a":"1"，"b":"2"}

10. update set cust_define_id={"a":"1"，"b":"2"}

11. update set use_state={"a":"1"，"b":"2"}

12. update set sale_price={"a":"1"，"b":"2"}

13. update set market_price={"a":"1"，"b":"2"}

14. update set cost_price={"a":"1"，"b":"2"}

15. update set tax_rate={"a":"1"，"b":"2"}

16. update set property_status={"a":"1"，"b":"2"}

17. update set customField1={"a":"1"，"b":"2"}

18. update set customField2={"a":"1"，"b":"2"}

19. update set customField3={"a":"1"，"b":"2"}

20. update set categoryAttribute={"a":"1"，"b":"2"}

21. update set video_path2={"a":"1"，"b":"2"}

22. update set video_path3={"a":"1"，"b":"2"}



Expected Results 

=======

1~22. http response code 400



[[ TC7591 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set title=[12]

2. update set cat_id=[12]

3. update set currency=[12]

4. update set payment_attr=[12]

5. update set shipping_attr=[12]

6. update set location=[12]

7. update set short_desc=[12]

8. update set long_desc=[12]

9. update set video_path=[12]

10. update set cust_define_id=[12]

11. update set use_state=[12]

12. update set sale_price=[12]

13. update set market_price=[12]

14. update set cost_price=[12]

15. update set tax_rate=[12]

16. update set property_status=[12]

17. update set customField1=[12]

18. update set customField2=[12]

19. update set customField3=[12]

20. update set categoryAttribute=[12]

21. update set video_path2=[12]

22. update set video_path3=[12]



Expected Results 

=======

1~22. http response code 400



[[ TC7592 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set title='abdcd...'(length=161)

2. update set cat_id='abdcd...'(length=13)

3. update set currency='aaaa'

4. update set payment_attr='abdcd...'(length=200)

5. update set shipping_attr='abdcd...'(length=200)

6. update set location='abdcd...'(length=130)

7. update set short_desc='abdcd...'(length=201)

8. update set long_desc='abdcd...'(length=65538)

9. update set video_path='abdcd...'(length=257)

10. update set cust_define_id='abdcd...'(length=130)

11. update set use_state=1213456789

12. update set sale_price=40001002.3333

13. update set market_price=40001002.3333

14. update set cost_price=40001002.3333

15. update set tax_rate=40001002.3333

16. update set property_status=12120000000

17. update set customField1='abdcd...'(length=258)

18. update set customField2='abdcd...'(length=258)

19. update set customField3='abdcd...'(length=258)

20. update set categoryAttribute='abdcd...'(length=4100)

21. update set video_path2='abdcd...'(length=257)

22. update set video_path3='abdcd...'(length=257)



Expected Results 

=======

1~22. http response code 400



[[ TC7593 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set categoryAttribute=-1

2. update set video_path2=-1

3. update set video_path3=-1

4. get product 

 

Expected Results 

=======

1~4. http response code 200

4.2 verify categoryAttribute，video_path2，video_path3 value



[[ TC7594 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set categoryAttribute=0

2. update set video_path2=0

3. update set video_path3=0

4. get product 

 

Expected Results 

=======

1~4. http response code 200

4.2 verify categoryAttribute，video_path2，video_path3 value



[[ TC7595 ]]


=======

A: URI Syntax:  

update product: (PUT)/v1/product_egs/product/

B: PrepareData

1. create a product get productId



Testing Steps: 

=======

1. update set categoryAttribute=null

2. update set video_path2=null

3. update set video_path3=null

4. get product 

 

Expected Results 

=======

1~4. http response code 200

4.2 verify categoryAttribute，video_path2，video_path3 value



[[ TC7598 ]]


=======

URI Syntax:&nbsp; 

get node : (GET)/v1/egs/category/node/get_node/<i>&lt;tree_id&gt;</i>/<i>&lt;cat_id&gt;</i>?timeframe=<i>&lt;timeframe&gt;</i>&amp;activated_only=<i>&lt;activated_only&gt;</i>

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps: 

=======

1. insert tree set property='test_property'&nbsp; get treeId

2. create node set tree_id=treeId， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1

3. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

4. get node set tree_id=treeId， set cat_id=nId1

&nbsp; 

Expected Results 

=======

1.1~4.1&nbsp; response http code 200

3.2&nbsp; attributes value assign $expectAttributes

4.2&nbsp; verify response category node&nbsp; attributes value in $expectAttributes

[[ TC7599 ]]


=======

URI Syntax:&nbsp; 

get node : (GET)/v1/egs/category/node/get_node/<i>&lt;tree_id&gt;</i>/<i>&lt;cat_id&gt;</i>?timeframe=<i>&lt;timeframe&gt;</i>&amp;activated_only=<i>&lt;activated_only&gt;</i>

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps: 

=======

1. insert tree set property='other_property'&nbsp; get treeId

2. create node set tree_id=treeId， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1 

&nbsp;&nbsp;&nbsp; (so&nbsp; the node not&nbsp; belongs to property "test_property")

3. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

4. get node set tree_id=treeId， set cat_id=nId1

&nbsp; 

Expected Results 

=======

1.1~4.1&nbsp; response http code 200

3.2&nbsp; attributes value assign $expectAttributes

4.2&nbsp; verify response category node&nbsp; attributes count &nbsp; and $expectAttributes count were&nbsp; different&nbsp; <b>



</b>

[[ TC7608 ]]


=======

URI Syntax:&nbsp; 

get chlidren of node : (GET)/v1/egs/category/node/get_children/<em>&lt;tree_id&gt;</em>/<em>&lt;cat_id&gt;</em>?timeframe=<em>&lt;timeframe&gt;</em>&amp;activated_only=<em>&lt;activated_only&gt;</em>

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps: 

=======

1. insert tree set property='test_property'&nbsp; get treeId

2.&nbsp; create node set parent_cat_id=0， set tree_id=treeId ， get node id assign&nbsp; $parentNodeId

3. create node set tree_id=treeId， set parent_cat_id=$parentNodeId ， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1 

4. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

5. get chlidren of node set tree_id=treeId， set cat_id=$parentNodeId

&nbsp; 

Expected Results 

=======

1.1~5.1&nbsp; response http code 200

4.2&nbsp; attributes value assign $expectAttributes

5.2&nbsp; verify response category node&nbsp; attributes is<b> </b>same with $expectAttributes

<b>

</b>

[[ TC7612 ]]


=======

URI Syntax:&nbsp; 

get chlidren of node : (GET)/v1/egs/category/node/get_children/<i>&lt;tree_id&gt;</i>/<i>&lt;cat_id&gt;</i>?timeframe=<i>&lt;timeframe&gt;</i>&amp;activated_only=<i>&lt;activated_only&gt;</i>

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps: 

=======

1. insert tree set property='other_property'&nbsp; get treeId

2.&nbsp; create node set parent_cat_id=0， set tree_id=treeId ， get node id assign&nbsp; $parentNodeId

3. create node set tree_id=treeId， set parent_cat_id=$parentNodeId ， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1 

&nbsp; (so the children node not belongs to property 'test_property')

4. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

5. get chlidren of node set tree_id=treeId， set cat_id=$parentNodeId

&nbsp; 

Expected Results 

=======

1.1~5.1&nbsp; response http code 200

4.2&nbsp; attributes value assign $expectAttributes

5.2&nbsp; verify response category node&nbsp; attributes is<b> </b>different from $expectAttributes

<b>

</b>

[[ TC7620 ]]


=======

URI Syntax: 

get chlidren node v2: (GET)/v2/egs/category/node/get_children/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps:

=======

1. insert tree set property='test_property'&nbsp; 

2.&nbsp; create node set parent_cat_id=0， set tree_id=treeId ， get node id assign&nbsp; $parentNodeId

3. create node set tree_id=treeId， set parent_cat_id=$parentNodeId ， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1

4. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

5. get chlidren of node set tree_id=treeId， set cat_id=$parentNodeId

&nbsp;

Expected Results

=======

1.1~5.1&nbsp; response http code 200

4.2&nbsp; attributes value assign $expectAttributes

5.2&nbsp; verify response category node&nbsp; attributes is same with $expectAttributes

[[ TC7621 ]]


=======

URI Syntax: 

get chlidren of node : (GET)/v2/egs/category/node/get_children/&lt;tree_id&gt;/&lt;cat_id&gt;?timeframe=&lt;timeframe&gt;&amp;activated_only=&lt;activated_only&gt;

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps:

=======

1. insert tree set property='other_property'&nbsp; 

2.&nbsp; create node set parent_cat_id=0， set tree_id=treeId ， get node id assign&nbsp; $parentNodeId

3. create node set tree_id=treeId， set parent_cat_id=$parentNodeId ， set cluster_id='000003326533'(minimal cluster id in the environment)， get nId1

&nbsp; (so the children node not belongs to property 'test_property')

4. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

5. get chlidren of node set tree_id=treeId， set cat_id=$parentNodeId

&nbsp;

Expected Results

=======

1.1~5.1&nbsp; response http code 200

4.2&nbsp; attributes value assign $expectAttributes

5.2&nbsp; verify response category node&nbsp; attributes is different from $expectAttributes

[[ TC7622 ]]


=======

URI Syntax:&nbsp; 

get node : (GET)/v1/egs/category/node/get_node/<i>&lt;tree_id&gt;</i>/<i>&lt;cat_id&gt;</i>?timeframe=<i>&lt;timeframe&gt;</i>&amp;activated_only=<i>&lt;activated_only&gt;</i>

get attributes :&nbsp;&nbsp; /v1/stdata/cluster/&lt;cluster_id&gt;?property=&lt;propertyValue&gt;



Testing Steps: 

=======

1. insert tree set property='test_property'&nbsp; get treeId

2. create node set tree_id=treeId， set cluster_id='000003326533'(minimal cluster id in the environment)， set space_id='space_id1234'，&nbsp; get nId1

3. get attributes detail&nbsp; set cluster=000003326533 ， property='test_property'

4. get node set tree_id=treeId， set cat_id=nId1

&nbsp; 

Expected Results 

=======

1.1~4.1&nbsp; response http code 200

3.2&nbsp; attributes value assign $expectAttributes

4.2&nbsp; verify response category node&nbsp; attributes value in $expectAttributes

[[ TC7632 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName for product_id



2.create mutiple specName set spec name list is 8(out of scope)







Expected Results



==========



1. http Response Code is 201



2. http Response Code is 400



[[ TC7633 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set request url without product_id







Expected Results



==========



1. http Response Code is 404



[[ TC7634 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is "?"



2.create mutiple specName set specName is "?"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 200



[[ TC7635 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is "!@#"



2.create mutiple specName set specName is "!@#"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 200



[[ TC7636 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is out of scope



2.create mutiple specName set specName is out of scope







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 200



[[ TC7637 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is out of scope



2.create mutiple specName set specName is out of scope







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7638 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is empty



2.create mutiple specName set specName is empty







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7639 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is {"a":1}



2.create mutiple specName set specName is {"a":1}







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7640 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is [12]



2.create mutiple specName set specName is [12]







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7641 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is 'string'



2.create mutiple specName set specName is 'string'







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 201



[[ TC7642 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is -1



2.create mutiple specName set specName is -1







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 201



[[ TC7643 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is 0



2.create mutiple specName set specName is 0







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 201



[[ TC7644 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set product_id is null



2.create mutiple specName set specName is null







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



[[ TC7645 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName set specNames[1] exist specNameId







Expected Results



==========



1. http Response Code is 400



[[ TC7646 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:POST







Testing Steps:



==========



1.create mutiple specName before delete productId







Expected Results



==========



1. http Response Code is 404



[[ TC7647 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName for product







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7648 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName=""







Expected Results



==========



1. http Response Code is 400



[[ TC7649 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName="!@#%[，/"







Expected Results



==========



1. http Response Code is 201



[[ TC7650 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName="?"







Expected Results



==========



1. http Response Code is 201



[[ TC7651 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName="[12]"







Expected Results



==========



1. http Response Code is 400



[[ TC7652 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 400



[[ TC7653 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set specName is notexist







Expected Results



==========



1. http Response Code is 400



[[ TC7654 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId=""







Expected Results



==========



1. http Response Code is 404



[[ TC7655 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId="!@#%[，"







Expected Results



==========



1. http Response Code is 404



[[ TC7656 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId="?"







Expected Results



==========



1. http Response Code is 404



[[ TC7657 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId="[12]"







Expected Results



==========



1. http Response Code is 404



[[ TC7658 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7659 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create ten times specName(out of scope)







Expected Results



==========



1. http Response Code is 201



[[ TC7660 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create twice specName







Expected Results



==========



1. http Response Code is 201



2. veirfy response json schema 



[[ TC7661 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set productId='999999999999'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7662 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set request method is PUT







Expected Results



==========



1. http Response Code is 405



[[ TC7663 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:POST







Testing Steps:



==========



1.create specName set ten times specName(out of scope)







Expected Results



==========



1. http Response Code is 400



[[ TC7664 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId="?"







Expected Results



==========



1. http Response Code is 404



[[ TC7665 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId="sprint"







Expected Results



==========



1. http Response Code is 404



[[ TC7666 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId="@#!"







Expected Results



==========



1. http Response Code is 404



[[ TC7667 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId={"a":"1"，"b":"2"}







Expected Results



==========



1. http Response Code is 404



[[ TC7668 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId='[12]'







Expected Results



==========



1. http Response Code is 404



[[ TC7669 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId='1234567890123'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7670 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set productId='99999999999'(out of scope)







Expected Results



==========



1. http Response Code is 404



[[ TC7671 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specNames set  product status is publish







Expected Results



==========



1. http Response Code is 409



[[ TC7672 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.create 3 times specName for product



2.create 3 times specValue for product



3.delete all specNames







Expected Results



==========



3.1 http Response Code is 409



[[ TC7673 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.create 3 times specName for product



2.create 1 times specValue for product



3.delete all specNames







Expected Results



==========



3.1 http Response Code is 409



[[ TC7674 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name



Method:DELETE







Testing Steps:



==========



1.delete all specName







Expected Results



==========



1. http Response Code is 200



2. veirfy response json schema 



[[ TC7675 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is "?"







Expected Results



==========



2. http Response Code is 404



[[ TC7676 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is "sprint"







Expected Results



==========



2. http Response Code is 404



[[ TC7677 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is "@#!"







Expected Results



==========



2. http Response Code is 404



[[ TC7678 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is {"a":"1"，"b":"2"}







Expected Results



==========



2. http Response Code is 404



[[ TC7679 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is "[12]"







Expected Results



==========



2. http Response Code is 404



[[ TC7680 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName



2.delete single specName set productId and specNameId is out of scope







Expected Results



==========



2. http Response Code is 404



[[ TC7681 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create product and specName and specValue and model



2.delete single specName set product status is publish







Expected Results



==========



2. http Response Code is 409



[[ TC7682 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.create 2 times productId($prod_id and $test_prod_id)



2.create specName and specValue with $prod_id



3.delete single specName with $test_prod_id







Expected Results



==========



3.1. http Response Code is 404



[[ TC7683 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:DELETE







Testing Steps:



==========



1.delete single specName set specValue is exist







Expected Results



==========



3.1. http Response Code is 409



[[ TC7684 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId is ""



3.get specName set specNameId is ""







Expected Results



==========



2. http Response Code is 404



3. http Response Code is 405



[[ TC7685 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId and specNameId is "!@，"







Expected Results



==========



2. http Response Code is 404



[[ TC7686 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId and specNameId is "?"







Expected Results



==========



2. http Response Code is 404



[[ TC7687 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId and specNameId is {"a":"1"，"b":"2"}







Expected Results



==========



2. http Response Code is 404



[[ TC7688 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId and specNameId is "[12]"







Expected Results



==========



2. http Response Code is 404



[[ TC7689 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId(999999999999) and specNameId(999999999999) is out of scope







Expected Results



==========



2. http Response Code is 404



[[ TC7690 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create 2 times productId($p1 and $p2)



2.create specName and specValue with $p1



3.get specName with $p2







Expected Results



==========



3.1. http Response Code is 404



[[ TC7691 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId(1234567890123456789012)，(1234567890123) and specNameId(1234567890123456789012)，(1234567890123) is out of scope







Expected Results



==========



2. http Response Code is 404



[[ TC7692 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set productId and specNameId is "sprint"







Expected Results



==========



2. http Response Code is 404



[[ TC7693 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName 







Expected Results



==========



2. http Response Code is  200



[[ TC7694 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.create product and specName



2.get specName set request method is POST







Expected Results



==========



2. http Response Code is 405



[[ TC7695 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify specName and specNameId value



[[ TC7696 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is ""



2.update specName set specNameId is ""



3.update specName set specName is ""







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 405



3. http Response Code is 400



[[ TC7697 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is "!@#%[，/"



2.update specName set specNameId is "!@#%[，/"



3.update specName set specName is "!@#%[，/"







Expected Results



==========



1.1-2.1 http Response Code is 404



3.1 http Response Code is 200



3.2 status->code=20000



3.3 verify description="OK"



3.4 verify specName value is "!@#%[，/"



[[ TC7698 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is "?"



2.update specName set specNameId is "?"



3.update specName set specName is "?"







Expected Results



==========



1.1-2.1 http Response Code is 404



3.1 http Response Code is 200



3.2 status->code=20000



3.3 verify description="OK"



3.4 verify specName value is "?"



[[ TC7699 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set json="{}"



2.get specName







Expected Results



==========



1.1 http Response Code is 400



2.1 http Response code is 200



2.2 status->code=20000



2.3 verify description="OK"



2.4 verify specName and specNameId value



[[ TC7700 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is "[12]"



2.update specName set specNameId is "[12]"



3.update specName set specName is "[12]"







Expected Results



==========



1.1-2.1  http Response Code is 404



3. http Response Code is 400



[[ TC7701 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is {"1":"2"}



2.update specName set specNameId is {"1":"2"}



3.update specName set specName is {"1":"2"}







Expected Results



==========



1.1-2.1  http Response Code is 404



3. http Response Code is 400



[[ TC7702 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update 10 times specName



2.get  10 times specName







Expected Results



==========



1.1 -2.1 http Response Code is 200



2.2 status->code=20000



2.3 verify description="OK"



2.4 verify specName and specNameId value



[[ TC7703 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update 2 times specName



2.get  1 times specName







Expected Results



==========



1.1 -2.1 http Response Code is 200



2.2 status->code=20000



2.3 verify description="OK"



2.4 verify specName and specNameId value



[[ TC7704 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is '123456000'(out of scope)







Expected Results



==========



1.  http Response Code is 404



[[ TC7705 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.create 2 times productId($prod_id1 and $prod_id2)



2.create specName and specValue with $prod_id2



3.update specName with $prod_id1







Expected Results



==========



3.1. http Response Code is 404



[[ TC7706 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId is out of scope



2.update specName set specNameId is out of scope



3.update specName set specName is out of scope







Expected Results



==========



1.1-2.1  http Response Code is 404



3. http Response Code is 400



[[ TC7707 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:PUT







Testing Steps:



==========



1.update specName set productId and specNameId is not null







Expected Results



==========



1.1. http Response Code is 400



[[ TC7708 ]]




==========



syntax



URI:/v1/product_egs/product//spec_name/



Method:GET







Testing Steps:



==========



1.update specName set request method is POST







Expected Results



==========



1. http Response Code is 405



[[ TC7709 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName







Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify specName and specNameId value



[[ TC7710 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set request url is notexist



2.update mutiple specName set specNameId is notexist



3.update mutiple specName set specNameId is notexist



 



Expected Results



==========



1. http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7711 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is "?"



2.update mutiple specName set specNameId is "?/"



3.update mutiple specName set specName is "?"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 200



[[ TC7712 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is "!@#"



2.update mutiple specName set specNameId is "!@#"



3.update mutiple specName set specName is "!@#"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 200



[[ TC7713 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is out of scope



2.update mutiple specName set specNameId is out of scope



3.update mutiple specName set specName is out of scope







Expected Results



==========



1.1-2.1  http Response Code is 404



2. http Response Code is 200



[[ TC7714 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is out of scope



2.update mutiple specName set specNameId is out of scope



3.update mutiple specName set specName is out of scope







Expected Results



==========



1.  http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7715 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is ""



2.update mutiple specName set specNameId is ""



3.update mutiple specName set specName is ""







Expected Results



==========



1.  http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7716 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is {"a":1}



2.update mutiple specName set specNameId is {"a":1}



3.update mutiple specName set specName is {"a":1}







Expected Results



==========



1.  http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7717 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is [12]



2.update mutiple specName set specNameId is [12]



3.update mutiple specName set specName is [12]







Expected Results



==========



1.  http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7718 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is "string"



2.update mutiple specName set specNameId is "string"



3.update mutiple specName set specName is "string"







Expected Results



==========



1. http Response Code is 404



2. http Response Code is 400



3. http Response Code is 200



[[ TC7719 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is -1



2.update mutiple specName set specNameId is -1



3.update mutiple specName set specName is -1







Expected Results



==========



1.1-2.1  http Response Code is 404



3.1 http Response Code is 200



[[ TC7720 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is 0



2.update mutiple specName set specNameId is 0



3.update mutiple specName set specName is 0







Expected Results



==========



1.1-2.1  http Response Code is 404



3.1 http Response Code is 200



[[ TC7721 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set productId is null



2.update mutiple specName set specNameId is null



3.update mutiple specName set specName is null







Expected Results



==========



1.  http Response Code is 404



2.1-3.1 http Response Code is 400



[[ TC7722 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName delete productId



 



Expected Results



==========



1. http Response Code is 404



[[ TC7723 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName delete mutiple specName



 



Expected Results



==========



1. http Response Code is 404



[[ TC7724 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.create productId is prod_id1



2.create specName with prod_id

3.update mutiple specName



 



Expected Results



==========



3.1 http Response Code is 404



[[ TC7725 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.update mutiple specName set specNames have spec



 



Expected Results



==========



1. http Response Code is 404



[[ TC7726 ]]




==========



syntax



URI:/v1/product_egs/product//spec_names



Method:PUT







Testing Steps:



==========



1.no create productId



2.update mutiple specName



 



Expected Results



==========



2.1 http Response Code is 400



[[ TC7731 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is ""



 



Expected Results



==========



1.1 http Response Code is 404



1.2 verify status value



[[ TC7732 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is "!@，"



 



Expected Results



==========



1.1 http Response Code is 404



1.2 verify status value



[[ TC7733 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is "?"



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7734 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is "[12]"



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7735 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is {"a":"1"，"b":"2"}



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7736 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is "string"



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7737 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is out of scope(123456789012345678901)



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7738 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is out of scope(99999999999)



 



Expected Results



==========



1.1 http Response Code is 404



1.2 verify status value



[[ TC7739 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish set productId is out of scope(1234567890123)



 



Expected Results



==========



1.1 http Response Code is 404



[[ TC7740 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish for product



 



Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value



[[ TC7741 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish two times



 



Expected Results



==========



1. http Response Code is 409



2. verify status value



[[ TC7742 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.currency is without

 

2.publish product





Expected Results



==========



1. http Response Code is 409



2. verify status value



[[ TC7743 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.currency is without and set salequantity="5"

 

2.publish product





Expected Results



==========



1. http Response Code is 200



2. verify status value



[[ TC7744 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish for product



 



Expected Results



==========



1. http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value and publish before status value



[[ TC7745 ]]




==========



syntax



URI:/v1/product_egs/product//publish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish product



3.publish product



 



Expected Results



==========



1 http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value



[[ TC7746 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.  set request method is POST



 



Expected Results



==========



2.1  http Response Code is 405



[[ TC7747 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = (999999999999)out of scope 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7748 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = "" 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7749 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = "!@，" 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7750 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = "?" 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7751 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = "[12]" 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7752 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = {"a":"1"，"b":"2"} 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7753 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = "string" 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7754 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = (112345678901234567890)out of scope 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7755 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish 10 times product



2.unpublish 10 times product 



 



Expected Results



==========



1 http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value



[[ TC7756 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish one times product



2.unpublish 2 times product 



 



Expected Results



==========



2.1  http Response Code is 409



[[ TC7757 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1. no publish product and without currency



2.unpublish  product 



 



Expected Results



==========



2.1  http Response Code is 409



[[ TC7758 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.publish product



2.unpublish set productId = (1234567890123)out of scope 



 



Expected Results



==========



2.1 http Response Code is 404



[[ TC7759 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.create product



2.create model for specValueIdList



3.create model for product



4.publish product



5.unpublish product 



 



Expected Results



==========



1 http Response Code is 200



2. status->code=20000



3. verify description="OK"



4. verify status value



[[ TC7760 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1. no publish product



2.unpublish  product 



 



Expected Results



==========



2.1  http Response Code is 409



[[ TC7761 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.  publish product



2. no unpublish  product and request method is POST 



 



Expected Results



==========



2.1  http Response Code is 405



[[ TC7762 ]]




==========



syntax



URI:/v1/product_egs/product//unpublish



Method:PUT







Testing Steps:



==========



1.  publish product



2. unpublish  product and request method is POST 



 



Expected Results



==========



2.1  http Response Code is 405



[[ TC7763 ]]


=======

URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value



Testing Steps: 

=======

1. create product and specName

2. create specValue set all parameters

 set "specValue": "?{??"br \/>    set "iconUrl": "http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

    set "imageUrl": "http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

    set "order": 1



Expected Results 

=======

1.1~2.1 http response code is 200

2.2 verify response json schema OK



????

[[ TC7764 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId=' '

2. create specValue set specNameId=' ' 

3. create specValue

 set "specValue": ""，    

4. create specValue 

    set "iconUrl": ""，  

5. create specValue 

    set "imageUrl": ""，

6. create specValue 

    set "order": "



Expected Results 

=======

1.1~2.1 http response code is 404

3.1 http response code is 400

4.1~6.1 http response code is 200

4.2~6.2 verify response json schema OK





[[ TC7765 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue

 unset "specValue"

2. create specValue 

    unset "iconUrl

3. create specValue 

    unset "imageUrl"

4. create specValue 

    unset "order"



Expected Results 

=======

1.1 http response code is 400

2.1~4.1 http response code is 200

2.2~4.2 verify response json schema OK





[[ TC7766 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId='!@#$%'

2. create specValue set specNameId='!@#$%' 

3. create specValue

 set "specValue": "!@#$%"，    

4. create specValue 

    set "iconUrl": "!@#$%"，  

5. create specValue 

    set "imageUrl": "!@#$%"，

6. create specValue 

    set "order": !@#$%



Expected Results 

=======

1.1~2.1 http response code is 404

3.1 http response code is 200

3.2 verify response json schema OK

4.1~5.1 http response code is 500

6.1 http response code is 400







[[ TC7767 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId='?y'

2. create specValue set specNameId='?y' 

3. create specValue

 set "ecValue": "?y"    

4. create specValue 

    set "iconUrl": "?y"  

5. create specValue 

    set "imageUrl": "?y"

6. create specValue 

    set "order": ?y



Expected Results 

=======

1.1~2.1 http response code is 404

3.1 http response code is 200

3.2 verify response json schema OK

4.1~5.1 http response code is 500

6.1 http response code is 400





000

[[ TC7768 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue

 set "prodId"='string'

2. create specValue 

    set "specNameId"='string'

3. create specValue 

    set "order": string



Expected Results 

=======

1~2. http response code is 404

3. http response code is 400







[[ TC7769 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId={"a":"1"，"b":"2"}

2. create specValue set specNameId={"a":"1"，"b":"2"}

3. create specValue

 set "specValue": {"a":"1"，"b":"2"}，    

4. create specValue 

    set "iconUrl": {"a":"1"，"b":"2"}，  

5. create specValue 

    set "imageUrl": {"a":"1"，"b":"2"}，

6. create specValue 

    set "order": {"a":"1"，"b":"2"}



Expected Results 

=======

1.1~2.1 http response code is 404

3.1~5.1 http response code is 400



[[ TC7770 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId=[12]

2. create specValue set specNameId=[12]

3. create specValue

 set "specValue": [12]，    

4. create specValue 

    set "iconUrl": [12]，  

5. create specValue 

    set "imageUrl": [12]，

6. create specValue 

    set "order": [12]



Expected Results 

=======

1.1~2.1 http response code is 404

3.1~5.1 http response code is 400



[[ TC7771 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue

 set "prodId"='999999999999'

2. create specValue 

    set "specNameId"='999999999999'



Expected Results 

=======

1~2. http response code is 404



[[ TC7772 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId=123456789012345678901

2. create specValue set specNameId=123456789012345678901

3. create specValue

 set "specValue": 'abacd...'(length=65)，    

4. create specValue 

    set "iconUrl": 'abacd...'(length=275)，  

5. create specValue 

    set "imageUrl": 'abacd...'(length=275)，

6. create specValue 

    set "order": 1234567890



Expected Results 

=======

1.1~2.1 http response code is 404

3.1~5.1 http response code is 400



[[ TC7773 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue with all parameters 

2. create specValue again



Expected Results 

=======

1.1~2.1 http response code is 200

1.2~2.2  verify response json schema OK



[[ TC7774 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue with all parameters 10 times



Expected Results 

=======

1. every time http response code is 200



[[ TC7775 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set prodId='1234567890123'



Expected Results 

=======

1. http response code is 404



[[ TC7776 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set specNameId='1234567890123'



Expected Results 

=======

1. http response code is 404



[[ TC7777 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value



Testing Steps: 

=======

1. create product get prodId1

2. create specName set productId=prodId1  get id=specNameId1

3. create product get testProdId

4. create specValue set prodId=testProdId， specNameId=specNameId1



Expected Results 

=======

1~3. http response code is 200

4. http response code is 404



[[ TC7778 ]]


=======

A: URI Syntax:  

create specValue: (POST)/v1/product_egs/product//spec_name//spec_value

B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue set request method is PUT



Expected Results 

=======

1.http response code is 405





[[ TC7779 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId=' '

2. delete specValue set specNameId=' '



Expected Results 

=======

1~2 .http response code is 404



[[ TC7780 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId='?y '

2. delete specValue set specNameId=' ?y'



Expected Results 

=======

1~2 .http response code is 404



[[ TC7781 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId='string '

2. delete specValue set specNameId=' string'



Expected Results 

=======

1~2 .http response code is 404



[[ TC7782 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId='!@#$'

2. delete specValue set specNameId='!@#$'



Expected Results 

=======

1~2 .http response code is 404



[[ TC7783 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId={"a":"1"，"b":"2"}

2. delete specValue set specNameId={"a":"1"，"b":"2"}



Expected Results 

=======

1~2 .http response code is 404



[[ TC7784 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId=[12]

2. delete specValue set specNameId=[12]



Expected Results 

=======

1~2 .http response code is 404



[[ TC7785 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName， and two specValue

Testing Steps: 

=======

1. delete specValue set productId='1234567890123'

2. delete specValue set productId='99999999999'

3. delete specValue set specNameId='1234567890123'

4. delete specValue set specNameId='99999999999'



Expected Results 

=======

1~4 .http response code is 404



[[ TC7786 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create specValue and mode

2. publish product

3. delete all specValue set productId and specNameId



Expected Results 

=======

1~3. http response code is 200

4 .http response code is 409



[[ TC7787 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. delete all specValue set productId and specNameId (no specValue)



Expected Results 

=======

1. http response code is 200



[[ TC7788 ]]


=======

A: URI Syntax:  

delete all specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value



B: Pre-Data

 1. create product and specName

Testing Steps: 

=======

1. create product get id=testProdId

2. delete all specValue set testProdId and specNameId (no specValue)



Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7789 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId='?y'

2. delete specValue set specNameId='?y'

3. delete specValue set specValueId='?y'



Expected Results 

=======

1~3. http response code is 404



[[ TC7790 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId='string'

2. delete specValue set specNameId='string'

3. delete specValue set specValueId='string'



Expected Results 

=======

1~3. http response code is 404



[[ TC7791 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId="!@#$%"

2. delete specValue set specNameId="!@#$%"

3. delete specValue set specValueId="!@#$%"



Expected Results 

=======

1~3. http response code is 404



[[ TC7792 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId={"a":"1"，"b":"2"}

2. delete specValue set specNameId={"a":"1"，"b":"2"}

3. delete specValue set specValueId={"a":"1"，"b":"2"}



Expected Results 

=======

1~3. http response code is 404



[[ TC7793 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId=[12]

2. delete specValue set specNameId=[12]

3. delete specValue set specValueId=[12]



Expected Results 

=======

1~3. http response code is 404



[[ TC7794 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue set productId='1234567890123'

2. delete specValue set productId='123456789012'

3. delete specValue set specNameId='1234567890123'

4. delete specValue set specNameId='123456789012'

5. delete specValue set specValueId='1234567890123'

6. delete specValue set specValueId='123456789012'



Expected Results 

=======

1~6. http response code is 404



[[ TC7795 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. create model and publish product

2. delete specValue 



Expected Results 

=======

1. http response code is 200

2. http response code is 409



[[ TC7796 ]]


=======

A: URI Syntax:  

delete single specValue: (DELETE)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. create product get id=testProdId

2. delete specValue set productId=testProdId 



Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7797 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId ，specNameId and specValueId



Expected Results 

=======

1.1 http response code is 200

1.2 verify response data json schema is OK



[[ TC7798 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId=' '

2. get specValue set specNameId=' '

3. get specValue unset specValueId



Expected Results 

=======

1~2. http response code is 404

3. http response code is 405



[[ TC7799 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId='!@#$'

2. get specValue set specNameId='!@#$'

3. get specValue set specValueId='!@#$'



Expected Results 

=======

1~3. http response code is 404



[[ TC7800 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId='?y'

2. get specValue set specNameId='?y'

3. get specValue set specValueId='?y'



Expected Results 

=======

1~3. http response code is 404



[[ TC7801 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId={"a":"1"，"b":"2"}

2. get specValue set specNameId={"a":"1"，"b":"2"}

3. get specValue set specValueId={"a":"1"，"b":"2"}



Expected Results 

=======

1~3. http response code is 404



[[ TC7802 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId=[12]

2. get specValue set specNameId=[12]

3. get specValue set specValueId=[12]



Expected Results 

=======

1~3. http response code is 404



[[ TC7803 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId=12345678901

2. get specValue set specNameId=12345678901

3. get specValue set specValueId=12345678901



Expected Results 

=======

1~3. http response code is 404



[[ TC7804 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======



1. create product get id = testProdId

2. get specValue set productId=testProdId  

    set specNameId and specValueId not belongs to testProdId



Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7805 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId='12345678901234567890'

2. get specValue set specNameId='12345678901234567890'

3. get specValue set specValueId='12345678901234567890'

4. get specValue set productId='1234567890123'

5. get specValue set specNameId='1234567890123'

6. get specValue set specValueId='1234567890123'



Expected Results 

=======

1~6. http response code is 404



[[ TC7806 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set productId='string'

2. get specValue set specNameId='string'

3. get specValue set specValueId='string'



Expected Results 

=======

1~3. http response code is 404



[[ TC7807 ]]


=======

A: URI Syntax:  

get specValue: (GET)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. get specValue set http request method is POST



Expected Results 

=======

1. http response code is 405



[[ TC7808 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue 

    set requestData have one specValue

 "specValues": [

      {

         "specValue": "Ë{É«"br \/>         "iconUrl": "http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

         "imageUrl": "http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

         "order": 1，

         "customField1": "test_field"

       }

    ]



Expected Results 

=======

1.1 http response code is 200

1.2 verify response data json schema



>r

[[ TC7809 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue 

    set requestData have three specValue

 "specValues": [

      {

         "specValue": "Ë{É«"br \/>         "iconUrl": "http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

         "imageUrl": "http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

         "order": 1，

         "customField1": "test_field"

       }，

    {

         "specValue": "Ë{É«"br \/>         "iconUrl": "http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

         "imageUrl": "http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

         "order": 1，

         "customField1": "test_field"

       }，

    {

         "specValue": "Ë{É«"br \/>         "iconUrl": "http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

         "imageUrl": "http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

         "order": 1，

         "customField1": "test_field"

       }

    ]



Expected Results 

=======

1.1 http response code is 200

1.2 verify response data json schema



>?? ¡Á?

[[ TC7810 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set prodId=' '

2. create multiple specValue set specNameId=' '

3. create multiple specValue set specValues={}

4. create multiple specValue nuset specValues[0]['specValue']



Expected Results 

=======

1~2. http response code is 404

3~4. http response code is 400





[[ TC7811 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set specValues[0]['specValue']='²â'

2. create multiple specValue set specValues[0]['customField']='²â'

3. create multiple specValue set specValues[0]['iconUrl']='²â'

4. create multiple specValue set specValues[0]['imageUrl']='²â'



Expected Results 

=======

1~2. http response code is 200

3~4. http response code is 500

1.2~2.2 verify create specValue success





[[ TC7812 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set specValues[0]['specValue']='!@#'

2. create multiple specValue set specValues[0]['customField']='!@#'

3. create multiple specValue set specValues[0]['iconUrl']='!@#'

4. create multiple specValue set specValues[0]['imageUrl']='!@#'



Expected Results 

=======

1~2. http response code is 200

3~4. http response code is 500

1.2~2.2 verify create specValue success





[[ TC7813 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set prodId='999999999999'

2. create multiple specValue set specNameId='999999999999' 

3. create multiple specValue 

    set specValues[0]['specValue']='ancd...'(length=64)

 set specValues[0]['customField1']='ancd...'(length=20)

 set specValues[0]['order']=127

4. create multiple specValue set specValues[0]['iconUrl']='ancd...'(length=256)

5. create multiple specValue set specValues[0]['imageUrl']='ancd...'(length=256)



Expected Results 

=======

1~2. http response code is 404

3.1 http response code is 200

3.2 verify response data json schema

4~5. http response code is 500





[[ TC7814 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set prodId='9999999999999'

2. create multiple specValue set specNameId='9999999999999' 

3. create multiple specValue 

    set specValues[0]['specValue']='ancd...'(length=65)

4. create multiple specValue

 set specValues[0]['customField1']='ancd...'(length=21)

5. create multiple specValue

 set specValues[0]['order']=128

6. create multiple specValue set specValues[0]['iconUrl']='ancd...'(length=257)

7. create multiple specValue set specValues[0]['imageUrl']='ancd...'(length=257)



Expected Results 

=======

1~2. http response code is 404

3~7. http response code is 400



[[ TC7815 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  

    "specValues":[

  {

   "specValue":"blue"

  }

        ......

 ]

    specValues list have 100 specValue



Expected Results 

=======

1.1 http response code is 200

1.2 verify response json schema





[[ TC7816 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  

    "specValues":[

  {

   "specValue":"blue"

  }

        ......

 ]

    specValues list have 200 specValue



Expected Results 

=======

1. http response code is 400





[[ TC7817 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  

    "specValues":null 

2. create multiple specValue set  

    "specValues":" "

3.  create multiple specValue 

    set specValues[0]['order']=null

 set specValues[0]['customField1']=' '

 set specValues[0]['iconUrl']=' '

 set specValues[0]['imageUrl']=' '

 

Expected Results 

=======

1.1~2.1 http response code is 400

3.1 http response code is 200

3.2 verify response json schema





[[ TC7818 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId=[123]

2. create multiple specValue set  specNameId=[123]

3. create multiple specValue set  

    set specValues[0]['spceValue']=[123]

4.  create multiple specValue 

    set specValues[0]['order']=[123]

5.  create multiple specValue 

    set specValues[0]['customField1']=[123]

6.  create multiple specValue 

    set specValues[0]['iconUrl']=[123]

7.  create multiple specValue 

    set specValues[0]['imageUrl']=[123]

 

Expected Results 

=======

1~2. http response code is 404

3~7. http response code is 400





[[ TC7819 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId={"test":123}

2. create multiple specValue set  specNameId={"test":123}

3. create multiple specValue set  

    set specValues[0]['spceValue']={"test":123}

4.  create multiple specValue 

    set specValues[0]['order']={"test":123}

5.  create multiple specValue 

    set specValues[0]['customField1']={"test":123}

6.  create multiple specValue 

    set specValues[0]['iconUrl']={"test":123}

7.  create multiple specValue 

    set specValues[0]['imageUrl']={"test":123}

 

Expected Results 

=======

1~2. http response code is 404

3~7. http response code is 400





[[ TC7820 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId='test'

2. create multiple specValue set  specNameId='test'

3. create multiple specValue set {"specValues":"test"}



 

Expected Results 

=======

1~2. http response code is 404

3. http response code is 400





[[ TC7821 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  

    set specValues[0]['spceValue']='123'

2.  create multiple specValue 

    set specValues[0]['customField1']='123'

3.  create multiple specValue 

    set specValues[0]['iconUrl']='123'

4.  create multiple specValue 

    set specValues[0]['imageUrl']='123'

5.  create multiple specValue  set {"specValues":123}



Expected Results 

=======

1~2. http response code is 200

3~4. http response code is 500

5. http response code is 400



[[ TC7822 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId=-1

2. create multiple specValue set  specNameId=-1



3.  create multiple specValue 

    set specValues[0]['order']=-1



 

Expected Results 

=======

1~2. http response code is 404

3. http response code is 400





[[ TC7823 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId=0

2. create multiple specValue set  specNameId=0



3.  create multiple specValue 

    set specValues[0]['order']=0



 

Expected Results 

=======

1~2. http response code is 404

3. http response code is 200





[[ TC7824 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set  prodId=null

2. create multiple specValue set  specNameId=null

3.  create multiple specValue 

    set {"specValues":null}

4. create multiple specValue set  

    set specValues[0]['spceValue']=null

5.  create multiple specValue 

    set specValues[0]['customField1']=null

    set specValues[0]['iconUrl']=null

    set specValues[0]['imageUrl']=null

 

Expected Results 

=======

1~2. http response code is 404

3~4. http response code is 400

5.1 http response code is 200

5.2 verify create spceValue success



[[ TC7825 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. create multiple specValue set    

        {

   "specValues":[

          {

                 "specValue":"blue"，

                 "specValueId":123

             }

         ]

  }

 

Expected Results 

=======

1. http response code is 400





[[ TC7826 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. delete product

2. create multiple specValue set all parameters   



 

Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7827 ]]


=======

A: URI Syntax:  

create multiple specValue: (POST)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName 

Testing Steps: 

=======

1. delete specName

2. create multiple specValue set all parameters   



 

Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7828 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set request_data 

   {

         "specValues":[{

                 "specValueId":{$svid1}，

                 "iconUrl":"http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

                 "imageUrl":"http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

                 "order":2，

                 "customField1":"test_field2"

             }

         ]

 }



 

Expected Results 

=======

1.1 http response code is 200

1.2 verify update success



[[ TC7829 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set request_data  have 3 specValue

   {

         "specValues":[{

                 "specValueId":{$svid1}，

                 "iconUrl":"http://l.yimg.com/f/i/tw/hp/mh/09purple.gif"，

                 "imageUrl":"http://l.yimg.com/f/i/tw/news/p_logo/yptw.png"，

                 "order":2，

                 "customField1":"test_field2"

             }

       ....

         ]

 }



 

Expected Results 

=======

1.1 http response code is 200

1.2 verify update success



[[ TC7830 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId=' '

2. update specValue set specNameId=' '

3. update specValue set requestData => {}

4. update specValue unset requestData['specValues'][0]['specValueId']

 

Expected Results 

=======

1~2. http response code is 404

3~4. http response code is 400



[[ TC7831 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData['specValues'][0]['iconUrl']='y'

2. update specValue set requestData['specValues'][0]['imageUrl']='y'



Expected Results 

=======

1~2. http response code is 500





[[ TC7832 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData['specValues'][0]['iconUrl']='!@#$'

2. update specValue set requestData['specValues'][0]['imageUrl']='!@#$'



Expected Results 

=======

1~2. http response code is 500





[[ TC7833 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId='999999999999'

2. update specValue set specNameId='999999999999'

3. update specValue set requestData['specValues'][0]['specValueId']='999999999999'

4. update specValue set requestData['specValues'][0]['order']=127

5. update specValue set requestData['specValues'][0]['iconUrl']='abcdde...'(length=256)

6. update specValue set requestData['specValues'][0]['imageUrl']='abcdde...'(length=256)



Expected Results 

=======

1~3. http response code is 404

4. http response code is 200

5~6. http response code is 500



[[ TC7834 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId='9999999999999'

2. update specValue set specNameId='9999999999999'

3. update specValue set requestData['specValues'][0]['specValueId']='9999999999999'

4. update specValue set requestData['specValues'][0]['order']=128

5. update specValue set requestData['specValues'][0]['iconUrl']='abcdde...'(length=257)

6. update specValue set requestData['specValues'][0]['imageUrl']='abcdde...'(length=257)



Expected Results 

=======

1~3. http response code is 404

4~6. http response code is 400



[[ TC7835 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData['specValues'] list have 100 specValue



Expected Results 

=======

1. http response code is 200





[[ TC7836 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData['specValues'] list have 101 specValue



Expected Results 

=======

1. http response code is 400





[[ TC7837 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData {"specValues":null}

2. update specValue set requestData['specValues'][0][specValueId] =null

3. update specValue 

 set requestData['specValues'][0][order] =null

 set requestData['specValues'][0][iconUrl] =''

 set requestData['specValues'][0][imageUrl] =''



Expected Results 

=======

1~2. http response code is 400

3. http response code is 200



[[ TC7838 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId=[123]

2. update specValue set specNameId=[123]

3. update specValue set requestData['specValues'][0]['specValueId']=[123]

4. update specValue set requestData['specValues'][0]['order']=[123]

5. update specValue set requestData['specValues'][0]['iconUrl']=[123]

6. update specValue set requestData['specValues'][0]['imageUrl']=[123]



Expected Results 

=======

1~3. http response code is 404

4~6. http response code is 400



[[ TC7839 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId={"test":123}

2. update specValue set specNameId={"test":123}

3. update specValue set requestData['specValues'][0]['specValueId']={"test":123}

4. update specValue set requestData['specValues'][0]['order']={"test":123}

5. update specValue set requestData['specValues'][0]['iconUrl']={"test":123}

6. update specValue set requestData['specValues'][0]['imageUrl']={"test":123}



Expected Results 

=======

1~3. http response code is 404

4~6. http response code is 400



[[ TC7840 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId='test'

2. update specValue set specNameId='test'

3. update specValue set requestData['specValues'][0]['specValueId']='test'

4. update specValue set requestData {"specValues":"test"}





Expected Results 

=======

1~2. http response code is 404

3~4. http response code is 400



[[ TC7841 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set requestData['specValues'][0]['iconUrl']=123

2. update specValue set requestData['specValues'][0]['imageUrl']=123

3. update specValue set requestData {"specValues":123}



Expected Results 

=======

1~2. http response code is 500

3. http response code is 400



[[ TC7842 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId=-1

2. update specValue set specNameId=-1

3. update specValue set requestData['specValues'][0]['specValueId']=-1

4. update specValue set requestData['specValues'][0]['order']=-1





Expected Results 

=======

1~3. http response code is 404

4. http response code is 400



[[ TC7843 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId=0

2. update specValue set specNameId=0

3. update specValue set requestData['specValues'][0]['specValueId']=0

4. update specValue set requestData['specValues'][0]['order']=0





Expected Results 

=======

1~3. http response code is 404

4. http response code is 200



[[ TC7844 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set prodId=null

2. update specValue set specNameId=null

3. update specValue set requestData['specValues'][0]['specValueId']=null

4. update specValue set requestData  {"specValues":null}

5. update specValue 

    set requestData['specValues'][0]['iconUrl']=null

    set requestData['specValues'][0]['imageUrl']=null



Expected Results 

=======

1~3. http response code is 404

4. http response code is 400

5. http response code is 200



[[ TC7845 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue  set requestData

    {

         "specValues":[

             {

                 "specValueId":"{$svid2}"，

                 "prodId":"{$pid}"

             }

         ]

     }



Expected Results 

=======

1. http response code is 400



[[ TC7846 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue  set requestData

    {

         "specValues":[

             {

                 "specValueId":"{$svid2}"，

                 "specNameId":"{$snid}"

             }

         ]

     }



Expected Results 

=======

1. http response code is 400



[[ TC7847 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue  set requestData

    {

         "specValues":[

             {

                 "specValueId":"{$svid2}"，

                 "specValue":"test"

             }

         ]

     }



Expected Results 

=======

1. http response code is 400



[[ TC7848 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete prodect

2. update specValue  set all parameters



Expected Results 

=======

1. http response code is 200

2. http response code is 404



[[ TC7849 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. delete specValue

2. update specValue  set all parameters



Expected Results 

=======

1. http response code is 200

2. http response code is 404

[[ TC7850 ]]


=======

A: URI Syntax:  

update multiple specValue: (PUT)/v1/product_egs/product//spec_name//spec_values



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  requestData 

                {

        "specValues":[{

                "specValueId":{$svid1}，                

                "order":1

            }，

            {

          "specValueId":{$svid1}，   

                "order":2                

            }            

        ]

    }



    

Expected Results 

=======

1. http response code is 400





[[ TC7851 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId=' '

2. update specValue set  specNameId=' '

3. update specValue set  specValueId=' '

4. update specValue set  update_request_data['iconUrl']=' '

5. update specValue set  update_request_data['imageUrl']=' '

6. update specValue set  update_request_data['order']=' '



Expected Results 

=======

1.1~3.1 http response code is 404

4.1~6.1 http response code is 200

4.2~6.2 verify response json schema is OK



[[ TC7852 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set unset update_request_data['iconUrl']

2. update specValue set unset update_request_data['imageUrl']

3. update specValue set unset update_request_data['order'



Expected Results 

=======

1.1~3.1 http response code is 200

1.2~3.2 verify response json schema is OK



[[ TC7853 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId='!@#$'

2. update specValue set  specNameId='!@#$'

3. update specValue set  specValueId='!@#$'

4. update specValue set  update_request_data['iconUrl']='!@#$'

5. update specValue set  update_request_data['imageUrl']='!@#$'

6. update specValue set  update_request_data['order']='!@#$'



Expected Results 

=======

1.1~3.1 http response code is 404

4.1~5.1 http response code is 500

6.1 http response code is 400





[[ TC7854 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId='?y'

2. update specValue set  specNameId='?y

3. update specValue set  specValueId='?y'

4. update specValue set  update_request_data['iconUrl']='?y'

5. update specValue set  update_request_data['imageUrl']='?y'

6. update specValue set  update_request_data['order']='?y'



Expected Results 

=======

1.1~3.1 http response code is 404

4.1~5.1 http response code is 500

6.1 http response code is 400





[[ TC7855 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId=[12]

2. update specValue set  specNameId=[12]

3. update specValue set  specValueId=[12]

4. update specValue set  update_request_data['iconUrl']=[12]

5. update specValue set  update_request_data['imageUrl']=[12]

6. update specValue set  update_request_data['order']=[12]



Expected Results 

=======

1.1~3.1 http response code is 404

4.1~6.1 http response code is 400



[[ TC7856 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId='string'

2. update specValue set  specNameId='string'

3. update specValue set  specValueId='string'

4. update specValue set  update_request_data['order']='string'



Expected Results 

=======

1.1~3.1 http response code is 404

4.1 http response code is 400



[[ TC7857 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId={"1":"2"}

2. update specValue set  specNameId={"1":"2"}

3. update specValue set  specValueId={"1":"2"}

4. update specValue set  update_request_data['iconUrl']={"1":"2"}

5. update specValue set  update_request_data['imageUrl']={"1":"2"}

6. update specValue set  update_request_data['order']={"1":"2"}



Expected Results 

=======

1.1~3.1 http response code is 404

4.1~6.1 http response code is 400



[[ TC7858 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set  productId=123456789012345678901

2. update specValue set  specNameId=123456789012345678901

3. update specValue set  specValueId=123456789012345678901

4. update specValue set  update_request_data['iconUrl']='abcde....'(length=257)

5. update specValue set  update_request_data['imageUrl']='abcde....'(length=257)

6. update specValue set  update_request_data['order']=1234567890123



7. update specValue set  productId=1234567890123

8. update specValue set  specNameId=1234567890123

9. update specValue set  specValueId=1234567890123



Expected Results 

=======

1~3. http response code is 404

4~6. http response code is 400

7~9. http response code is 404



[[ TC7859 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue with all parameters 10 times 



Expected Results 

=======

1.1 http response code is 200

1.2 every time verify response data



[[ TC7860 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue with all parameters

2. update specValue again



Expected Results 

=======

1.1~2.1 http response code is 200

1.2~2.2 verify response data



[[ TC7861 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set productId="1234567"

2. update specValue set specNameId="1234567"

3. update specValue set specValueId="1234567"



Expected Results 

=======

1~3. http response code is 404



[[ TC7862 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



Testing Steps: 

=======

1. create product  get ProdID1  and create specName get specNameId1

2. create product  get ProdID2 

3. create specValue set productId=ProdID1， specNameId=specNameId1， get specValueId

4. update specValue set productId=ProdID2， specNameId=specNameId1， specValueId=specValueId



Expected Results 

=======

1~3. http response code is 200

4. http response code is 404



[[ TC7863 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



Testing Steps: 

=======

1. create product  get ProdID1  and create specName get specNameId1

2. create product  get ProdID2  and create specName get specNameId2

3. create specValue set productId=ProdID1， specNameId=specNameId1， get specValueId

4. update specValue set productId=ProdID1， specNameId=specNameId2， specValueId=specValueId



Expected Results 

=======

1~3. http response code is 200

4. http response code is 404



[[ TC7864 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set request_data: {"productId":"12345"}

2. update specValue set request_data: {"specNameId":"12345"}

3. update specValue set request_data: {"specValueId":"12345"}



Expected Results 

=======

1~3. http response code is 400



[[ TC7865 ]]


=======

A: URI Syntax:  

update specValue: (PUT)/v1/product_egs/product//spec_name//spec_value/



B: Pre-Data

 1. create product and specName and specValue

Testing Steps: 

=======

1. update specValue set http request method POST



Expected Results 

=======

1. http response code is 405



[[ TC7866 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product，specName，specValue and model

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update product set  request data {"categoryId":"00001111111"}

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

    

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7867 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product，specName

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update specName 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

    

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7868 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product，specName and specValue

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update specValue 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

    

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7869 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product，specName， specValue and mode

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update model 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

    

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7870 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update product {"longDescription": "long description"} 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

      set desc=1

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7871 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update product {"longDescription": "long description"} 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

      set desc=0

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200



[[ TC7872 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. delete product 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

      set desc=1

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4. http response code 200

5. http response code 404



[[ TC7873 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. create specName 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7874 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product and specName

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. create specValue 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7875 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product， specName and specValue

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. create model 

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7876 ]]


=======

A: URI Syntax:  

get product detail: (GET)/v1/product_egs/product//detail/?desc=



Testing Steps: 

=======

1. create product， specName， specValue and model

2. get product detail first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product detail second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update model stock

5. get product detail third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7877 ]]


=======

A: URI Syntax:  

get product: (GET)/v1/product_egs/product/



Testing Steps: 

=======

1. create product

2. get product first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update product set request data {"categoryId":"00001111111"}

5. get product third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7878 ]]


=======

A: URI Syntax:  

get product: (GET)/v1/product_egs/product/



Testing Steps: 

=======

1. create product

2. get product first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. delete product

5. get product third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4. http response code 200

5. http response code 404



[[ TC7879 ]]


=======

A: URI Syntax:  

get product: (GET)/v1/product_egs/product/



Testing Steps: 

=======

1. create product

2. get product first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get product second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

      unset yca

     

Expected Results 

=======

1~2. http response code is 200

3. http response code 401



[[ TC7880 ]]


=======

A: URI Syntax:  

get model: (GET)/v1/product_egs/product//model/



Testing Steps: 

=======

1. create product，specName，specValue and model

2. get model first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get model second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. update model

5. get model third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4~5. http response code 200





[[ TC7881 ]]


=======

A: URI Syntax:  

get model: (GET)/v1/product_egs/product//model/



Testing Steps: 

=======

1. create product，specName，specValue and model

2. get model first 

   and get header Last-Modified value assign $LastModified

   get header ETag value assign $ETag

3. get model second 

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

4. delete model

5. get model third  

      set header If-Modified-Since=$LastModified

   set header if-none-match=$ETag

   

Expected Results 

=======

1~2. http response code is 200

3. http response code 304

4. http response code 200

5. http response code 404



[[ TC8001 ]]


 ==========

syntax

 URI:&nbsp; (POST) /v1/product_egs/product/<em>&lt;productId&gt;</em>/model



  Testing Steps:

 ==========

 1. create product&nbsp; and get productId

2. create specName 

3. create specValue

4. create model set request data

&nbsp;&nbsp; { &nbsp;&nbsp; "specValueIdList": [{$specValueIdList}]，

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; "saleQuantity": 10，

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "barcode" : "1234567890" (length=10)

&nbsp;&nbsp; }



5. create model set request data

&nbsp;&nbsp; { &nbsp;&nbsp; "specValueIdList": [{$specValueIdList}]，

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; "saleQuantity": 10，

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "barcode" : "123456789012" (length=12)

&nbsp;&nbsp; }



6. create model set request data

&nbsp;&nbsp; { &nbsp;&nbsp; "specValueIdList": [{$specValueIdList}]，

&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; "saleQuantity": 10，

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "barcode" : "1234567890123" (length=13)

&nbsp;&nbsp; }



  Expected Results

 ==========

 1.1 -6.1&nbsp; verify http code 200



[[ TC8117 ]]


&nbsp;&nbsp;&nbsp; place bid

&nbsp;&nbsp; URI syntax: &nbsp; <span style="font-size:15px;font-family:Arial;color:#000000;background-color:transparent;font-weight:normal;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;">/v1/egs/merchandise/bid_place/&lt;mid&gt;</span>

&nbsp;&nbsp; Request Method : POST



&nbsp;&nbsp;&nbsp; query bid record list : 

&nbsp;&nbsp;&nbsp; URI syntax: /v1/egs/merchandise/bid_query_bid_record_list/{mid}?{param}

&nbsp;&nbsp;&nbsp; Request Method: GET

&nbsp;&nbsp;&nbsp; 

Step: 

&nbsp;&nbsp;&nbsp; 1.submit a merchandise and shleve id and get mid

&nbsp;&nbsp;&nbsp; 2.place bid&nbsp; set&nbsp; trace_data="test for trace data tcid TC8117"

&nbsp;&nbsp;&nbsp; 3.query bid record list

&nbsp;&nbsp;&nbsp; 



Expected Result:

&nbsp;&nbsp; 1.1-3.1 http response 200

&nbsp;&nbsp; 3.2 verify&nbsp; trace_data="test for trace data tcid TC8117"

[[ TC8180 ]]


URI syntax: /v1/egs/merchandise/create_draft/?user_update=&lt;user_update&gt;

Request Method: POST



Step:

&nbsp;&nbsp;&nbsp; 1.set requestData&nbsp;&nbsp;&nbsp; 

&nbsp;&nbsp;&nbsp; 2.create draft merchandise

&nbsp;&nbsp;&nbsp; 3.get merchandise detail check image_url_type



Expected Result:

&nbsp;&nbsp; 1.1-3.1 http response 200

&nbsp;&nbsp; 3.2 verify&nbsp; image_url_type is ok

[[ TC8181 ]]


URI syntax: /v1/egs/merchandise/submit/?user_update=&lt;user_update&gt;

Request Method: POST



Step:

&nbsp;&nbsp;&nbsp; 1.submit merchandise

&nbsp;&nbsp; 2.get merchandise detail check image_url_type



Expected Result:

&nbsp;&nbsp; 1.1-2.1 http response 200

&nbsp;&nbsp; 2.2 verify&nbsp; image_url_type is ok

[[ TC8184 ]]


URI syntax: /v1/egs/merchandise/update/&lt;mid&gt;/?user_update=&lt;user_update&gt;

Request Method: PUT



Step:

&nbsp;&nbsp;&nbsp; 1.submit merchandise

&nbsp;&nbsp;&nbsp; 2. update merchandise by mid

&nbsp;&nbsp;&nbsp; 3.get merchandise detail check image_url_type



Expected Result:

&nbsp;&nbsp; 1.1-3.1 http response 200

&nbsp;&nbsp; 3.2 verify&nbsp; image_url_type is ok

[[ TC8185 ]]


URI syntax: /v1/egs/merchandise/mass_submit/?user_update=&lt;user_update&gt;

Request Method: POST



Step:

&nbsp;&nbsp;&nbsp; 1.set requestData&nbsp;&nbsp;&nbsp; 

&nbsp;&nbsp;&nbsp; 2.mass submit merchandise

&nbsp;&nbsp;&nbsp; 3.get merchandise detail check image_url_type



Expected Result:

&nbsp;&nbsp; 1.1-3.1 http response 200

&nbsp;&nbsp; 3.2 verify&nbsp; image_url_type is ok

[[ TC8952 ]]



[[ TC8953 ]]



[[ TC8954 ]]



[[ TC8955 ]]



[[ TC8956 ]]



[[ TC8957 ]]



[[ TC8958 ]]



[[ TC8959 ]]



[[ TC8960 ]]



[[ TC8961 ]]



[[ TC8962 ]]



[[ TC8963 ]]



[[ TC8967 ]]



[[ TC8968 ]]



[[ TC8969 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/20651013576" refObjectUUID="8c9647bd-94db-49a8-80d8-07eaf680d5de" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20651013575/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20651013575/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，'a~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20651013575/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20651013575/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/16989545816" refObjectUUID="2db93ba6-b6fe-4dac-b0ef-d735e6d6ac87" refObjectName="merchandise smoke test" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20651013575/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/20786150617" refObjectUUID="f29a0bdc-14ea-4c61-a6a7-50205586850e" objectVersion="3" refObjectName="test upload multiple large image" CreatedAt="Jul 22">

      <CreationDate>2014-07-22T07:21:00.815Z</CreationDate>

      <ObjectID>20786150617</ObjectID>

      <VersionId>3</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description>this is a test， we love test.<div>one yahoo， two google， three facebook.</div></Description>

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC8971</FormattedID>

      <LastUpdateDate>2014-07-22T07:22:08.403Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>test upload multiple large image</Name>

      <Notes />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/20786150618" refObjectUUID="4036dcd0-5e60-4576-9d24-67fdf73b87e0" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，(f~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17853020468" refObjectUUID="caeab921-a459-43a3-a668-94f27f35ebd8" refObjectName="product functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20786150617/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/defect/20780735961" refObjectUUID="2d9e39b9-130c-4616-8fdb-649bd5980b82" refObjectName="[Bug 7046762][NewAuction][&#x8907;&#x88FD;&#x5546;&#x54C1;]&#x898F;&#x683C;&#x8F03;&#x591A;&#x4E14;&#x6709;&#x7D81;&#x898F;&#x683C;&#x5716;&#x6642;&#x7121;&#x6CD5;&#x520A;&#x767B;&#x6210;&#x529F;" type="Defect" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/20853601441" refObjectUUID="dc091871-6b81-4730-be04-e9afb4119a85" objectVersion="3" refObjectName="[EGS_category][order_node]order LAST node to LAST" CreatedAt="Jul 24">

      <CreationDate>2014-07-24T08:26:49.707Z</CreationDate>

      <ObjectID>20853601441</ObjectID>

      <VersionId>3</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20853601441/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20853601441/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC8974</FormattedID>

      <LastUpdateDate>2014-07-24T08:31:00.541Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/20853601441/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[EGS_category][order_node]order LAST node to LAST</Name>

      <Notes><span class="rally-rte-class-0f2f91c7b">Pre-Condition:</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">==========</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">A.</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">URI Syntax: /v1/egs/category/node/order//?next_sibling_cat_id=&amp;timeframe=</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">method: GET</span><br class="rally-rte-class-044a90e35" /><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">Testing Steps:</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">==========</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">1. insert node A</span><div>1-1. insert node B<br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">2. order node B to LAST (node B is LAST at step 1-1)</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">3. get children node v2</span></div><div>4. verify order is A then B<br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">5. delete tree_id</span><br class="rally-rte-class-044a90e35" /><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">Expected Results</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">==========</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">1.1-4.1 http response code is 200</span><br class="rally-rte-class-044a90e35" /><span class="rally-rte-class-0f2f91c7b">4.2 verify order of node</span></div>

[[ TC8997 ]]


</div><div>5. wait 3 secods</div><div>6. get merchandise data</div><div>&nbsp;6-1 verify merchandise data is status 3 (close)</div><div>7. verfiy if event cc_update is sent&nbsp;</div><div>

</div>

[[ TC8998 ]]


</div>

[[ TC8999 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21162302689" refObjectUUID="ae295d83-da97-4549-ad4d-05eaaf297d3e" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162302688/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162302688/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，，]J，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162302688/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162302688/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17550557078" refObjectUUID="2c3d3adc-6e3b-4ead-bf03-fdfe7e6d404f" refObjectName="merchandise update functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162302688/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/20617831117" refObjectUUID="83fadd9c-f0fd-41f6-b758-b1ebf6efa961" refObjectName="MER_038: As a platform PO， I want that Merchandise EGS align Bid EGS CC_update API to update offtime， so that property can use the api to implement CC tool to modify bidding merchandise offtime." type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/21162440087" refObjectUUID="cf1e39b5-31e8-4261-abbf-b4d81cd6c2b0" objectVersion="1" refObjectName="[CC_Update]Test cc_update exceed max integer value" CreatedAt="Aug 6">

      <CreationDate>2014-08-06T10:15:51.318Z</CreationDate>

      <ObjectID>21162440087</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162440087/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162440087/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9000</FormattedID>

      <LastUpdateDate>2014-08-06T10:15:51.369Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162440087/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[CC_Update]Test cc_update exceed max integer value</Name>

      <Notes>1. submit bid merchandise&nbsp;<div>2. shelve it&nbsp;</div><div>3. set update_data['merchandise_data']['offtime'] = 2147483647 + 1</div>        <div>4. call cc_update</div><div>4-1 verify http code = 400</div>

[[ TC9001 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21162441901" refObjectUUID="df7e4d79-24cd-4ee0-8830-05cfc3af0659" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162441900/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162441900/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，，]y，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162441900/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162441900/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17550557078" refObjectUUID="2c3d3adc-6e3b-4ead-bf03-fdfe7e6d404f" refObjectName="merchandise update functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162441900/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/20617831117" refObjectUUID="83fadd9c-f0fd-41f6-b758-b1ebf6efa961" refObjectName="MER_038: As a platform PO， I want that Merchandise EGS align Bid EGS CC_update API to update offtime， so that property can use the api to implement CC tool to modify bidding merchandise offtime." type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/21162543993" refObjectUUID="8e26eb8b-1e06-40ed-ab59-b81eb12d5fc1" objectVersion="1" refObjectName="[CC_Update] Test cc_update when merchadnise status = 1(draft)" CreatedAt="Aug 6">

      <CreationDate>2014-08-06T10:21:07.805Z</CreationDate>

      <ObjectID>21162543993</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162543993/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162543993/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9002</FormattedID>

      <LastUpdateDate>2014-08-06T10:21:07.877Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162543993/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[CC_Update] Test cc_update when merchadnise status = 1(draft)</Name>

      <Notes>1. create basic merchandise&nbsp;<div>2. set update_data['merchandise_data']['offtime'] = time() + 100</div><div>3. call cc_update</div><div>3-1 verify http code = 400</div>

[[ TC9003 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21162547167" refObjectUUID="74e07b91-f4ed-4fba-a9c2-afe9b58bd90f" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162547166/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162547166/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，，^&s8O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162547166/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162547166/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17550557078" refObjectUUID="2c3d3adc-6e3b-4ead-bf03-fdfe7e6d404f" refObjectName="merchandise update functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162547166/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/20617831117" refObjectUUID="83fadd9c-f0fd-41f6-b758-b1ebf6efa961" refObjectName="MER_038: As a platform PO， I want that Merchandise EGS align Bid EGS CC_update API to update offtime， so that property can use the api to implement CC tool to modify bidding merchandise offtime." type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/21162550266" refObjectUUID="c6968370-c794-400d-a02a-55575a4536e9" objectVersion="1" refObjectName="[CC_Update] Test cc_update when merchadnise status = 4(cancel)" CreatedAt="Aug 6">

      <CreationDate>2014-08-06T10:25:18.740Z</CreationDate>

      <ObjectID>21162550266</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162550266/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162550266/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9004</FormattedID>

      <LastUpdateDate>2014-08-06T10:25:18.798Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162550266/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[CC_Update] Test cc_update when merchadnise status = 4(cancel)</Name>

      <Notes>1. submit basic merchandise&nbsp;<div>2. cacelit&nbsp;</div><div>3. set update_data['merchandise_data']['offtime'] = time() + 100</div><div>4. call cc_update</div><div>4-1. verify http code = 400</div>

[[ TC9005 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21162657468" refObjectUUID="85d638c1-f4ad-479b-a0ec-0a104a4968d0" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162657467/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162657467/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，，^)mD8O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162657467/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162657467/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17550557078" refObjectUUID="2c3d3adc-6e3b-4ead-bf03-fdfe7e6d404f" refObjectName="merchandise update functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162657467/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/20617831117" refObjectUUID="83fadd9c-f0fd-41f6-b758-b1ebf6efa961" refObjectName="MER_038: As a platform PO， I want that Merchandise EGS align Bid EGS CC_update API to update offtime， so that property can use the api to implement CC tool to modify bidding merchandise offtime." type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/21162662993" refObjectUUID="d16ace53-84b6-42a6-8183-cafc2cf93eb3" objectVersion="1" refObjectName="[CC_Update] Test cc_update when merchadnise status = 6(END)" CreatedAt="Aug 6">

      <CreationDate>2014-08-06T10:30:44.500Z</CreationDate>

      <ObjectID>21162662993</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162662993/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162662993/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9006</FormattedID>

      <LastUpdateDate>2014-08-06T10:30:44.563Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21162662993/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[CC_Update] Test cc_update when merchadnise status = 6(END)</Name>

      <Notes>1. submit bid merchandise with bid<div>&nbsp; &nbsp; buynow_price = 350</div><div>&nbsp; &nbsp;&nbsp;

<div>2. shelve it</div><div>3. call place_bid &nbsp;with max_price = 350</div><div>4. set update_data['merchandise_data']['offtime'] = time() + 100</div><div>5. call cc_update</div><div>5-1. verify http code = 400</div></div>

[[ TC9021 ]]


      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21726800221" refObjectUUID="8a75de45-37cf-4e14-a919-0ed6ae58472f" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726800220/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726800220/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，.=J，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726800220/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726800220/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/17853020468" refObjectUUID="caeab921-a459-43a3-a668-94f27f35ebd8" refObjectName="product functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726800220/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/defect/21550892446" refObjectUUID="8001b9e5-2aa2-4966-8dff-e4e810802fdf" refObjectName="(8/22.Fri) Bugzilla Ticket 7082994 - [INT3] cannot clean up product and model fields" type="Defect" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/21726965503" refObjectUUID="11392969-f026-472a-817e-7b70643feafb" objectVersion="2" refObjectName="[Product] Create Product with barcode empty string" CreatedAt="Aug 22">

      <CreationDate>2014-08-22T09:14:04.038Z</CreationDate>

      <ObjectID>21726965503</ObjectID>

      <VersionId>2</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726965503/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726965503/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9022</FormattedID>

      <LastUpdateDate>2014-08-22T09:14:50.459Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21726965503/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[Product] Create Product with barcode empty string</Name>

      <Notes><ol><li>create product with barcode ""</li><li>get product</li><li>validate barcode = ""</li></ol>

[[ TC9029 ]]



[[ TC9030 ]]



[[ TC9031 ]]



[[ TC9032 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/13019627319" refObjectUUID="f24427bd-18a7-465c-aa8d-77f9cb3d3adc" refObjectName="Wesley Lin" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/21849022974" refObjectUUID="86bda4a3-a8cb-42c0-997b-ea7f11994b0e" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21849022973/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21849022973/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，.NJ，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21849022973/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21849022973/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestFolder rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testfolder/16989958015" refObjectUUID="4c7ccf07-9c0b-4ada-a0e8-bfc891266619" refObjectName="merchandise bidding functional" type="TestFolder" />

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/21849022973/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/21265907207" refObjectUUID="42e4b894-3df6-4db8-8acb-18b332ca68c5" refObjectName="(8/25.Mon)[AUC_UNSYNC]: Resolve sherpa fail issues (etc.， 530)" type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/22356853911" refObjectUUID="0058f0e0-dc55-4f56-9b05-f5c199efb510" objectVersion="2" refObjectName="[EGS_merchandise_shelve][auto_reshelve] send message & reshelved bid merchandise if receive previous bid id auto close event" CreatedAt="Sep 4">

      <CreationDate>2014-09-04T10:39:54.078Z</CreationDate>

      <ObjectID>22356853911</ObjectID>

      <VersionId>2</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description>If receive close event from previous bid id， and this bid merchandise can be auto reshelved but status not 2，<div>then auto reshelve the merchandise without copy bid id， and send reshelve message.</div></Description>

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9038</FormattedID>

      <LastUpdateDate>2014-09-04T10:40:16.776Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[EGS_merchandise_shelve][auto_reshelve] send message & reshelved bid merchandise if receive previous bid id auto close event</Name>

      <Notes />

      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/15199764441" refObjectUUID="b048b0e4-a810-49dd-ab93-d2ba5139ccef" refObjectName="Joe Hsu" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/22356853912" refObjectUUID="5ea9c249-ec6d-4389-8e96-1f4687317390" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，.Ly，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Manual</Method>

      <Objective />

      <PostConditions />

      <PreConditions>Prepare:<div>1. submit a bid merchandise mid1 which can be auto reshelved</div><div>2. get bid_id1 from mid1</div><div>3. shelve mid1</div><div>4. copy bid&nbsp;bid_id2 from&nbsp;bid_id1</div><div>

</div><div>Step:</div><div>1. qa update mid1 with "bid_id" =&nbsp;bid_id2， "previous_bid_id" =&nbsp;bid_id1&nbsp;</div><div>2. get mid1</div><div>3. qa update bid_id1 with "offtime" = now time + 2 seconds;</div><div>4.&nbsp;<span style="font-size: 12px;">wait 2 seconds and</span><span style="font-size: 12px;">&nbsp;&nbsp;</span><span style="font-size: 12px;">get event from tool</span></div><div><span style="font-size: 12px;">5.&nbsp;</span><span style="font-size: 12px;">get mid1</span></div><div>

</div><div>Check:</div><div>1. &nbsp; &nbsp;<span style="font-size: 12px;">http code 200</span></div><div><span style="font-size: 12px;">2-1.&nbsp;</span><span style="font-size: 12px;">http code 200</span></div><div><span style="font-size: 12px;">2-2. mid1 status is closed</span></div><div>3. &nbsp; &nbsp;<span style="font-size: 12px;">http code 200</span></div><div><span style="font-size: 12px;">4</span><span style="font-size: 12px;">. &nbsp; &nbsp;check event "auto_reshelve" of mid 1 has been sent</span></div><div><div><span style="font-size: 12px;">5-1.&nbsp;</span><span style="font-size: 12px;">http code 200</span></div></div><div>5-2.&nbsp;</div><div>&nbsp; mid1 status is shelved，</div><div><span style="font-size: 12px;">&nbsp; mid1 bid_id is bid_id2，</span></div><div><span style="font-size: 12px;">&nbsp; mid1 previous_bid_id is bid_id1&nbsp;</span></div><div>

</div></PreConditions>

      <Priority>None</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22356853911/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

      <WorkProduct rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/hierarchicalrequirement/21265907207" refObjectUUID="42e4b894-3df6-4db8-8acb-18b332ca68c5" refObjectName="(8/25.Mon)[AUC_UNSYNC]: Resolve sherpa fail issues (etc.， 530)" type="HierarchicalRequirement" />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/22820979507" refObjectUUID="a332253b-8a3a-4879-bd70-1891f0e813c3" objectVersion="2" refObjectName="merchandise_egs_get: try to get a merchandise related to a purged bid id and get exception" CreatedAt="Sep 16">

      <CreationDate>2014-09-16T03:10:12.191Z</CreationDate>

      <ObjectID>22820979507</ObjectID>

      <VersionId>2</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22820979507/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22820979507/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9190</FormattedID>

      <LastUpdateDate>2014-09-16T03:13:27.431Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/22820979507/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>merchandise_egs_get: try to get a merchandise related to a purged bid id and get exception</Name>

      <Notes><span style="font-size: 11.8181819915771px;">Pre-Condition:&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">==========&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">A.data</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">1. create a bid merchandise and get mid</span><div><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">Testing Steps:&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">==========&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">1. get bid id by mid&nbsp;</span><br style="font-size: 11.8181819915771px;" />2. purge bid id</div><div>3. get mid and expect exception

<br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">Expected Results&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">==========&nbsp;</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">1.1-2.1 http response 200</span><br style="font-size: 11.8181819915771px;" /><span style="font-size: 11.8181819915771px;">3.1 http response 500</span></div>

[[ TC9191 ]]


</div><div>create tree</div><div>create node A ， parent is 0&nbsp;</div><div>create node B ， parent is 0</div><div>create node C ， parent is 0&nbsp;</div><div>create node D ， parent is 0， alias to A</div><div>create node E ， parent is 0 &nbsp;</div><div>

</div><div>delete C</div><div>

</div><div>get node 0 with children v2&nbsp;</div><div>verify order is A，B，E</div>

[[ TC9192 ]]


</div><div>

</div><div>create tree</div><div>create node A ， parent is 0 (default order to LAST)</div><div>create node B ， parent is 0 (default order to LAST)</div><div>

</div><div>create node BA ， parent is B (default order to LAST)</div><div>create node BB ， parent is B (default order to LAST) ， alias to A</div><div>

</div><div>delete A</div><div>

</div><div>get node B with children v2&nbsp;</div><div>verify it&nbsp;</div><div>

</div>

[[ TC9193 ]]


</div><div>create tree</div><div>create node A ， parent is 0 (default order to LAST)</div><div>create node B ， parent is 0 (default order to LAST)</div><div>

</div><div>create node BA ， parent is B (default order to LAST)， alias to A</div><div>create node BB ， parent is B (default order to LAST)</div><div>

</div><div>delete A</div><div>

</div><div>

</div><div>get node B with children v2&nbsp;</div><div>verify it&nbsp;</div><div>

</div>

[[ TC9194 ]]


</div><div>create tree</div><div>create node A ， parent is 0 (default order to LAST)</div><div>create node B ， parent is 0 (default order to LAST)，alias to A&nbsp;</div><div>

</div><div>delete A</div><div>

</div><div>get node 0 with children v2&nbsp;</div><div>verify no children left.</div><div>

</div><div>

</div>

[[ TC9206 ]]



[[ TC9209 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/15199764441" refObjectUUID="b048b0e4-a810-49dd-ab93-d2ba5139ccef" refObjectName="Joe Hsu" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/25607990115" refObjectUUID="4aa164b1-7580-4054-ae58-36b8e08bfe87" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25607990114/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25607990114/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，2;y，gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Automated</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>Critical</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25607990114/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25607990114/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25607990114/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/25611327953" refObjectUUID="4b1e0924-5b3f-42cb-8d78-37f52f84decd" objectVersion="3" refObjectName="[EGS_forward_product_event] Create a merchandise with related product， update one related product model， check product_update event is forwarded" CreatedAt="Nov 19">

      <CreationDate>2014-11-19T09:42:47.772Z</CreationDate>

      <ObjectID>25611327953</ObjectID>

      <VersionId>3</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611327953/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611327953/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9210</FormattedID>

      <LastUpdateDate>2014-11-19T09:50:14.016Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611327953/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[EGS_forward_product_event] Create a merchandise with related product， update one related product model， check product_update event is forwarded</Name>

      <Notes><span class="rally-rte-class-06992b8a3">Pre-Condition:&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. create two basic merchandise with related product.</span><div><span style="font-size: 12px;">&nbsp; &nbsp; Get productId1， modelId1， mid1， mid2</span><div><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">Testing Steps:&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. update modelId1 with content {'</span><span style="font-size: 12px;">notifyQuantity' </span><span class="s1" style="font-size: 12px;">=&gt; 7</span><span style="font-size: 12px;">}</span></div>        <div><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">Expected Results&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. http response 200</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">2.</span><span style="font-size: 11.8181819915771px;">&nbsp;check mid1 with event 'product_update' has been sent&nbsp;</span></div></div><div><span style="font-size: 11.8181819915771px;">3.&nbsp;</span><span style="font-size: 11.8181819915771px;">check mid2 with event 'product_update' has been sent&nbsp;</span></div>

[[ TC9211 ]]


</span></div><div><span class="rally-rte-class-06992b8a3">Expected Results&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. http response 200</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">2.</span><span style="font-size: 11.8181819915771px;">&nbsp;check mid1 with event 'product_update' has been sent</span></div></div><div><span style="font-size: 11.8181819915771px;">3.&nbsp;</span><span style="font-size: 11.8181819915771px;">check mid2 with event 'product_update' has been sent&nbsp;</span></div>

[[ TC9212 ]]


      <Owner rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/user/15199764441" refObjectUUID="b048b0e4-a810-49dd-ab93-d2ba5139ccef" refObjectName="Joe Hsu" type="User" />

      <Project rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/project/13017856970" refObjectUUID="027ac7cb-df08-4dfc-acb1-87494344a77b" refObjectName="NEVEC 1" type="Project" />

      <Ready>false</Ready>

      <RevisionHistory rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/revisionhistory/25611538703" refObjectUUID="4b825bdf-cc42-4444-bcdf-f8e2381821ef" type="RevisionHistory" />

      <Tags rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611538702/Tags" type="Tag">

         <_tagsNameArray />

         <Count>0</Count>

      </Tags>

      <Attachments rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611538702/Attachments" type="Attachment">

         <_itemRefArray />

         <Count>0</Count>

      </Attachments>

      <DefectStatus>NONE</DefectStatus>

      <DragAndDropRank>P!，2<2[gO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</DragAndDropRank>

      <Method>Automated</Method>

      <Objective />

      <PostConditions />

      <PreConditions />

      <Priority>Critical</Priority>

      <Recycled>false</Recycled>

      <Results rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611538702/Results" type="TestCaseResult">

         <_itemRefArray />

         <Count>0</Count>

      </Results>

      <Risk>None</Risk>

      <Steps rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611538702/Steps" type="TestCaseStep">

         <_itemRefArray />

         <Count>0</Count>

      </Steps>

      <TestSets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611538702/TestSets" type="TestSet">

         <_itemRefArray />

         <Count>0</Count>

      </TestSets>

      <Type>Acceptance</Type>

      <ValidationExpectedResult />

      <ValidationInput />

   </TestCase>

   <TestCase rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/testcase/25611542602" refObjectUUID="bfd51b45-63a8-495e-85cc-15e162c66589" objectVersion="1" refObjectName="[EGS_forward_product_event] Create a merchandise with related product， create two models in the related product， check product_update event is forwarded" CreatedAt="Nov 19">

      <CreationDate>2014-11-19T09:48:43.156Z</CreationDate>

      <ObjectID>25611542602</ObjectID>

      <VersionId>1</VersionId>

      <Subscription rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/subscription/7177178755" refObjectUUID="c94ac073-f5a3-4f09-8a6a-ebd11603d7c4" refObjectName="Yahoo! Inc." type="Subscription" />

      <Workspace rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/workspace/7177178773" refObjectUUID="0e653a2f-54ad-4b9b-a280-7b33087b572c" refObjectName="Yahoo!" type="Workspace" />

      <Changesets rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611542602/Changesets" type="Changeset">

         <_itemRefArray />

         <Count>0</Count>

      </Changesets>

      <Description />

      <Discussion rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611542602/Discussion" type="ConversationPost">

         <_itemRefArray />

         <Count>0</Count>

      </Discussion>

      <Expedite>false</Expedite>

      <FormattedID>TC9213</FormattedID>

      <LastUpdateDate>2014-11-19T09:48:43.189Z</LastUpdateDate>

      <Milestones rallyAPIMajor="2" rallyAPIMinor="0" ref="https://rally1.rallydev.com/slm/webservice/v2.x/TestCase/25611542602/Milestones" type="Milestone">

         <_tagsNameArray />

         <Count>0</Count>

      </Milestones>

      <Name>[EGS_forward_product_event] Create a merchandise with related product， create two models in the related product， check product_update event is forwarded</Name>

      <Notes><span class="rally-rte-class-06992b8a3">Pre-Condition:&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. create two basic merchandise with related product.</span><div><span style="font-size: 12px;">&nbsp; &nbsp; Get productId1， mid1， mid2</span><div><div><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">Testing Steps:&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. create two models in productId1 using API createModels</span><br class="rally-rte-class-07f9877ac" /><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">Expected Results&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">==========&nbsp;</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">1. http response 200</span><br class="rally-rte-class-07f9877ac" /><span class="rally-rte-class-06992b8a3">2.</span><span style="font-size: 11.8181819915771px;">&nbsp;check mid1 with event 'product_update' has been sent&nbsp;</span></div></div></div><div><span style="font-size: 11.8181819915771px;">3.&nbsp;</span><span style="font-size: 11.8181819915771px;">check mid2 with event 'product_update' has been sent&nbsp;</span></div>

[[ TC9214 ]]



[[ TC9215 ]]



[[ TC9216 ]]



[[ TC9217 ]]



[[ TC9218 ]]


